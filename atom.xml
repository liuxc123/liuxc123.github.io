<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuxc的博客</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-16T01:17:28.678Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liuxc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/16/hello-world/"/>
    <id>http://yoursite.com/2018/03/16/hello-world/</id>
    <published>2018-03-16T01:17:28.678Z</published>
    <updated>2018-03-16T01:17:28.678Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>iOS代码规范</title>
    <link href="http://yoursite.com/2018/03/15/iOS%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/03/15/iOS代码规范/</id>
    <published>2018-03-15T11:59:23.000Z</published>
    <updated>2018-03-16T09:04:40.195Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/859001-a9d78ce3d5e7114f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>利用业余时间，整理出来了这份规范，我会将这份规范作为以后我们团队的代码规范，并且我也会根据读者的反馈以及项目的实践不定时更新，希望大家多多指正批评。</p><p>这篇规范一共分为三个部分：</p><ol><li>核心原则：介绍这篇代码规范所遵循的核心原则。</li><li>通用规范：不局限iOS的通用性的代码规范（使用C语言和Swift语言）</li><li>iOS规范：仅适用于iOS的代码规范（使用Objective-C）</li></ol><h2 id="一、核心原则"><a href="#一、核心原则" class="headerlink" title="一、核心原则"></a>一、核心原则</h2><h3 id="原则一：代码应该简洁易懂，逻辑清晰"><a href="#原则一：代码应该简洁易懂，逻辑清晰" class="headerlink" title="原则一：代码应该简洁易懂，逻辑清晰"></a>原则一：代码应该简洁易懂，逻辑清晰</h3><p>以为软件是需要人来维护的。这个人在未来很可能不是你。所以首先是为人编写程序，其次才是计算机。</p><ul><li>不要分追求技巧，降低程序的可读性</li><li>简洁的代码可以让bug无处藏身。要写出明显没有bug的代码，而不是没有明显bug的代码。</li></ul><h3 id="原则二：面向变化编程，而不是面向需求编程"><a href="#原则二：面向变化编程，而不是面向需求编程" class="headerlink" title="原则二：面向变化编程，而不是面向需求编程"></a>原则二：面向变化编程，而不是面向需求编程</h3><p>需求是暂时的，只有变化才是永恒的。<br>本次迭代不能仅仅为了当前的需求，要写出拓展性强，易修改的程序才是责任的做法，对自己负责，对公司负责。</p><h3 id="原则三：先保证程序的正确性，防止过度工程"><a href="#原则三：先保证程序的正确性，防止过度工程" class="headerlink" title="原则三：先保证程序的正确性，防止过度工程"></a>原则三：先保证程序的正确性，防止过度工程</h3><p>过度工程（over-engineering）：在正确可用的代码写出之前就过度地考虑拓展，重用的的问题，使得工程过度复杂。<br>引用《王垠：编程的智慧》里的话：</p><blockquote><ol><li>先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。</li><li>先写出可用的代码，反复推敲，再考虑是否需要重用的问题。</li><li>先写出可用，简单，明显没有bug的代码，再考虑测试的问题。</li></ol></blockquote><h2 id="通用规范"><a href="#通用规范" class="headerlink" title="通用规范"></a>通用规范</h2><h3 id="关于大括号"><a href="#关于大括号" class="headerlink" title="关于大括号"></a>关于大括号</h3><hr><ul><li>控制语句(if,for,while,switch)中，大括号开始与行尾</li><li>函数中，大括号要开始于行首</li></ul><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//控制语句</span><br><span class="line">white(someCondition)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//函数</span><br><span class="line">void function(param1,param2)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><hr><h4 id="1-运算符与变量之间的间隔"><a href="#1-运算符与变量之间的间隔" class="headerlink" title="1.运算符与变量之间的间隔"></a>1.运算符与变量之间的间隔</h4><h5 id="1-1-一元运算符与变量之间没有空格："><a href="#1-1-一元运算符与变量之间没有空格：" class="headerlink" title="1.1 一元运算符与变量之间没有空格："></a>1.1 一元运算符与变量之间没有空格：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!bValue</span><br><span class="line">~iValue</span><br><span class="line">++iCount</span><br><span class="line">*strSource</span><br><span class="line">&amp;fSum</span><br></pre></td></tr></table></figure><h5 id="1-2-二元运算符与变量之间必须有空格："><a href="#1-2-二元运算符与变量之间必须有空格：" class="headerlink" title="1.2 二元运算符与变量之间必须有空格："></a>1.2 二元运算符与变量之间必须有空格：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fWidth = 5 + 5;</span><br><span class="line">fLength = fWidth * 2;</span><br><span class="line">fHeight = fWidth + fLength;</span><br><span class="line">for(int i = 0; i &lt; 10; i++)</span><br></pre></td></tr></table></figure><h4 id="2-多个不同的运算符同时存在时应该使用括号来明确优先级"><a href="#2-多个不同的运算符同时存在时应该使用括号来明确优先级" class="headerlink" title="2. 多个不同的运算符同时存在时应该使用括号来明确优先级"></a>2. 多个不同的运算符同时存在时应该使用括号来明确优先级</h4><p>在多个不同的运算符同时存在的时候应该合理使用括号，不要盲目依赖操作符优先级。<br>因为有的时候不能保证阅读你代码的人就一定能了解你写的算式里面所有操作符的优先级。</p><p>来看一下这个算式：2 &lt;&lt; 2 + 1 * 3 - 4</p><p>这里的<code>&lt;&lt;</code>是移位操作直观上却很容易认为它的优先级很高，所以就把这个算式误认为：(2 &lt;&lt; 2) + 13 - 4<br>但事实上，它的优先级是比加减法还要低的，所以该算式应该等同于：2 &lt;&lt; (2 + 13 - 4).<br>所以在以后写这种复杂一点的算式的时候，尽量多加一点括号，避免让其他人误解（甚至是自己）。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><hr><h4 id="1-一个变量有且只有一个功能，尽量不要把一个变量用作多种用途"><a href="#1-一个变量有且只有一个功能，尽量不要把一个变量用作多种用途" class="headerlink" title="1.一个变量有且只有一个功能，尽量不要把一个变量用作多种用途"></a>1.一个变量有且只有一个功能，尽量不要把一个变量用作多种用途</h4><h4 id="2-变量在使用前应该初始化，防止未初始化的变量被引用"><a href="#2-变量在使用前应该初始化，防止未初始化的变量被引用" class="headerlink" title="2.变量在使用前应该初始化，防止未初始化的变量被引用"></a>2.变量在使用前应该初始化，防止未初始化的变量被引用</h4><h4 id="3-局部变量应该尽量接近使用它的地方"><a href="#3-局部变量应该尽量接近使用它的地方" class="headerlink" title="3.局部变量应该尽量接近使用它的地方"></a>3.局部变量应该尽量接近使用它的地方</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func someFunction() &#123;</span><br><span class="line"> </span><br><span class="line">  let index = ...;</span><br><span class="line">  //Do something With index</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  let count = ...;</span><br><span class="line">  //Do something With count</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func someFunction() &#123;</span><br><span class="line"> </span><br><span class="line">  let index = ...;</span><br><span class="line">  let count = ...;</span><br><span class="line">  //Do something With index</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  //Do something With count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><hr><h4 id="1-必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。"><a href="#1-必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。" class="headerlink" title="1.必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。"></a>1.必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var hintStr;</span><br><span class="line">if (count &lt; 3) &#123;</span><br><span class="line">  hintStr = &quot;Good&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  hintStr = &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var hintStr;</span><br><span class="line">if (count &lt; 3) &#123;</span><br><span class="line"> hintStr = &quot;Good&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-不要使用过多的分支，要善于使用return来提前返回错误的情况"><a href="#2-不要使用过多的分支，要善于使用return来提前返回错误的情况" class="headerlink" title="2.不要使用过多的分支，要善于使用return来提前返回错误的情况"></a>2.不要使用过多的分支，要善于使用return来提前返回错误的情况</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)someMethod &#123; </span><br><span class="line">  if (!goodCondition) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  //Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)someMethod &#123; </span><br><span class="line">  if (goodCondition) &#123;</span><br><span class="line">    //Do something</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较典型的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-(id)initWithDictionary:(NSDictionary*)dict error:(NSError)err</span><br><span class="line">&#123;</span><br><span class="line">   //方法1. 参数为nil</span><br><span class="line">   if (!dict) &#123;</span><br><span class="line">     if (err) *err = [JSONModelError errorInputIsNil];</span><br><span class="line">     return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法2. 参数不是nil，但也不是字典</span><br><span class="line">    if (![dict isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">        if (err) *err = [JSONModelError errorInvalidDataWithMessage:@&quot;Attempt to initialize JSONModel object using initWithDictionary:error: but the dictionary parameter was not an &apos;NSDictionary&apos;.&quot;];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法3. 初始化</span><br><span class="line">    self = [self init];</span><br><span class="line">    if (!self) &#123;</span><br><span class="line">        //初始化失败</span><br><span class="line">        if (err) *err = [JSONModelError errorModelIsInvalid];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法4. 检查用户定义的模型里的属性集合是否大于传入的字典里的key集合（如果大于，则返回NO）</span><br><span class="line">    if (![self __doesDictionary:dict matchModelWithKeyMapper:self.__keyMapper error:err]) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法5. 核心方法：字典的key与模型的属性的映射</span><br><span class="line">    if (![self __importDictionary:dict withKeyMapper:self.__keyMapper validation:YES error:err]) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法6. 可以重写[self validate:err]方法并返回NO，让用户自定义错误并阻拦model的返回</span><br><span class="line">    if (![self validate:err]) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法7. 终于通过了！成功返回model</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，在这里，首先判断出各种错误的情况然后提前返回，把最正确的情况放到最后返回。</p></blockquote><h4 id="3-条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值"><a href="#3-条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值" class="headerlink" title="3.条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值"></a>3.条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let nameContainsSwift = sessionName.hasPrefix(&quot;Swift&quot;)</span><br><span class="line">let isCurrentYear = sessionDateCompontents.year == 2014</span><br><span class="line">let isSwiftSession = nameContainsSwift &amp;&amp; isCurrentYear</span><br><span class="line">if (isSwiftSession) &#123; </span><br><span class="line">   // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ( sessionName.hasPrefix(&quot;Swift&quot;) &amp;&amp; (sessionDateCompontents.year == 2014) ) &#123; </span><br><span class="line">    // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-条件语句的判断应该是变量在左，常量在右"><a href="#4-条件语句的判断应该是变量在左，常量在右" class="headerlink" title="4.条件语句的判断应该是变量在左，常量在右"></a>4.条件语句的判断应该是变量在左，常量在右</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( count == 6) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( object == nil) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( !object ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( 6 == count) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f ( nil == object ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-每个分支必须的实现代码必须用大括号包围"><a href="#5-每个分支必须的实现代码必须用大括号包围" class="headerlink" title="5.每个分支必须的实现代码必须用大括号包围"></a>5.每个分支必须的实现代码必须用大括号包围</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!error) &#123;</span><br><span class="line">  return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!error)</span><br><span class="line">    return success;</span><br></pre></td></tr></table></figure></p><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!error) return success;</span><br></pre></td></tr></table></figure><h4 id="6-条件过多，过长的时候应该换行"><a href="#6-条件过多，过长的时候应该换行" class="headerlink" title="6.条件过多，过长的时候应该换行"></a>6.条件过多，过长的时候应该换行</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (condition1() &amp;&amp; </span><br><span class="line">    condition2() &amp;&amp; </span><br><span class="line">    condition3() &amp;&amp; </span><br><span class="line">    condition4()) &#123;</span><br><span class="line">  // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (condition1() &amp;&amp; condition2() &amp;&amp; condition3() &amp;&amp; condition4()) &#123;</span><br><span class="line">  // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><hr><h4 id="1-不可在for循环内修改循环变量，防止for循环失去控制。"><a href="#1-不可在for循环内修改循环变量，防止for循环失去控制。" class="headerlink" title="1.不可在for循环内修改循环变量，防止for循环失去控制。"></a>1.不可在for循环内修改循环变量，防止for循环失去控制。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (int index = 0; index &lt; 10; index++)&#123;</span><br><span class="line">   ...</span><br><span class="line">   logicToChange(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-避免使用continue和break。"><a href="#2-避免使用continue和break。" class="headerlink" title="2.避免使用continue和break。"></a>2.避免使用continue和break。</h4><p>continue和break做描述的是“什么时候不做什么”，所以为了读懂二者所在的代码，我们需要在头脑里将他们取反。</p><p>其实最好不要让这两个东西出现，移位我们的代码只要体现出“什么时候做什么”就好了，而且通过适当的方法，是可以将这两个东西消灭掉的；</p><h5 id="2-1-如果出现了continue，只需要把continue的条件取反即可"><a href="#2-1-如果出现了continue，只需要把continue的条件取反即可" class="headerlink" title="2.1 如果出现了continue，只需要把continue的条件取反即可"></a>2.1 如果出现了continue，只需要把continue的条件取反即可</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var filteredProducts = Array&lt;String&gt;()</span><br><span class="line">for level in products &#123;</span><br><span class="line">    if level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">        continue</span><br><span class="line">    &#125;</span><br><span class="line">    filteredProducts.append(level)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，通过判断字符串里是否还有“bad”这个prefix老过滤掉一些值。其实我们是可以通过取反，来避免使用continue的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for level in products &#123;</span><br><span class="line">    if !level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">      filteredProducts.append(level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-消除while里的break；讲break的条件取反，合并并到主循环里"><a href="#2-2-消除while里的break；讲break的条件取反，合并并到主循环里" class="headerlink" title="2.2 消除while里的break；讲break的条件取反，合并并到主循环里"></a>2.2 消除while里的break；讲break的条件取反，合并并到主循环里</h5><p>在while里的block其实就相当于“不存在”，既然是不存在的东西就完全可以子啊最开始的条件语句中将其排除。</p><p>while里的break:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (condition1) &#123;</span><br><span class="line">  ...</span><br><span class="line">  if (condition2) &#123;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取反并合并到主条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (condition1 &amp;&amp; !condition2) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-在有返回值的方法里消除break：将break转换为return立即返回"><a href="#2-3-在有返回值的方法里消除break：将break转换为return立即返回" class="headerlink" title="2.3 在有返回值的方法里消除break：将break转换为return立即返回"></a>2.3 在有返回值的方法里消除break：将break转换为return立即返回</h5><p>有些朋友喜欢这样做：在有返回值的方法里break之后，再返回某个值。其实完全可以在break的那一行直接返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func hasBadProductIn(products: Array&lt;String&gt;) -&gt; Bool &#123;</span><br><span class="line">    var result = false    </span><br><span class="line">    for level in products &#123;</span><br><span class="line">        if level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">            result = true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到错误条件直接返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func hasBadProductIn(products: Array&lt;String&gt;) -&gt; Bool &#123;</span><br><span class="line">    for level in products &#123;</span><br><span class="line">        if level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写的话不用特意声明一个变量来特意保存需要返回的值，看起来非常简洁，可读性高。</p><h3 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h3><hr><h4 id="1-每个分支都必须用大括号括起来"><a href="#1-每个分支都必须用大括号括起来" class="headerlink" title="1. 每个分支都必须用大括号括起来"></a>1. 每个分支都必须用大括号括起来</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">switch (integer) &#123;  </span><br><span class="line">  case 1:  &#123;</span><br><span class="line">    // ...  </span><br><span class="line">   &#125;</span><br><span class="line">    break;  </span><br><span class="line">  case 2: &#123;  </span><br><span class="line">    // ...  </span><br><span class="line">    break;  </span><br><span class="line">  &#125;  </span><br><span class="line">  case 3: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">  default:&#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用枚举类型时，不能有default分支，-除了使用枚举类型以外，都必须有default分支"><a href="#2-使用枚举类型时，不能有default分支，-除了使用枚举类型以外，都必须有default分支" class="headerlink" title="2. 使用枚举类型时，不能有default分支， 除了使用枚举类型以外，都必须有default分支"></a>2. 使用枚举类型时，不能有default分支， 除了使用枚举类型以外，都必须有default分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;  </span><br><span class="line">switch (menuType) &#123;  </span><br><span class="line">  case RWTLeftMenuTopItemMain: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">   &#125;</span><br><span class="line">  case RWTLeftMenuTopItemShows: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">  case RWTLeftMenuTopItemSchedule: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Switch语句使用枚举类型的时候，如果使用了default分支，在将来就无法通过编译器来检查新增的枚举类型了。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><hr><h4 id="1-一个函数的长度必须限制在50行以内"><a href="#1-一个函数的长度必须限制在50行以内" class="headerlink" title="1. 一个函数的长度必须限制在50行以内"></a>1. 一个函数的长度必须限制在50行以内</h4><p>常来说，在阅读一个函数的时候，如果视需要跨过很长的垂直距离会非常影响代码的阅读体验。如果需要来回滚动眼球或代码才能看全一个方法，就会很影响思维的连贯性，对阅读代码的速度造成比较大的影响。最好的情况是在不滚动眼球或代码的情况下一眼就能将该方法的全部代码映入眼帘。</p><h4 id="2-一个函数只做一件事（单一原则）"><a href="#2-一个函数只做一件事（单一原则）" class="headerlink" title="2. 一个函数只做一件事（单一原则）"></a>2. 一个函数只做一件事（单一原则）</h4><p>每个函数的职责都应该划分的很明确（就像类一样）。</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataConfiguration()</span><br><span class="line">viewConfiguration()</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void dataConfiguration()</span><br><span class="line">&#123;   </span><br><span class="line">   ...</span><br><span class="line">   viewConfiguration()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-对于有返回值的函数（方法），每一个分支都必须有返回值"><a href="#3-对于有返回值的函数（方法），每一个分支都必须有返回值" class="headerlink" title="3. 对于有返回值的函数（方法），每一个分支都必须有返回值"></a>3. 对于有返回值的函数（方法），每一个分支都必须有返回值</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int function()</span><br><span class="line">&#123;</span><br><span class="line">    if(condition1)&#123;</span><br><span class="line">        return count1</span><br><span class="line">    &#125;else if(condition2)&#123;</span><br><span class="line">        return count2</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       return defaultCount</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int function()</span><br><span class="line">&#123;</span><br><span class="line">    if(condition1)&#123;</span><br><span class="line">        return count1</span><br><span class="line">    &#125;else if(condition2)&#123;</span><br><span class="line">        return count2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-对输入参数的正确性和有效性进行检查，参数错误立即返回"><a href="#4-对输入参数的正确性和有效性进行检查，参数错误立即返回" class="headerlink" title="4. 对输入参数的正确性和有效性进行检查，参数错误立即返回"></a>4. 对输入参数的正确性和有效性进行检查，参数错误立即返回</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void function(param1,param2)</span><br><span class="line">&#123;</span><br><span class="line">      if(param1 is unavailable)&#123;</span><br><span class="line">           return;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      if(param2 is unavailable)&#123;</span><br><span class="line">           return;</span><br><span class="line">      &#125;</span><br><span class="line">     //Do some right thing</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数"><a href="#5-如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数" class="headerlink" title="5. 如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数"></a>5. 如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数</h4><p>原来的调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void logic() &#123;</span><br><span class="line">  a();</span><br><span class="line">  b()；</span><br><span class="line">  if (logic1 condition) &#123;</span><br><span class="line">    c();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    d();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将a，b函数抽取出来作为单独的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void basicConfig() &#123;</span><br><span class="line">  a();</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">void logic1() &#123;</span><br><span class="line">  basicConfig();</span><br><span class="line">  c();</span><br><span class="line">&#125;</span><br><span class="line">void logic2() &#123;</span><br><span class="line">  basicConfig();</span><br><span class="line">  d();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-将函数内部比较复杂的逻辑提取出来作为单独的函数"><a href="#6-将函数内部比较复杂的逻辑提取出来作为单独的函数" class="headerlink" title="6. 将函数内部比较复杂的逻辑提取出来作为单独的函数"></a>6. 将函数内部比较复杂的逻辑提取出来作为单独的函数</h4><p>一个函数内的不清晰（逻辑判断比较多，行数较多）的那片代码，往往可以被提取出去，构成一个新的函数，然后在原来的地方调用它这样你就可以使用有意义的函数名来代替注释，增加程序的可读性。</p><p>举一个发送邮件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">openEmailSite();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line">writeTitle(title);</span><br><span class="line">writeContent(content);</span><br><span class="line">writeReceiver(receiver);</span><br><span class="line">addAttachment(attachment);</span><br><span class="line"></span><br><span class="line">send();</span><br></pre></td></tr></table></figure><p>中间的部分稍微长一些，我们可以将它们提取出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void writeEmail(title, content,receiver,attachment)</span><br><span class="line">&#123;</span><br><span class="line">  writeTitle(title);</span><br><span class="line">  writeContent(content);</span><br><span class="line">  writeReceiver(receiver);</span><br><span class="line">  addAttachment(attachment); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再看一下原来的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openEmailSite();</span><br><span class="line">login();</span><br><span class="line">writeEmail(title, content,receiver,attachment)</span><br><span class="line">send();</span><br></pre></td></tr></table></figure><h4 id="7-避免使用全局变量，类成员（class-member）来传递信息，尽量使用局部变量和参数。"><a href="#7-避免使用全局变量，类成员（class-member）来传递信息，尽量使用局部变量和参数。" class="headerlink" title="7.避免使用全局变量，类成员（class member）来传递信息，尽量使用局部变量和参数。"></a>7.避免使用全局变量，类成员（class member）来传递信息，尽量使用局部变量和参数。</h4><p>在一个类里面，经常会有传递某些变量的情况。而如果需要传递的变量是某个全局变量或者属性的时候，有些朋友不喜欢将它们作为参数，而是在方法内部就直接访问了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  var x;</span><br><span class="line">  func updateX() &#123;</span><br><span class="line">     ...</span><br><span class="line">     x = ...;</span><br><span class="line">  &#125;</span><br><span class="line">  func printX() &#123;</span><br><span class="line">    updateX();</span><br><span class="line">    print(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在printX方法里面，updateX和print方法之间并没有值的传递，乍一看我们可能不知道x从哪里来的，导致程序的可读性降低了。</p><p>而如果你使用局部变量而不是类成员来传递信息，那么这两个函数就不需要依赖于某一个类，而且更加容易理解，不易出错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func updateX() -&gt; String&#123;</span><br><span class="line">    x = ...;</span><br><span class="line">    return x;</span><br><span class="line"> &#125;</span><br><span class="line"> func printX() &#123;</span><br><span class="line">   String x = updateX();</span><br><span class="line">   print(x);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><hr><p>优秀的代码大部分是可以自描述的，我们完全可以用程代码本身来表达它到底在干什么，而不需要注释的辅助。</p><p>但并不是说一定不能写注释，有以下三种情况比较适合写注释：</p><p>公共接口（注释要告诉阅读代码的人，当前类能实现什么功能）。<br>涉及到比较深层专业知识的代码（注释要体现出实现原理和思想）。<br>容易产生歧义的代码（但是严格来说，容易让人产生歧义的代码是不允许存在的）。<br>除了上述这三种情况，如果别人只能依靠注释才能读懂你的代码的时候，就要反思代码出现了什么问题。</p><p>最后，对于注释的内容，相对于“做了什么”，更应该说明“为什么这么做”。</p><h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><hr><p>换行、注释、方法长度、代码重复等这些是通过机器检查出来的问题，是无需通过人来做的。</p><p>而且除了审查需求的实现的程度，bug是否无处藏身以外，更应该关注代码的设计。比如类与类之间的耦合程度，设计的可扩展性，复用性，是否可以将某些方法抽出来作为接口等等。</p><h2 id="三-iOS规范"><a href="#三-iOS规范" class="headerlink" title="三. iOS规范"></a>三. iOS规范</h2><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><hr><h4 id="1-变量名必须使用驼峰格式"><a href="#1-变量名必须使用驼峰格式" class="headerlink" title="1. 变量名必须使用驼峰格式"></a>1. 变量名必须使用驼峰格式</h4><p>类，协议使用大驼峰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HomePageViewController.h</span><br><span class="line">&lt;HeaderViewDelegate&gt;</span><br></pre></td></tr></table></figure><p>对象等局部变量使用小驼峰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *personName = @&quot;&quot;;</span><br><span class="line">NSUInteger totalCount = 0;</span><br></pre></td></tr></table></figure><h4 id="2-变量的名称必须同时包含功能与类型"><a href="#2-变量的名称必须同时包含功能与类型" class="headerlink" title="2. 变量的名称必须同时包含功能与类型"></a>2. 变量的名称必须同时包含功能与类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UIButton *addBtn //添加按钮</span><br><span class="line">UILabel *nameLbl //名字标签</span><br><span class="line">NSString *addressStr//地址字符串</span><br></pre></td></tr></table></figure><h4 id="3-系统常用类作实例变量声明时加入后缀"><a href="#3-系统常用类作实例变量声明时加入后缀" class="headerlink" title="3. 系统常用类作实例变量声明时加入后缀"></a>3. 系统常用类作实例变量声明时加入后缀</h4><table><thead><tr><th>类型</th><th>后缀</th></tr></thead><tbody><tr><td>UIViewController</td><td>VC</td></tr><tr><td>UIView</td><td>View</td></tr><tr><td>UILabel</td><td>Lbl</td></tr><tr><td>UIButton</td><td>Btn</td></tr><tr><td>UIImage</td><td>Img</td></tr><tr><td>UIImageView</td><td>ImagView</td></tr><tr><td>NSArray</td><td>Array</td></tr><tr><td>NSMutableArray</td><td>Marray</td></tr><tr><td>NSDictionary</td><td>Dict</td></tr><tr><td>NSMutableDictionary</td><td>MDdict</td></tr><tr><td>NSString</td><td>Str</td></tr><tr><td>NSMutableString</td><td>MStr</td></tr><tr><td>NSSet</td><td>Set</td></tr><tr><td>NSMutableSet</td><td>Mset</td></tr></tbody></table><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><hr><h4 id="1-常量以相关类名作为前缀"><a href="#1-常量以相关类名作为前缀" class="headerlink" title="1. 常量以相关类名作为前缀"></a>1. 常量以相关类名作为前缀</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval ZOCSignInViewControllerFadeOutAnimationDuration = 0.4;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval fadeOutTime = 0.4;</span><br></pre></td></tr></table></figure><h4 id="2-建议使用类型常量，不建议使用-define预处理命令"><a href="#2-建议使用类型常量，不建议使用-define预处理命令" class="headerlink" title="2. 建议使用类型常量，不建议使用#define预处理命令"></a>2. 建议使用类型常量，不建议使用#define预处理命令</h4><p>首先比较一下这两种声明常量的区别：</p><ul><li>预处理命令：简单的文本替换，不包括类型信息，并且可被任意修改。</li><li>类型常量：包括类型信息，并且可以设置其使用范围，而且不可被修改。</li></ul><p>使用预处理虽然能达到替换文本的目的，但是本身还是有局限性的：</p><ul><li>不具备类型信息。</li><li>可以被任意修改。</li></ul><h4 id="3-对外公开某个常量："><a href="#3-对外公开某个常量：" class="headerlink" title="3. 对外公开某个常量："></a>3. 对外公开某个常量：</h4><p>如果我们需要发送通知，那么就需要在不同的地方拿到通知的“频道”字符串（通知的名称），那么显然这个字符串是不能被轻易更改，而且可以在不同的地方获取。这个时候就需要定义一个外界可见的字符串常量。</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//头文件</span><br><span class="line">extern NSString *const ZOCCacheControllerDidClearCacheNotification;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//实现文件</span><br><span class="line">static NSString * const ZOCCacheControllerDidClearCacheNotification = @&quot;ZOCCacheControllerDidClearCacheNotification&quot;;</span><br><span class="line">static const CGFloat ZOCImageThumbnailHeight = 50.0f;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define CompanyName @&quot;Apple Inc.&quot; </span><br><span class="line">#define magicNumber 42</span><br></pre></td></tr></table></figure><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><hr><h4 id="1-宏、常量名都要使用大写字母，用下划线‘-’分割单词。"><a href="#1-宏、常量名都要使用大写字母，用下划线‘-’分割单词。" class="headerlink" title="1. 宏、常量名都要使用大写字母，用下划线‘_’分割单词。"></a>1. 宏、常量名都要使用大写字母，用下划线‘_’分割单词。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define URL_GAIN_QUOTE_LIST @&quot;/v1/quote/list&quot;</span><br><span class="line">#define URL_UPDATE_QUOTE_LIST @&quot;/v1/quote/update&quot;</span><br><span class="line">#define URL_LOGIN  @&quot;/v1/user/login”</span><br></pre></td></tr></table></figure><h4 id="2-宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。"><a href="#2-宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。" class="headerlink" title="2. 宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。"></a>2. 宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define MY_MIN(A, B)  ((A)&gt;(B)?(B):(A))</span><br></pre></td></tr></table></figure><h3 id="CGRect函数"><a href="#CGRect函数" class="headerlink" title="CGRect函数"></a>CGRect函数</h3><hr><p>其实iOS内部已经提供了相应的获取CGRect各个部分的函数了，它们的可读性比较高，而且简短，推荐使用：</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame; </span><br><span class="line">CGFloat x = CGRectGetMinX(frame); </span><br><span class="line">CGFloat y = CGRectGetMinY(frame); </span><br><span class="line">CGFloat width = CGRectGetWidth(frame); </span><br><span class="line">CGFloat height = CGRectGetHeight(frame); </span><br><span class="line">CGRect frame = CGRectMake(0.0, 0.0, width, height);</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;  </span><br><span class="line">CGFloat x = frame.origin.x;  </span><br><span class="line">CGFloat y = frame.origin.y;  </span><br><span class="line">CGFloat width = frame.size.width;  </span><br><span class="line">CGFloat height = frame.size.height;  </span><br><span class="line">CGRect frame = (CGRect)&#123; .origin = CGPointZero, .size = frame.size &#125;;</span><br></pre></td></tr></table></figure><h3 id="范型"><a href="#范型" class="headerlink" title="范型"></a>范型</h3><hr><p>建议在定义NSArray和NSDictionary时使用泛型，可以保证程序的安全性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray&lt;NSString *&gt; *testArr = [NSArray arrayWithObjects:@&quot;Hello&quot;, @&quot;world&quot;, nil];</span><br><span class="line">NSDictionary&lt;NSString *, NSNumber *&gt; *dic = @&#123;@&quot;key&quot;:@(1), @&quot;age&quot;:@(10)&#125;;</span><br></pre></td></tr></table></figure><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><p>为常用的Block类型创建typedef</p><p>如果我们需要重复创建某种block（相同参数，返回值）的变量，我们就可以通过typedef来给某一种块定义属于它自己的新类型</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int (^variableName)(BOOL flag, int value) =^(BOOL flag, int value)&#123;</span><br><span class="line">     // Implementation</span><br><span class="line">     return someInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个Block有一个bool参数和一个int参数，并返回int类型。我们可以给它定义类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int(^EOCSomeBlock)(BOOL flag, int value);</span><br><span class="line">//再次定义的时候，就可以通过简单的赋值来实现：</span><br><span class="line">EOCSomeBlock block = ^(BOOL flag, int value)&#123;</span><br><span class="line">// Implementation</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义作为参数的Block：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(void)startWithCompletionHandler: (void(^)(NSData data, NSError error))completion;</span><br></pre></td></tr></table></figure><p>这里的Block有一个NSData参数，一个NSError参数并没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef void(^EOCCompletionHandler)(NSData data, NSError error);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(void)startWithCompletionHandler:(EOCCompletionHandler)completion;”</span><br></pre></td></tr></table></figure><p>通过typedef定义Block签名的好处是:如果要某种块增加参数，那么只修改定义签名的那行代码即可。</p><h3 id="字面量语法"><a href="#字面量语法" class="headerlink" title="字面量语法"></a>字面量语法</h3><hr><p>尽量使用字面量值来创建 NSString , NSDictionary , NSArray , NSNumber 这些不可变对象：</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;];</span><br><span class="line">NSDictionary *productManagers = @&#123;@&quot;iPhone&quot; : @&quot;Kate&quot;, @&quot;iPad&quot; : @&quot;Kamal&quot;, @&quot;Mobile Web&quot; : @&quot;Bill&quot;&#125;; </span><br><span class="line">NSNumber *shouldUseLiterals = @YES;NSNumber *buildingZIPCode = @10018;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];</span><br><span class="line">NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot; ];</span><br><span class="line">NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018];</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><hr><h4 id="1-属性的命名使用小驼峰"><a href="#1-属性的命名使用小驼峰" class="headerlink" title="1. 属性的命名使用小驼峰"></a>1. 属性的命名使用小驼峰</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, readwrite, strong) UIButton *confirmButton;</span><br></pre></td></tr></table></figure><h4 id="2-属性的关键字推荐按照-原子性，读写，内存管理的顺序排列"><a href="#2-属性的关键字推荐按照-原子性，读写，内存管理的顺序排列" class="headerlink" title="2. 属性的关键字推荐按照 原子性，读写，内存管理的顺序排列"></a>2. 属性的关键字推荐按照 原子性，读写，内存管理的顺序排列</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, readwrite, copy) NSString *name;</span><br><span class="line">@property (nonatomic, readonly, copy) NSString *gender;</span><br><span class="line">@property (nonatomic, readwrite, strong) UIView *headerView;</span><br></pre></td></tr></table></figure><ol><li>Block属性应该使用copy关键字</li></ol><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef void (^ErrorCodeBlock) (id errorCode,NSString *message);</span><br><span class="line">@property (nonatomic, readwrite, copy) ErrorCodeBlock errorBlock;//将block拷贝到堆中</span><br></pre></td></tr></table></figure><h4 id="4-形容词性的BOOL属性的getter应该加上is前缀"><a href="#4-形容词性的BOOL属性的getter应该加上is前缀" class="headerlink" title="4. 形容词性的BOOL属性的getter应该加上is前缀"></a>4. 形容词性的BOOL属性的getter应该加上is前缀</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (assign, getter=isEditable) BOOL editable;</span><br></pre></td></tr></table></figure><h4 id="5-使用getter方法做懒加载"><a href="#5-使用getter方法做懒加载" class="headerlink" title="5. 使用getter方法做懒加载"></a>5. 使用getter方法做懒加载</h4><p>实例化一个对象是需要耗费资源的，如果这个对象里的某个属性的实例化要调用很多配置和计算，就需要懒加载它，在使用它的前一刻对它进行实例化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (NSDateFormatter *)dateFormatter &#123;</span><br><span class="line">    if (!_dateFormatter) &#123;</span><br><span class="line">           _dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class="line">           NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US_POSIX&quot;];</span><br><span class="line">           [_dateFormatter setLocale:enUSPOSIXLocale];</span><br><span class="line">           [_dateFormatter setDateFormat:@&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;];</span><br><span class="line">    &#125; </span><br><span class="line">    return _dateFormatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是也有对这种做法的争议：getter方法可能会产生某些副作用，例如如果它修改了全局变量，可能会产生难以排查的错误。</p><h4 id="6-除了init和dealloc方法，建议都使用点语法访问属性"><a href="#6-除了init和dealloc方法，建议都使用点语法访问属性" class="headerlink" title="6. 除了init和dealloc方法，建议都使用点语法访问属性"></a>6. 除了init和dealloc方法，建议都使用点语法访问属性</h4><p>使用点语法的好处：<br><strong>setter：</strong></p><ol><li>setter会遵守内存管理语义(strong, copy, weak)。</li><li>通过在内部设置断点，有助于调试bug。</li><li>可以过滤一些外部传入的值。</li><li><p>捕捉KVO通知。<br>getter：</p></li><li><p>允许子类化。</p></li><li>通过在内部设置断点，有助于调试bug。</li><li>实现懒加载（lazy initialization）。</li></ol><blockquote><p>注意：</p><ol><li>懒加载的属性，必须通过点语法来读取数据。因为懒加载是通过重写getter方法来初始化实例变量的，如果不通过属性来读取该实例变量，那么这个实例变量就永远不会被初始化。</li><li>在init和dealloc方法里面使用点语法的后果是：因为没有绕过setter和getter，在setter和getter里面可能会有很多其他的操作。而且如果它的子类重载了它的setter和getter方法，那么就可能导致该子类调用其他的方法。</li></ol></blockquote><h4 id="7-不要滥用点语法，要区分好方法调用和属性访问"><a href="#7-不要滥用点语法，要区分好方法调用和属性访问" class="headerlink" title="7. 不要滥用点语法，要区分好方法调用和属性访问"></a>7. 不要滥用点语法，要区分好方法调用和属性访问</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view.backgroundColor = [UIColor orangeColor]; </span><br><span class="line">[UIApplication sharedApplication].delegate;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[view setBackgroundColor:[UIColor orangeColor]]; </span><br><span class="line">UIApplication.sharedApplication.delegate;</span><br></pre></td></tr></table></figure><h4 id="8-尽量使用不可变对象"><a href="#8-尽量使用不可变对象" class="headerlink" title="8. 尽量使用不可变对象"></a>8. 尽量使用不可变对象</h4><p>建议尽量把对外公布出来的属性设置为只读，在实现文件内部设为读写。具体做法是：</p><ul><li>在头文件中，设置对象属性为<ul><li>在实现文件中设置为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    这样一来，在外部就只能读取该数据，而不能修改它，使得这个类的实例所持有的数据更加安全。而且，对于集合类的对象，更应该仔细考虑是否可以将其设为可变的。</span><br><span class="line">    如果在公开部分只能设置其为只读属性，那么就在非公开部分存储一个可变型。所以当在外部获取这个属性时，获取的只是内部可变型的一个不可变版本,</span><br><span class="line">    </span><br><span class="line">例如：</span><br><span class="line">    </span><br><span class="line">在公共API中：</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>@interface EOCPerson : NSObject</p><p>@property (nonatomic, copy, readonly) NSString firstName;<br>@property (nonatomic, copy, readonly) NSString lastName;<br>@property (nonatomic, strong, readonly) NSSet *friends //向外公开的不可变集合</p><p>(id)initWithFirstName:(NSString)firstName andLastName:(NSString)lastName;<br>(void)addFriend:(EOCPerson<em>)person;<br>(void)removeFriend:(EOCPerson</em>)person;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;在这里，我们将friends属性设置为不可变的set。然后，提供了来增加和删除这个set里的元素的公共接口。</span><br><span class="line"></span><br><span class="line">在实现文件里：</span><br></pre></td></tr></table></figure></p><p>@interface EOCPerson ()</p><p>@property (nonatomic, copy, readwrite) NSString firstName;<br>@property (nonatomic, copy, readwrite) NSString lastName;</p><p>@end</p><p>@implementation EOCPerson {<br>NSMutableSet *_internalFriends; //实现文件里的可变集合<br>}</p><ul><li>(NSSet*)friends {<br>  return [_internalFriends copy]; //get方法返回的永远是可变set的不可变型<br>}<br>```</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-a9d78ce3d5e7114f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages + Hexo搭建博客</title>
    <link href="http://yoursite.com/2018/03/15/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/03/15/GitHub-Pages-Hexo搭建博客/</id>
    <published>2018-03-15T02:40:00.000Z</published>
    <updated>2018-03-16T01:17:28.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Pages-Hexo搭建博客"><a href="#GitHub-Pages-Hexo搭建博客" class="headerlink" title="GitHub Pages + Hexo搭建博客"></a>GitHub Pages + Hexo搭建博客</h1><h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>这是一篇是单纯地利用GitHub Pages搭建自己独立博客的过程，并没有额外使用独立域名之类的。</p><p>如果是小小白，可以先花时间去了解下：</p><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git</a></li><li><a href="https://github.com" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://pages.github.com" target="_blank" rel="noopener">GitHub Pages</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://www.appinn.com/markdown/#autoescape" target="_blank" rel="noopener">Markdown</a></li></ul><h2 id="二、-必要配置"><a href="#二、-必要配置" class="headerlink" title="二、 必要配置"></a>二、 必要配置</h2><h3 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h3><h4 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h4><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。</p><p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。</p><p>简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li></ol><h4 id="2-1-2-相关资料"><a href="#2-1-2-相关资料" class="headerlink" title="2.1.2 相关资料"></a>2.1.2 相关资料</h4><ul><li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="noopener">GitHub Pages Basics / User, Organization, and Project Pages</a></li></ul><h3 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h3><h4 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h4><p>在windows下安装git比较常用的有两种方式：</p><ol><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git 官方版本的安装</a></li><li><a href="https://desktop.github.com" target="_blank" rel="noopener">GitHub for Windows</a></li></ol><h4 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h4><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;</span><br><span class="line">$ git config --global user.email &quot;username@example.com&quot;</span><br></pre></td></tr></table></figure><p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p><ol><li>在GitHub右上方点击你的头像，选择”Settings”；</li><li>在右边的”Personal settings”侧边栏选择”Emails”；</li><li>选择”Keep my email address private”。</li></ol><p>这样，你就可以使用如下格式的email进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email &quot;username@users.noreply.github.com&quot;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h4><ul><li><a href="https://git-scm.com/book/zh/v2/起步-安装-Git" target="_blank" rel="noopener">安装 Git</a></li><li><a href="https://git-scm.com/book/zh/v2/起步-初次运行-Git-前的配置" target="_blank" rel="noopener">配置 Git</a></li><li><a href="https://help.github.com/articles/setting-your-commit-email-address-in-git/" target="_blank" rel="noopener">Setting your email in Git</a></li><li><a href="https://help.github.com/articles/setting-your-commit-email-address-on-github/" target="_blank" rel="noopener">Keeping your email address private</a></li></ul><h3 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h3><h4 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h4><p>这里，我们要区分清楚git与github。</p><p>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p><h4 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h4><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p><h5 id="2-3-2-1-检查电脑是否已经有SSH-KEYS。"><a href="#2-3-2-1-检查电脑是否已经有SSH-KEYS。" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH KEYS。"></a>2.3.2.1 检查电脑是否已经有SSH KEYS。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br><span class="line"># Lists the files in your .ssh directory, if they exist</span><br></pre></td></tr></table></figure><p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p><h5 id="2-3-2-2-如果没有SSH-KEY，则生成新的SSH-KEY。"><a href="#2-3-2-2-如果没有SSH-KEY，则生成新的SSH-KEY。" class="headerlink" title="2.3.2.2 如果没有SSH KEY，则生成新的SSH KEY。"></a>2.3.2.2 如果没有SSH KEY，则生成新的SSH KEY。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br><span class="line"># Creates a new ssh key, using the provided email as a label</span><br></pre></td></tr></table></figure><p>之后一路回车即可。</p><h5 id="2-3-2-3-向SSH-AGENT添加KEY。"><a href="#2-3-2-3-向SSH-AGENT添加KEY。" class="headerlink" title="2.3.2.3 向SSH-AGENT添加KEY。"></a>2.3.2.3 向SSH-AGENT添加KEY。</h5><p>首先确保ssh-agent可运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">$ ssh-agent -s</span><br></pre></td></tr></table></figure><p>然后添加SSH key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h5 id="2-3-2-4-在GITHUB添加SSH-KEY。"><a href="#2-3-2-4-在GITHUB添加SSH-KEY。" class="headerlink" title="2.3.2.4 在GITHUB添加SSH KEY。"></a>2.3.2.4 在GITHUB添加SSH KEY。</h5><p>首先，拷贝key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"># Copies the contents of the id_rsa.pub file to your cllipboard</span><br></pre></td></tr></table></figure><p>然后，在GitHub右上方点击头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。接着粘贴key，点击”Add key”按钮。最后，测试链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"># Attempts to ssh to GitHub</span><br></pre></td></tr></table></figure><p>如果你看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>就键入：yes。之后将会看到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><h4 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h4><ul><li><a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Generating SSH keys</a></li></ul><h3 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h3><h4 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h4><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com" target="_blank" rel="noopener">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h4><p>安装完后，在你喜欢的文件夹内（例如D：\Hexo），点击鼠标右键选择Git bash，输入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p><h4 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h4><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官方文档</a></li></ul><h3 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h3><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p><h4 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h4><p>我们继续使用上面的文件夹D:\Hexo（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p><p>默认生成的_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure><p>修改后的_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</span><br><span class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</span><br></pre></td></tr></table></figure><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后，执行下列指令即可完成部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p><h4 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h4><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p><p>下面是next主题的个性化配置教程:</p><ul><li><a href="http://shenzekun.cn/hexo的next主题个性化配置教程.html" target="_blank" rel="noopener">next个性化配置教程</a></li></ul><h3 id="四、-优化部署与管理"><a href="#四、-优化部署与管理" class="headerlink" title="四、 优化部署与管理"></a>四、 优化部署与管理</h3><h4 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h4><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p><p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦(╬▔皿▔)凸）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p><p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ)…）。</p><p>所以，我利用了分支！！！</p><p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p><p>下面以我的博客作为例子详细地讲述。</p><h4 id="4-2-我的博客搭建流程"><a href="#4-2-我的博客搭建流程" class="headerlink" title="4.2 我的博客搭建流程"></a>4.2 我的博客搭建流程</h4><ol><li>创建仓库，liuxc123.github.io；</li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone git@github.com:liuxc123/liuxc123.github.io.git拷贝仓库；</li><li>修改_config.yml中的deploy参数，分支应为master；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo generate -d生成网站并部署到GitHub上。</li><li>这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</li></ol><h4 id="4-3-我的博客管理流程"><a href="#4-3-我的博客管理流程" class="headerlink" title="4.3 我的博客管理流程"></a>4.3 我的博客管理流程</h4><h5 id="4-3-1-日常修改"><a href="#4-3-1-日常修改" class="headerlink" title="4.3.1 日常修改"></a>4.3.1 日常修改</h5><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p><ol><li>依次执行<code>git add .</code>、<code>git commit -m “…”</code>、<code>git push origin hexo</code>指令将改动推送到GitHub（此时当前分支应为hexo）；</li><li>然后才执行<code>hexo generate -d</code>发布网站到master分支上。</li></ol><p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p><h5 id="4-3-2-本地资料丢失"><a href="#4-3-2-本地资料丢失" class="headerlink" title="4.3.2 本地资料丢失"></a>4.3.2 本地资料丢失</h5><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li>使用<code>git clone git@github.com:liuxc123/liuxc123.github.io.git</code>拷贝仓库（默认分支为hexo）；</li><li>在本地新拷贝的liuxc123.github.io文件夹下通过Git bash依次执行下列指令：<code>npm install hexo</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>（记得，不需要<code>hexo init</code>这条指令）。</li></ol><p>###五、结尾<br>ok,现在你就可以轻松的搭建自己的博客了。(ˉ▽ˉ)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub-Pages-Hexo搭建博客&quot;&gt;&lt;a href=&quot;#GitHub-Pages-Hexo搭建博客&quot; class=&quot;headerlink&quot; title=&quot;GitHub Pages + Hexo搭建博客&quot;&gt;&lt;/a&gt;GitHub Pages + Hexo搭建
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
