<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuxc的博客</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-26T03:35:49.025Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liuxc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SDWebImage源码解析</title>
    <link href="http://yoursite.com/2018/03/26/iOS/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/03/26/iOS/源码分析/SDWebImage源码解析/</id>
    <published>2018-03-26T01:59:19.000Z</published>
    <updated>2018-03-26T03:35:49.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信广大的iOS开发者，对于<a href="https://github.com/rs/SDWebImage" target="_blank" rel="noopener">SDWebImage</a>都不会陌生，这个框架通过给UIButton和UIImageView添加分类，实现了一个异步下载图片并支持缓存的功能。整个框架的接口非常简洁，每个类的分工都很明确，是很值得大家学习的一个框架。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在使用这个框架的时候，只需要提供一个下载的url和占位图就可以在回调里拿到下载后的图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[imageview sd_setImageWithURL:[NSURL URLWithString:@&quot;pic.jpg&quot;] placeholderImage:[UIImage imageNamed:@&quot;placeholder&quot;] completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) &#123;</span><br><span class="line">        </span><br><span class="line">        imageview.image = image;</span><br><span class="line">        NSLog(@&quot;图片加载完成&quot;);</span><br><span class="line">        </span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>而且我们还可以不设置占位图片，也可以不使用回调的block，非常灵活：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//图片下载完成后直接显示下载后的图片</span><br><span class="line">[imageview sd_setImageWithURL:[NSURL URLWithString:@&quot;pic.jpg&quot;]];</span><br></pre></td></tr></table></figure><p>在最开始先简单介绍这个框架：</p><p>这个框架的核心类是<code>SDWebImageManger</code>，在外部有<code>UIImageView+WebCache</code>和<code>UIButton+WebCache</code>为下载图片的操作提供接口。内部有<code>SDWebImageManager</code>负责处理和协调<code>SDWebImageDownloader</code>和<code>SDWebImageCache</code>。其中<code>SDWebImageDownloader</code>负责具体的下载任务，<code>SDWebImageCache</code>负责关于缓存的工作：添加，删除，查询缓存。</p><p>首先我们大致看一下这个框架的调用流程图：</p><p><img src="http://upload-images.jianshu.io/upload_images/859001-7ad6493a2b2f0b43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从这个流程图里可以大致看出，该框架分为两个层：UIKit层（负责接收下载参数）和工具层（负责下载操作和缓存）。</p><p>OK～基本流程大概清楚了，我们看一下每个层具体实现吧～</p><hr><h2 id="UIKit层"><a href="#UIKit层" class="headerlink" title="UIKit层"></a>UIKit层</h2><p>该框架最外层的类是<code>UIImageView +WebCache</code>，我们将图片的URL，占位图片直接给这个类。下面是这个类的公共接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  UIImageView + WebCache.h ============== //</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url;</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url</span><br><span class="line">          placeholderImage:(nullable UIImage *)placeholder;</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url</span><br><span class="line">          placeholderImage:(nullable UIImage *)placeholder</span><br><span class="line">                   options:(SDWebImageOptions)options;</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url</span><br><span class="line">                 completed:(nullable SDExternalCompletionBlock)completedBlock;</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url</span><br><span class="line">          placeholderImage:(nullable UIImage *)placeholder</span><br><span class="line">                 completed:(nullable SDExternalCompletionBlock)completedBlock;</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url</span><br><span class="line">          placeholderImage:(nullable UIImage *)placeholder</span><br><span class="line">                   options:(SDWebImageOptions)options</span><br><span class="line">                 completed:(nullable SDExternalCompletionBlock)completedBlock;</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url</span><br><span class="line">          placeholderImage:(nullable UIImage *)placeholder</span><br><span class="line">                   options:(SDWebImageOptions)options</span><br><span class="line">                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                 completed:(nullable SDExternalCompletionBlock)completedBlock;</span><br></pre></td></tr></table></figure><p>可以看出，这个类提供的接口非常灵活，可以根据我们自己的需求来调用其中某一个方法，而这些方法到最后都会走到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// ==============  UIView+ WebCache.m ============== //</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url</span><br><span class="line">          placeholderImage:(nullable UIImage *)placeholder</span><br><span class="line">                   options:(SDWebImageOptions)options</span><br><span class="line">                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                 completed:(nullable SDExternalCompletionBlock)completedBlock;</span><br></pre></td></tr></table></figure><blockquote><p>为什么不是UIImageView+WebCache而要上一层到UIView的分类里呢？<br>因为SDWebImage框架也支持UIButton的下载图片等方法，所以需要在它们的父类：UIView里面统一一个下载方法。</p></blockquote><p>简单看一下这个方法的实现（省略的代码用…代替）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">// ==============  UIView+ WebCache.m ============== //</span><br><span class="line">   //valid key：UIImageView || UIButton</span><br><span class="line">   NSString *validOperationKey = operationKey ?: NSStringFromClass([self class]);</span><br><span class="line">   //UIView+WebCacheOperation 的 operationDictionary</span><br><span class="line">   //下面这行代码是保证没有当前正在进行的异步下载操作, 使它不会与即将进行的操作发生冲突</span><br><span class="line">   [self sd_cancelImageLoadOperationWithKey:validOperationKey];</span><br><span class="line">   </span><br><span class="line">   //添加临时的占位图（在不延迟添加占位图的option下）</span><br><span class="line">   if (!(options &amp; SDWebImageDelayPlaceholder)) &#123;</span><br><span class="line">       dispatch_main_async_safe(^&#123;</span><br><span class="line">           [self sd_setImage:placeholder imageData:nil basedOnClassOrViaCustomSetImageBlock:setImageBlock];</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;    </span><br><span class="line">   //如果url存在</span><br><span class="line">   if (url) &#123;     </span><br><span class="line">      ...</span><br><span class="line">       __weak __typeof(self)wself = self;</span><br><span class="line">      //SDWebImageManager下载图片</span><br><span class="line">       id &lt;SDWebImageOperation&gt; operation = [SDWebImageManager.sharedManager loadImageWithURL:url options:options progress:progressBlock completed:^(UIImage *image, NSData *data, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) &#123;</span><br><span class="line">         </span><br><span class="line">           ...</span><br><span class="line">           //dispatch_main_sync_safe : 保证block能在主线程进行</span><br><span class="line">           dispatch_main_async_safe(^&#123;</span><br><span class="line">               </span><br><span class="line">               if (!sself) &#123;</span><br><span class="line">                   return;</span><br><span class="line">               &#125;               </span><br><span class="line">               if (image &amp;&amp; (options &amp; SDWebImageAvoidAutoSetImage) &amp;&amp; completedBlock) &#123;</span><br><span class="line">                    //image，而且不自动替换 placeholder image</span><br><span class="line">                   completedBlock(image, error, cacheType, url);</span><br><span class="line">                   return;                    </span><br><span class="line">               &#125; else if (image) &#123;</span><br><span class="line">                   //存在image，需要马上替换 placeholder image</span><br><span class="line">                   [sself sd_setImage:image imageData:data basedOnClassOrViaCustomSetImageBlock:setImageBlock];</span><br><span class="line">                   [sself sd_setNeedsLayout];                </span><br><span class="line">               &#125; else &#123;                    </span><br><span class="line">                   //没有image，在图片下载完之后显示 placeholder image</span><br><span class="line">                   if ((options &amp; SDWebImageDelayPlaceholder)) &#123;</span><br><span class="line">                       [sself sd_setImage:placeholder imageData:nil basedOnClassOrViaCustomSetImageBlock:setImageBlock];</span><br><span class="line">                       [sself sd_setNeedsLayout];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;                </span><br><span class="line">               if (completedBlock &amp;&amp; finished) &#123;</span><br><span class="line">                   completedBlock(image, error, cacheType, url);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;];</span><br><span class="line">       </span><br><span class="line">       //在操作缓存字典（operationDictionary）里添加operation，表示当前的操作正在进行</span><br><span class="line">       [self sd_setImageLoadOperation:operation forKey:validOperationKey];        </span><br><span class="line">   &#125; else &#123;</span><br><span class="line">       //如果url不存在，就在completedBlock里传入error（url为空）</span><br><span class="line">       dispatch_main_async_safe(^&#123;</span><br><span class="line">           [self sd_removeActivityIndicator];</span><br><span class="line">           if (completedBlock) &#123;</span><br><span class="line">               NSError *error = [NSError errorWithDomain:SDWebImageErrorDomain code:-1 userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Trying to load a nil url&quot;&#125;];</span><br><span class="line">               completedBlock(nil, error, SDImageCacheTypeNone, url);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>值得一提的是，在这一层，使用一个字典<code>operationDictionary</code>专门用作存储操作的缓存，随时添加，删除操作任务。<br>而这个字典是<code>UIView+WebCacheOperation</code>分类的关联对象，它的存取方法使用运行时来操作：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  UIView+WebCacheOperation.m ============== //</span><br><span class="line"> //获取关联对象：operations（用来存放操作的字典）</span><br><span class="line">- (SDOperationsDictionary *)operationDictionary &#123;</span><br><span class="line">    SDOperationsDictionary *operations = objc_getAssociatedObject(self, &amp;loadOperationKey);</span><br><span class="line">    //存放操作的字典</span><br><span class="line">    if (operations) &#123;</span><br><span class="line">        return operations;</span><br><span class="line">    &#125;    </span><br><span class="line">    //如果没有，就新建一个</span><br><span class="line">    operations = [NSMutableDictionary dictionary];    </span><br><span class="line">    objc_setAssociatedObject(self, &amp;loadOperationKey, operations, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    return operations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不直接在<code>UIImageView+WebCache</code>里直接关联这个对象呢？我觉得这里作者应该是遵从面向对象的<strong>单一职责原则（SRP：Single responsibility principle）</strong>，就连类都要履行这个职责，何况分类呢？这里作者专门创造一个分类<code>UIView+WebCacheOperation</code>来管理操作缓存（字典）。</p><p>到这里，UIKit层上面的东西都讲完了，现在开始正式讲解工具层。</p><p>上文提到过，<code>SDWebImageManager</code>同时管理<code>SDImageCache</code>和<code>SDWebImageDownloader</code>两个类，它是这一层的老大哥。在下载任务开始的时候，<code>SDWebImageManager</code>首先访问<code>SDImageCache</code>来查询是否存在缓存，如果有缓存，直接返回缓存的图片。如果没有缓存，就命令<code>SDWebImageDownloader</code>来下载图片，下载成功后，存入缓存，显示图片。以上是<code>SDWebImageManager</code>大致的工作流程。</p><p>在详细讲解<code>SDWebImageManager</code>是如何下载图片之前，我们先看一下这个类的几个重要的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  SDWebImageManager.h ============== //</span><br><span class="line">@property (strong, nonatomic, readwrite, nonnull) SDImageCache *imageCache;//管理缓存</span><br><span class="line">@property (strong, nonatomic, readwrite, nonnull) SDWebImageDownloader //下载器*imageDownloader;</span><br><span class="line">@property (strong, nonatomic, nonnull) NSMutableSet&lt;NSURL *&gt; *failedURLs;//记录失效url的名单</span><br><span class="line">@property (strong, nonatomic, nonnull) NSMutableArray&lt;SDWebImageCombinedOperation *&gt; *runningOperations;//记录当前正在执行的操作</span><br></pre></td></tr></table></figure><p><code>SDWebImageManager</code>下载图片的方法只有一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SDWebImageManager.sharedManager loadImageWithURL:options:progress:completed:]</span><br></pre></td></tr></table></figure><p>看一下这个方法的具体实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  SDWebImageManager.m ============== //</span><br><span class="line">- (id &lt;SDWebImageOperation&gt;)loadImageWithURL:(nullable NSURL *)url</span><br><span class="line">                                     options:(SDWebImageOptions)options</span><br><span class="line">                                    progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                   completed:(nullable SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">     ...                             </span><br><span class="line">    //在SDImageCache里查询是否存在缓存的图片</span><br><span class="line">    operation.cacheOperation = [self.imageCache queryCacheOperationForKey:key done:^(UIImage *cachedImage, NSData *cachedData, SDImageCacheType cacheType) &#123;        </span><br><span class="line">        ...</span><br><span class="line">        //（没有缓存图片） || （即使有缓存图片，也需要更新缓存图片） || （代理没有响应imageManager:shouldDownloadImageForURL:消息，默认返回yes，需要下载图片）|| （imageManager:shouldDownloadImageForURL:返回yes，需要下载图片）</span><br><span class="line">        if ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![self.delegate respondsToSelector:@selector(imageManager:shouldDownloadImageForURL:)] || [self.delegate imageManager:self shouldDownloadImageForURL:url])) &#123;            </span><br><span class="line">            //1. 存在缓存图片 &amp;&amp; 即使有缓存图片也要下载更新图片</span><br><span class="line">            if (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</span><br><span class="line">                [self callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];</span><br><span class="line">            &#125;</span><br><span class="line">            // 2. 如果不存在缓存图片</span><br><span class="line">            ...            </span><br><span class="line">            //开启下载器下载</span><br><span class="line">            //subOperationToken 用来标记当前的下载任务，便于被取消</span><br><span class="line">            SDWebImageDownloadToken *subOperationToken = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished) &#123;</span><br><span class="line">                __strong __typeof(weakOperation) strongOperation = weakOperation;</span><br><span class="line">                if (!strongOperation || strongOperation.isCancelled) &#123;</span><br><span class="line">                    // 1. 如果任务被取消，则什么都不做，避免和其他的completedBlock重复</span><br><span class="line">                </span><br><span class="line">                &#125; else if (error) &#123;</span><br><span class="line">                    </span><br><span class="line">                    //2. 如果有错误</span><br><span class="line">                    //2.1 在completedBlock里传入error</span><br><span class="line">                    [self callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];</span><br><span class="line">//2.2 在错误url名单中添加当前的url</span><br><span class="line">                    if (   error.code != NSURLErrorNotConnectedToInternet</span><br><span class="line">                        &amp;&amp; error.code != NSURLErrorCancelled</span><br><span class="line">                        &amp;&amp; error.code != NSURLErrorTimedOut</span><br><span class="line">                        &amp;&amp; error.code != NSURLErrorInternationalRoamingOff</span><br><span class="line">                        &amp;&amp; error.code != NSURLErrorDataNotAllowed</span><br><span class="line">                        &amp;&amp; error.code != NSURLErrorCannotFindHost</span><br><span class="line">                        &amp;&amp; error.code != NSURLErrorCannotConnectToHost) &#123;</span><br><span class="line">                        </span><br><span class="line">                       @synchronized (self.failedURLs) &#123;</span><br><span class="line">                            [self.failedURLs addObject:url];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    </span><br><span class="line">                    //3. 下载成功</span><br><span class="line">                    //3.1 如果需要下载失败后重新下载，则将当前url从失败url名单里移除</span><br><span class="line">                    if ((options &amp; SDWebImageRetryFailed)) &#123;</span><br><span class="line">                        @synchronized (self.failedURLs) &#123;</span><br><span class="line">                            [self.failedURLs removeObject:url];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    //3.2 进行缓存</span><br><span class="line">                    BOOL cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);                   </span><br><span class="line">                    if (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) &#123;</span><br><span class="line">                    </span><br><span class="line">                        //（即使缓存存在，也要刷新图片） &amp;&amp; 缓存图片 &amp;&amp; 不存在下载后的图片：不做操作</span><br><span class="line">                                           </span><br><span class="line">                    &#125; else if (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [self.delegate respondsToSelector:@selector(imageManager:transformDownloadedImage:withURL:)]) &#123;</span><br><span class="line">                        </span><br><span class="line">          //（下载图片成功 &amp;&amp; （没有动图||处理动图） &amp;&amp; （下载之后，缓存之前处理图片）               dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123;</span><br><span class="line">                            UIImage *transformedImage = [self.delegate imageManager:self transformDownloadedImage:downloadedImage withURL:url];</span><br><span class="line">                            if (transformedImage &amp;&amp; finished) &#123;</span><br><span class="line">                                BOOL imageWasTransformed = ![transformedImage isEqual:downloadedImage];</span><br><span class="line">                                // pass nil if the image was transformed, so we can recalculate the data from the image</span><br><span class="line">                                //缓存图片</span><br><span class="line">                                [self.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? nil : downloadedData) forKey:key toDisk:cacheOnDisk completion:nil];</span><br><span class="line">                            &#125;</span><br><span class="line">                            //将图片传入completedBlock</span><br><span class="line">                            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        </span><br><span class="line">                        //(图片下载成功并结束)</span><br><span class="line">                        if (downloadedImage &amp;&amp; finished) &#123;</span><br><span class="line">                            [self.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:nil];</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> //如果完成，从当前运行的操作列表里移除当前操作</span><br><span class="line">                if (finished) &#123;</span><br><span class="line">                    [self safelyRemoveOperationFromRunning:strongOperation];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">            </span><br><span class="line">            //取消的block</span><br><span class="line">            operation.cancelBlock = ^&#123;</span><br><span class="line">            </span><br><span class="line">                //取消当前的token</span><br><span class="line">                [self.imageDownloader cancel:subOperationToken];</span><br><span class="line">                __strong __typeof(weakOperation) strongOperation = weakOperation;</span><br><span class="line">                //从当前运行的操作列表里移除当前操作</span><br><span class="line">                [self safelyRemoveOperationFromRunning:strongOperation];</span><br><span class="line">            &#125;;</span><br><span class="line">        </span><br><span class="line">        &#125; else if (cachedImage) &#123;</span><br><span class="line">            </span><br><span class="line">            //存在缓存图片</span><br><span class="line">            __strong __typeof(weakOperation) strongOperation = weakOperation;            </span><br><span class="line">            //调用完成的block</span><br><span class="line">            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];            </span><br><span class="line">            //删去当前的的下载操作（线程安全）</span><br><span class="line">            [self safelyRemoveOperationFromRunning:operation];        </span><br><span class="line">        &#125; else &#123;            </span><br><span class="line">            //没有缓存的图片，而且下载被代理终止了</span><br><span class="line">            __strong __typeof(weakOperation) strongOperation = weakOperation;</span><br><span class="line">           </span><br><span class="line">            // 调用完成的block</span><br><span class="line">            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:nil data:nil error:nil cacheType:SDImageCacheTypeNone finished:YES url:url];            </span><br><span class="line">            //删去当前的下载操作</span><br><span class="line">            [self safelyRemoveOperationFromRunning:operation];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    return operation;                                                             </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完了<code>SDWebImageManager</code>的回调处理，我们分别看一下<br><code>SDImageCache</code>和<code>SDWebImageDownloader</code>内部具体是如何工作的。首先看一下<code>SDImageCache</code>：</p><h3 id="SDImageCache"><a href="#SDImageCache" class="headerlink" title="SDImageCache"></a>SDImageCache</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  SDImageCache.m ============== //</span><br><span class="line">@property (strong, nonatomic, nonnull) NSCache *memCache;//内存缓存</span><br><span class="line">@property (strong, nonatomic, nonnull) NSString *diskCachePath;//磁盘缓存路径</span><br><span class="line">@property (strong, nonatomic, nullable) NSMutableArray&lt;NSString *&gt; *customPaths;//</span><br><span class="line">@property (SDDispatchQueueSetterSementics, nonatomic, nullable) dispatch_queue_t //ioQueue唯一子线程;</span><br></pre></td></tr></table></figure><h4 id="核心方法：查询缓存"><a href="#核心方法：查询缓存" class="headerlink" title="核心方法：查询缓存"></a>核心方法：查询缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  SDImageCache.m ============== //</span><br><span class="line">- (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key done:(nullable SDCacheQueryCompletedBlock)doneBlock &#123;   </span><br><span class="line">    if (!key) &#123;</span><br><span class="line">        if (doneBlock) &#123;</span><br><span class="line">            doneBlock(nil, nil, SDImageCacheTypeNone);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //================查看内存的缓存=================//</span><br><span class="line">    UIImage *image = [self imageFromMemoryCacheForKey:key];    </span><br><span class="line">    // 如果存在，直接调用block，将image，data，CaheType传进去</span><br><span class="line">    if (image) &#123;    </span><br><span class="line">        NSData *diskData = nil;        </span><br><span class="line">        //如果是gif，就拿到data，后面要传到doneBlock里。不是gif就传nil</span><br><span class="line">        if ([image isGIF]) &#123;</span><br><span class="line">            diskData = [self diskImageDataBySearchingAllPathsForKey:key];</span><br><span class="line">        &#125;        </span><br><span class="line">        if (doneBlock) &#123;</span><br><span class="line">            doneBlock(image, diskData, SDImageCacheTypeMemory);</span><br><span class="line">        &#125;        </span><br><span class="line">        //因为图片有缓存可供使用，所以不用实例化NSOperation，直接范围nil</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //================查看磁盘的缓存=================//</span><br><span class="line">    NSOperation *operation = [NSOperation new];    </span><br><span class="line">    //唯一的子线程：self.ioQueue</span><br><span class="line">    dispatch_async(self.ioQueue, ^&#123;        </span><br><span class="line">        if (operation.isCancelled) &#123;</span><br><span class="line">            // 在用之前就判断operation是否被取消了，作者考虑的非常严谨</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        @autoreleasepool &#123;            </span><br><span class="line">            NSData *diskData = [self diskImageDataBySearchingAllPathsForKey:key];</span><br><span class="line">            UIImage *diskImage = [self diskImageForKey:key];            </span><br><span class="line">            if (diskImage &amp;&amp; self.config.shouldCacheImagesInMemory) &#123;</span><br><span class="line">                  // cost 被用来计算缓存中所有对象的代价。当内存受限或者所有缓存对象的总代价超过了最大允许的值时，缓存会移除其中的一些对象。</span><br><span class="line">                NSUInteger cost = SDCacheCostForImage(diskImage);                </span><br><span class="line">                //存入内存缓存中</span><br><span class="line">                [self.memCache setObject:diskImage forKey:key cost:cost];</span><br><span class="line">            &#125;</span><br><span class="line">            if (doneBlock) &#123;</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return operation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SDWebImageDownloader"><a href="#SDWebImageDownloader" class="headerlink" title="SDWebImageDownloader"></a>SDWebImageDownloader</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  SDWebImageDownloader.m ============== //</span><br><span class="line">@property (strong, nonatomic, nonnull) NSOperationQueue *downloadQueue;//下载队列</span><br><span class="line">@property (weak, nonatomic, nullable) NSOperation *lastAddedOperation;//最后添加的下载操作</span><br><span class="line">@property (assign, nonatomic, nullable) Class operationClass;//操作类</span><br><span class="line">@property (strong, nonatomic, nonnull) NSMutableDictionary&lt;NSURL *, SDWebImageDownloaderOperation *&gt; *URLOperations;//操作数组</span><br><span class="line">@property (strong, nonatomic, nullable) SDHTTPHeadersMutableDictionary *HTTPHeaders;//HTTP请求头</span><br><span class="line">@property (SDDispatchQueueSetterSementics, nonatomic, nullable) dispatch_queue_t barrierQueue;//用来阻塞前面的下载线程（串行化）</span><br></pre></td></tr></table></figure><h4 id="核心方法：下载图片"><a href="#核心方法：下载图片" class="headerlink" title="核心方法：下载图片"></a>核心方法：下载图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  SDWebImageDownloader.m ============== //</span><br><span class="line">- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url</span><br><span class="line">                                                   options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                                 completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock &#123;</span><br><span class="line">    __weak SDWebImageDownloader *wself = self;</span><br><span class="line">    return [self addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123;</span><br><span class="line">        </span><br><span class="line">        __strong __typeof (wself) sself = wself;</span><br><span class="line">        </span><br><span class="line">        NSTimeInterval timeoutInterval = sself.downloadTimeout;</span><br><span class="line">        if (timeoutInterval == 0.0) &#123;</span><br><span class="line">            timeoutInterval = 15.0;</span><br><span class="line">        &#125;</span><br><span class="line">        // In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise</span><br><span class="line">        </span><br><span class="line">        //创建下载请求</span><br><span class="line">        NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:(options &amp; SDWebImageDownloaderUseNSURLCache ? NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData) timeoutInterval:timeoutInterval];</span><br><span class="line">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</span><br><span class="line">        request.HTTPShouldUsePipelining = YES;</span><br><span class="line">        if (sself.headersFilter) &#123;</span><br><span class="line">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders copy]);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            request.allHTTPHeaderFields = sself.HTTPHeaders;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //创建下载操作：SDWebImageDownloaderOperation用于请求网络资源的操作，它是一个 NSOperation 的子类</span><br><span class="line">        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</span><br><span class="line">        operation.shouldDecompressImages = sself.shouldDecompressImages;</span><br><span class="line">        </span><br><span class="line">        //url证书</span><br><span class="line">        if (sself.urlCredential) &#123;</span><br><span class="line">            operation.credential = sself.urlCredential;</span><br><span class="line">        &#125; else if (sself.username &amp;&amp; sself.password) &#123;</span><br><span class="line">            operation.credential = [NSURLCredential credentialWithUser:sself.username password:sself.password persistence:NSURLCredentialPersistenceForSession];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //优先级</span><br><span class="line">        if (options &amp; SDWebImageDownloaderHighPriority) &#123;</span><br><span class="line">            operation.queuePriority = NSOperationQueuePriorityHigh;</span><br><span class="line">        &#125; else if (options &amp; SDWebImageDownloaderLowPriority) &#123;</span><br><span class="line">            operation.queuePriority = NSOperationQueuePriorityLow;</span><br><span class="line">        &#125;</span><br><span class="line">        //在下载队列里添加下载操作，执行下载操作</span><br><span class="line">        [sself.downloadQueue addOperation:operation];</span><br><span class="line">        </span><br><span class="line">        //如果后进先出</span><br><span class="line">        if (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</span><br><span class="line">            // Emulate LIFO execution order by systematically adding new operations as last operation&apos;s dependency</span><br><span class="line">            //addDependency:参数opertaion倍添加到NSOperationQueue后，只有等该opertion结束后才能执行其他的operation，实现了后进先出</span><br><span class="line">            [sself.lastAddedOperation addDependency:operation];</span><br><span class="line">            sself.lastAddedOperation = operation;</span><br><span class="line">        &#125;</span><br><span class="line">        return operation;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面还有一个<code>addProgressCallback: progressBlock: completedBlock: forURL: createCallback:</code>方法，用来保存<code>progressBlock</code>和<code>completedBlock</code>。我们看一下这个方法的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> // ==============  SDWebImageDownloader.m ============== //</span><br><span class="line">- (nullable SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock</span><br><span class="line">                                                   forURL:(nullable NSURL *)url</span><br><span class="line">                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback &#123;</span><br><span class="line">    // url 用来作为回调字典的key，如果为空，立即返回失败 </span><br><span class="line">    if (url == nil) &#123;</span><br><span class="line">        if (completedBlock != nil) &#123;</span><br><span class="line">            completedBlock(nil, nil, nil, NO);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    __block SDWebImageDownloadToken *token = nil;</span><br><span class="line">    //串行化前面所有的操作</span><br><span class="line">    dispatch_barrier_sync(self.barrierQueue, ^&#123;    </span><br><span class="line">        //当前下载操作中取出SDWebImageDownloaderOperation实例</span><br><span class="line">        SDWebImageDownloaderOperation *operation = self.URLOperations[url];        </span><br><span class="line">        if (!operation) &#123;</span><br><span class="line">        //如果没有，就初始化它</span><br><span class="line">            operation = createCallback();</span><br><span class="line">            self.URLOperations[url] = operation;</span><br><span class="line">            __weak SDWebImageDownloaderOperation *woperation = operation;</span><br><span class="line">            </span><br><span class="line">            operation.completionBlock = ^&#123;</span><br><span class="line">              SDWebImageDownloaderOperation *soperation = woperation;</span><br><span class="line">              if (!soperation) return;</span><br><span class="line">              if (self.URLOperations[url] == soperation) &#123;</span><br><span class="line">                  [self.URLOperations removeObjectForKey:url];</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        id downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</span><br><span class="line">        //这里 downloadOperationCancelToken 默认是一个字典，存放 progressBlock 和 completedBlock</span><br><span class="line">        token = [SDWebImageDownloadToken new];</span><br><span class="line">        token.url = url;</span><br><span class="line">        token.downloadOperationCancelToken = downloadOperationCancelToken;</span><br><span class="line">    &#125;);</span><br><span class="line">    return token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里真正保存两个block的方法是<code>addHandlersForProgress: completed:</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (nullable id)addHandlersForProgress:(nullable SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                            completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock &#123;</span><br><span class="line">    //实例化一个SDCallbacksDictionary，存放一个progressBlock 和 completedBlock</span><br><span class="line">    SDCallbacksDictionary *callbacks = [NSMutableDictionary new];</span><br><span class="line">    if (progressBlock) callbacks[kProgressCallbackKey] = [progressBlock copy];</span><br><span class="line">    if (completedBlock) callbacks[kCompletedCallbackKey] = [completedBlock copy];</span><br><span class="line">    dispatch_barrier_async(self.barrierQueue, ^&#123;</span><br><span class="line">        //添加到缓存中 self.callbackBlocks</span><br><span class="line">        [self.callbackBlocks addObject:callbacks];</span><br><span class="line">    &#125;);</span><br><span class="line">    return callbacks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里<code>SDWebImage</code>的核心方法都讲解完毕了，其他没有讲到的部分以后会慢慢添加上去。</p><h2 id="最后看一下一些比较零散的知识点："><a href="#最后看一下一些比较零散的知识点：" class="headerlink" title="最后看一下一些比较零散的知识点："></a>最后看一下一些比较零散的知识点：</h2><hr><h3 id="1-运行时存取关联对象："><a href="#1-运行时存取关联对象：" class="headerlink" title="1. 运行时存取关联对象："></a>1. 运行时存取关联对象：</h3><p>存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objc_setAssociatedObject(self, &amp;loadOperationKey, operations, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">//将operations对象关联给self，地址为&amp;loadOperationKey，语义是OBJC_ASSOCIATION_RETAIN_NONATOMIC。</span><br></pre></td></tr></table></figure><p>取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SDOperationsDictionary *operations = objc_getAssociatedObject(self, &amp;loadOperationKey);</span><br><span class="line">//将operations对象通过地址&amp;loadOperationKey从self里取出来</span><br></pre></td></tr></table></figure><h3 id="2-数组的写操作需要加锁（多线程访问，避免覆写）"><a href="#2-数组的写操作需要加锁（多线程访问，避免覆写）" class="headerlink" title="2. 数组的写操作需要加锁（多线程访问，避免覆写）"></a>2. 数组的写操作需要加锁（多线程访问，避免覆写）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//给self.runningOperations加锁</span><br><span class="line">//self.runningOperations数组的添加操作</span><br><span class="line">    @synchronized (self.runningOperations) &#123;</span><br><span class="line">        [self.runningOperations addObject:operation];</span><br><span class="line">    &#125;</span><br><span class="line">//self.runningOperations数组的删除操作</span><br><span class="line">- (void)safelyRemoveOperationFromRunning:(nullable SDWebImageCombinedOperation*)operation &#123;</span><br><span class="line">    @synchronized (self.runningOperations) &#123;</span><br><span class="line">        if (operation) &#123;</span><br><span class="line">            [self.runningOperations removeObject:operation];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-确保在主线程的宏："><a href="#3-确保在主线程的宏：" class="headerlink" title="3. 确保在主线程的宏："></a>3. 确保在主线程的宏：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dispatch_main_async_safe(^&#123;</span><br><span class="line">  //将下面这段代码放在主线程中</span><br><span class="line">            [self sd_setImage:placeholder imageData:nil basedOnClassOrViaCustomSetImageBlock:setImageBlock];</span><br><span class="line">        &#125;);</span><br><span class="line">//宏定义：</span><br><span class="line">#define dispatch_main_async_safe(block)\</span><br><span class="line">    if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) &#123;\</span><br><span class="line">        block();\</span><br><span class="line">    &#125; else &#123;\</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), block);\</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="4-设置不能为nil的参数"><a href="#4-设置不能为nil的参数" class="headerlink" title="4. 设置不能为nil的参数"></a>4. 设置不能为nil的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (nonnull instancetype)initWithCache:(nonnull SDImageCache *)cache downloader:(nonnull SDWebImageDownloader *)downloader &#123;</span><br><span class="line">    if ((self = [super init])) &#123;</span><br><span class="line">        _imageCache = cache;</span><br><span class="line">        _imageDownloader = downloader;</span><br><span class="line">        _failedURLs = [NSMutableSet new];</span><br><span class="line">        _runningOperations = [NSMutableArray new];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果在参数里添加了nonnull关键字，那么编译器就可以检查传入的参数是否为nil，如果是，则编译器会有警告</p></blockquote><h3 id="5-容错，强制转换类型"><a href="#5-容错，强制转换类型" class="headerlink" title="5. 容错，强制转换类型"></a>5. 容错，强制转换类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ([url isKindOfClass:NSString.class]) &#123;</span><br><span class="line">        url = [NSURL URLWithString:(NSString *)url];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在传入的参数为NSString时（但是方法参数要求是NSURL），自动转换为NSURL</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信广大的iOS开发者，对于&lt;a href=&quot;https://github.com/rs/SDWebImage&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="源码解析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>YTKNetwork源码解析</title>
    <link href="http://yoursite.com/2018/03/18/iOS/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/YTKNetwork%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/03/18/iOS/源码分析/YTKNetwork源码解析/</id>
    <published>2018-03-18T10:03:05.000Z</published>
    <updated>2018-03-26T02:01:42.995Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名iOS开发工作者，大家应该都听过<a href="https://github.com/yuantiku/YTKNetwork" target="_blank" rel="noopener">YTKNetwork框架</a>吧。它是猿题库技术团队开源的一个网络请求框架，内部封装了AFNetworking。它把每个请求实例化，管理它的生命周期，也可以管理多个请求。</p><p>在正式讲解源码之前，我会先讲一下该框架所用的架构和设计模式。我总觉得对架构和设计有一定的了解的话，会有助于对源码的理解。</p><h2 id="1-架构"><a href="#1-架构" class="headerlink" title="1. 架构"></a>1. 架构</h2><hr><p>先上图：</p><p><img src="http://upload-images.jianshu.io/upload_images/859001-054321f909402be5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>在这里简单说明一下：</p><ol><li>YTKNetwork框架将每一个请求实例化，YTKBaseRequest是所有请求类的基类，YTKRequest是它的子类。所以如果我们想要发送一个请求，则需要创建并实例化一个继承于YTKRequest的自定义的请求类（CustomRequest）并发送请求。</li><li>YTKNetworkAgent是一个单例，负责管理所有的请求类（例如CustomRequest）。当CustomRequest发送请求以后，会把自己放在YTKNetworkAgent持有的一个字典里，让其管理自己。</li><li>我们说YTKNetwork封装了AFNetworking，实际上是YTKNetworkAgent封装了AFNetworking，由它负责AFNetworking请求的发送和AFNetworking的回调处理。所以如果我们想更换一个第三方网络请求库，就可以在这里更换一下。而YTKRequest更多的是只是负责缓存的处理。</li><li>YTKNetworkConfig与YTKPriviate的具体职能现在不做介绍，会在后文给出。</li></ol></blockquote><p>OK，现在我们知道了YTKNetwork中类与类之间的关系以及关键类的大致职能，接下来我会告诉你YTKNetwork为什么会采用这种关系来架构，以及采用这种架构会有什么好处。</p><h2 id="2-设计模式"><a href="#2-设计模式" class="headerlink" title="2. 设计模式"></a>2. 设计模式</h2><hr><p>YTKNetwork框架采用的设计模式是<strong>命令模式（Command Pattern）</strong>。</p><p>首先看一下命令模式的定义：</p><blockquote><p>命令模式将请求封装成对象，以便使用不同的请求，队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。<br>摘自：<a href="https://www.amazon.cn/Head-First设计模式-弗里曼/dp/B0011FBU34/ref=sr_1_1?ie=UTF8&amp;qid=1500104908&amp;sr=8-1&amp;keywords=head+first+设计模式" target="_blank" rel="noopener">《Head First 设计模式》</a></p></blockquote><p>看一下命令模式的类图：</p><p><img src="http://upload-images.jianshu.io/upload_images/859001-c5c7e9ff32b2e647.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图中英文的含义：</p><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Command</td><td>抽象命令类</td></tr><tr><td>ConcreteCommand</td><td>命令类的实现类（子类）</td></tr><tr><td>Invoker</td><td>调用者</td></tr><tr><td>Receiver</td><td>命令接收者（执行者)</td></tr><tr><td>Client</td><td>客户端</td></tr></tbody></table><p>详细介绍一下：</p><ol><li>命令模式的本质是对命令的封装，将发出命令的责任和执行命令的责任分割开。</li><li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。</li></ol><p>可能还是觉得有点抽象，在这里举一个<a href="https://www.amazon.cn/Head-First设计模式-弗里曼/dp/B0011FBU34/ref=sr_1_1?ie=UTF8&amp;qid=1500104908&amp;sr=8-1&amp;keywords=head+first+设计模式" target="_blank" rel="noopener">《Head First 设计模式》</a>里的例子，一个客人在餐厅点餐的过程：</p><ol><li>你将点的菜写在订单里，交给了服务员。</li><li>服务员将订单交给厨师。</li><li>厨师做好菜之后将做好的菜交给服务员。</li><li>最后服务员把菜递给你。</li></ol><p>在这里，命令就好比是订单，而你是命令的发起者。你的命令（订单）通过服务员（调用者）交给了命令的执行者（厨师）。<br>所以至于这道菜具体是谁做，怎么做，你是不知道的，你做的只是发出命令和接受结果。而且对于餐厅来说，厨师是可以随便换的，而你可能对此一无所知。反过来，厨师只需要好好把菜做好，至于是谁点的菜也不需要他考虑。</p><p>结合上面命令模式的类图以及餐厅点餐的例子，我们来理清一下<code>YTKNetwork</code>内部的职能</p><table><thead><tr><th>场景</th><th>Command</th><th>ConcreteCommand</th><th>Invoker</th><th>Receiver</th><th>Client</th></tr></thead><tbody><tr><td>餐厅</td><td>空白订单</td><td>填入菜名的订单</td><td>服务员</td><td>厨师</td><td>客人</td></tr><tr><td>YTKNetwork</td><td>YTKBaseRequest</td><td>CustomRequest</td><td>YTKNetworkAgent</td><td>AFNetworking</td><td>ViewController/ViewModel</td></tr></tbody></table><p>可以看到，YTKNetwork对命令模式的实现是很符合其设计标准的，它将请求的发起者和接收者分离开来(中间隔着调用者)，可以让我们随时更换接受者。</p><p>另外，因为封装了请求，我们既可以管理单个请求，也可以同时管理多个请求，甚至实现琏式请求的发送。关于多个请求的发送，我们也可以想象在餐厅里，你可以在吃的过程中还想起来要吃别的东西，例如点心，饮料之类的，你就可以填多个订单（当然也可以写在一起）交给服务员。</p><p>相信到这里，大家应该对YTKNetwork的设计与架构有了足够的认识了，下面进入到真正的源码解析，我们结合一下它的代码来看一下YTKNetwork是如何实现和管理网络请求的。</p><h2 id="3-源码解析"><a href="#3-源码解析" class="headerlink" title="3. 源码解析"></a>3. 源码解析</h2><hr><p>在真正讲解源码之前，我先详细说一下各个类的职责:</p><h3 id="3-1-责任介绍"><a href="#3-1-责任介绍" class="headerlink" title="3.1 责任介绍"></a>3.1 责任介绍</h3><table><thead><tr><th>类名</th><th>职责</th></tr></thead><tbody><tr><td>YTKBaseRequest</td><td>所有请求类的基类。持有NSURLSessionTask实例，responseData，responseObject，error等重要数据，提供一些需要子类实现的与网络请求相关的方法，处理回调的代理和block，命令YTKNetworkAgent发起网络请求。</td></tr><tr><td>YTKRequest</td><td>YTKBaseRequest的子类。负责缓存的处理：请求前查询缓存；请求后写入缓存。</td></tr><tr><td>YTKNetworkConfig</td><td>被YTKRequest和YTKNetworkAgent访问。负责所有请求的全局配置，例如baseUrl和CDNUrl等等。</td></tr><tr><td>YTKNetworkPrivate</td><td>提供JSON验证，appVersion等辅助性的方法；给YTKBaseRequest增加一些分类。</td></tr><tr><td>YTKNetworkAgent</td><td>真正发起请求的类。负责发起请求，结束请求，并持有一个字典来存储正在执行的请求。</td></tr><tr><td>YTKBatchRequest</td><td>可以发起批量请求，持有一个数组来保存所有的请求类。在请求执行后遍历这个数组来发起请求，如果其中有一个请求返回失败，则认定本组请求失败。</td></tr><tr><td>YTKBatchRequestAgent</td><td>负责管理多个YTKBatchRequest实例，持有一个数组来保存YTKBatchRequest。支持添加和删除YTKBatchRequest实例。</td></tr><tr><td>YTKChainRequest</td><td>可以发起链式请求，持有一个数组来保存所有的请求类。当某个请求结束后才能发起下一个请求，如果其中有一个请求返回失败，则认定本请求链失败。</td></tr><tr><td>YTKChainRequestAgent</td><td>负责管理多个YTKChainRequestAgent实例，持有一个数组来保存YTKChainRequest。支持添加和删除YTKChainRequest实例。</td></tr></tbody></table><p>OK，现在知道了YTKNetwork内部的责任分配，下面我们先从单个请求的全部流程（配置，发起，结束）来看一下YTKNetwork都做了什么。</p><h3 id="3-2-单个请求"><a href="#3-2-单个请求" class="headerlink" title="3.2 单个请求"></a>3.2 单个请求</h3><h4 id="3-21-单个请求的配置"><a href="#3-21-单个请求的配置" class="headerlink" title="3.21 单个请求的配置"></a>3.21 单个请求的配置</h4><p><a href="https://github.com/yuantiku/YTKNetwork/blob/master/Docs/BasicGuide_cn.md" target="_blank" rel="noopener">官方的教程</a>建议我们将请求的全局配置是在AppDelegate.m文件里，设定baseUrl以及cdnUrl等参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application </span><br><span class="line">   didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">   YTKNetworkConfig *config = [YTKNetworkConfig sharedConfig];</span><br><span class="line">   config.baseUrl = @&quot;http://yuantiku.com&quot;;</span><br><span class="line">   config.cdnUrl = @&quot;http://fen.bi&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们需要新建一个注册的请求，则需要创建一个继承于YTKRequest的注册接口的类RegisterApi，并将针对该请求参数配置好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// RegisterApi.h</span><br><span class="line">#import &quot;YTKRequest.h&quot;</span><br><span class="line">@interface RegisterApi : YTKRequest</span><br><span class="line">- (id)initWithUsername:(NSString *)username password:(NSString *)password;</span><br><span class="line">@end</span><br><span class="line">// RegisterApi.m</span><br><span class="line">#import &quot;RegisterApi.h&quot;</span><br><span class="line">@implementation RegisterApi &#123;</span><br><span class="line">    NSString *_username;</span><br><span class="line">    NSString *_password;</span><br><span class="line">&#125;</span><br><span class="line">//初始化的时候将两个参数值传入</span><br><span class="line">- (id)initWithUsername:(NSString *)username password:(NSString *)password &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _username = username;</span><br><span class="line">        _password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">//需要和baseUrl拼接的地址</span><br><span class="line">- (NSString *)requestUrl &#123;</span><br><span class="line">    // “ http://www.yuantiku.com ” 在 YTKNetworkConfig 中设置，这里只填除去域名剩余的网址信息</span><br><span class="line">    return @&quot;/iphone/register&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//请求方法，某人是GET</span><br><span class="line">- (YTKRequestMethod)requestMethod &#123;</span><br><span class="line">    return YTKRequestMethodPOST;</span><br><span class="line">&#125;</span><br><span class="line">//请求体</span><br><span class="line">- (id)requestArgument &#123;</span><br><span class="line">    return @&#123;</span><br><span class="line">        @&quot;username&quot;: _username,</span><br><span class="line">        @&quot;password&quot;: _password</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>现在我们知道如何配置全局的参数和针对某个请求的参数了，接下来看一下单个请求是如何发起的。</p><h3 id="3-22-单个请求的发起"><a href="#3-22-单个请求的发起" class="headerlink" title="3.22 单个请求的发起"></a>3.22 单个请求的发起</h3><p>还是刚才的注册API，在实例化以后，直接调用<code>startWithCompletionBlockWithSuccess:failure</code>方法（或<code>start</code>方法）就可以发起它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//LoginViewController.m</span><br><span class="line">- (void)loginButtonPressed:(id)sender &#123;</span><br><span class="line">    NSString *username = self.UserNameTextField.text;</span><br><span class="line">    NSString *password = self.PasswordTextField.text;</span><br><span class="line">    if (username.length &gt; 0 &amp;&amp; password.length &gt; 0) &#123;</span><br><span class="line">        RegisterApi *api = [[RegisterApi alloc] initWithUsername:username password:password];</span><br><span class="line">        [api startWithCompletionBlockWithSuccess:^(YTKBaseRequest *request) &#123;</span><br><span class="line">            // 你可以直接在这里使用 self</span><br><span class="line">            NSLog(@&quot;succeed&quot;);</span><br><span class="line">        &#125; failure:^(YTKBaseRequest *request) &#123;</span><br><span class="line">            // 你可以直接在这里使用 self</span><br><span class="line">            NSLog(@&quot;failed&quot;);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是以block的形式回调，YTKNetwork也支持代理的回调：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//LoginViewController.m</span><br><span class="line">- (void)loginButtonPressed:(id)sender &#123;</span><br><span class="line">    NSString *username = self.UserNameTextField.text;</span><br><span class="line">    NSString *password = self.PasswordTextField.text;</span><br><span class="line">    if (username.length &gt; 0 &amp;&amp; password.length &gt; 0) &#123;</span><br><span class="line">        RegisterApi *api = [[RegisterApi alloc] initWithUsername:username password:password];</span><br><span class="line">        api.delegate = self;</span><br><span class="line">        [api start];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (void)requestFinished:(YTKBaseRequest *)request &#123;</span><br><span class="line">    NSLog(@&quot;succeed&quot;);</span><br><span class="line">&#125;</span><br><span class="line">- (void)requestFailed:(YTKBaseRequest *)request &#123;</span><br><span class="line">    NSLog(@&quot;failed&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两点需要注意的是：</p><blockquote><ol><li>必须给自定义请求类（RegisterApi）调用<code>startWithCompletionBlockWithSuccess:failure</code>方法（或<code>start</code>方法），才能真正发起请求。</li><li>在同时设置了回调代理和回调block的情况下，首先回调的是回调代理方法，然后再走回调block。</li></ol></blockquote><p>知道了YTKRequest请求是如何在外部发起的，我们现在从<code>startWithCompletionBlockWithSuccess:failure</code>方法开始，来看一下YTKNetwork都做了什么：</p><p>首先来到YTKBaseRequest类（因为最早是由它定义的该方法）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.m</span><br><span class="line">//传入成功和失败的block,并保存起来</span><br><span class="line">- (void)startWithCompletionBlockWithSuccess:(YTKRequestCompletionBlock)success</span><br><span class="line">                                    failure:(YTKRequestCompletionBlock)failure &#123;</span><br><span class="line">    //保存成功和失败的回调block，便于将来调用</span><br><span class="line">    [self setCompletionBlockWithSuccess:success failure:failure];</span><br><span class="line">    //发起请求</span><br><span class="line">    [self start];</span><br><span class="line">&#125;</span><br><span class="line">//保存成功和失败的block</span><br><span class="line">- (void)setCompletionBlockWithSuccess:(YTKRequestCompletionBlock)success</span><br><span class="line">                              failure:(YTKRequestCompletionBlock)failure &#123;</span><br><span class="line">    self.successCompletionBlock = success;</span><br><span class="line">    self.failureCompletionBlock = failure;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当保存完成功和失败的block以后，调用<code>start</code>方法，于是来到了YTKRequest类（注意，虽然YTKBaseRequest也实现了<code>start</code>方法，但是由于YTKRequest类是它的子类并也实现了start方法，所以这里最先走的是YTKRequest类的<code>start</code>方法）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (void)start &#123;</span><br><span class="line">    </span><br><span class="line">    //1. 如果忽略缓存 -&gt; 请求</span><br><span class="line">    if (self.ignoreCache) &#123;</span><br><span class="line">        [self startWithoutCache];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //2. 如果存在下载未完成的文件 -&gt; 请求</span><br><span class="line">    if (self.resumableDownloadPath) &#123;</span><br><span class="line">        [self startWithoutCache];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //3. 获取缓存失败 -&gt; 请求</span><br><span class="line">    if (![self loadCacheWithError:nil]) &#123;</span><br><span class="line">        [self startWithoutCache];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //4. 到这里，说明一定能拿到可用的缓存，可以直接回调了（因为一定能拿到可用的缓存，所以一定是调用成功的block和代理）</span><br><span class="line">    _dataFromCache = YES;</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        //5. 回调之前的操作</span><br><span class="line">        //5.1 缓存处理</span><br><span class="line">        [self requestCompletePreprocessor];</span><br><span class="line">        </span><br><span class="line">        //5.2 用户可以在这里进行真正回调前的操作</span><br><span class="line">        [self requestCompleteFilter];</span><br><span class="line">        </span><br><span class="line">        YTKRequest *strongSelf = self;</span><br><span class="line">        </span><br><span class="line">        //6. 执行回调</span><br><span class="line">        //6.1 请求完成的代理</span><br><span class="line">        [strongSelf.delegate requestFinished:strongSelf];</span><br><span class="line">        </span><br><span class="line">        //6.2 请求成功的block</span><br><span class="line">        if (strongSelf.successCompletionBlock) &#123;</span><br><span class="line">            strongSelf.successCompletionBlock(strongSelf);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //7. 把成功和失败的block都设置为nil，避免循环引用</span><br><span class="line">        [strongSelf clearCompletionBlock];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们之前说过YTKRequest负责缓存的相关处理，所以在上面这个start方法里，它做的是请求之前缓存的查询和检查工作:</p><ul><li>如果忽略缓存，或者缓存获取失败，调用startWithoutCache方法（参考1-3的情况），发起请求。</li><li>如果能成功获取到缓存，则直接回调（参考4-7的情况）。</li></ul><p>我们来看一下每一步的具体实现：</p><ol><li><code>ignoreCache</code>属性是用户手动设置的，如果用户强制忽略缓存，则无论是否缓存是否存在，直接发送请求。</li><li><code>resumableDownloadPath</code>是断点下载路径，如果该路径不为空，说明有未完成的下载任务，则直接发送请求继续下载。</li><li><code>loadCacheWithError：</code>方法验证了加载缓存是否成功的方法（返回值为YES，说明可以加载缓存；反之亦然），看一下具体实现：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (BOOL)loadCacheWithError:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">    </span><br><span class="line">    // 缓存时间小于0，则返回（缓存时间默认为-1，需要用户手动设置，单位是秒）</span><br><span class="line">    if ([self cacheTimeInSeconds] &lt; 0) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            *error = [NSError errorWithDomain:YTKRequestCacheErrorDomain code:YTKRequestCacheErrorInvalidCacheTime userInfo:@&#123; NSLocalizedDescriptionKey:@&quot;Invalid cache time&quot;&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    // 是否有缓存的元数据，如果没有，返回错误</span><br><span class="line">    if (![self loadCacheMetadata]) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            *error = [NSError errorWithDomain:YTKRequestCacheErrorDomain code:YTKRequestCacheErrorInvalidMetadata userInfo:@&#123; NSLocalizedDescriptionKey:@&quot;Invalid metadata. Cache may not exist&quot;&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    // 有缓存，再验证是否有效</span><br><span class="line">    if (![self validateCacheWithError:error]) &#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    // 有缓存，而且有效，再验证是否能取出来</span><br><span class="line">    if (![self loadCacheData]) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            *error = [NSError errorWithDomain:YTKRequestCacheErrorDomain code:YTKRequestCacheErrorInvalidCacheData userInfo:@&#123; NSLocalizedDescriptionKey:@&quot;Invalid cache data&quot;&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先讲一下什么是元数据：元数据是指数据的数据，在这里描述了缓存数据本身的一些特征：包括版本号，缓存时间，敏感信息等等， 稍后会做详细介绍。</p><p>我们来看一下上面关于缓存的元数据的获取方法：<code>loadCacheMetadata</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (BOOL)loadCacheMetadata &#123;</span><br><span class="line">    </span><br><span class="line">    NSString *path = [self cacheMetadataFilePath];</span><br><span class="line">    NSFileManager * fileManager = [NSFileManager defaultManager];</span><br><span class="line">    if ([fileManager fileExistsAtPath:path isDirectory:nil]) &#123;</span><br><span class="line">        @try &#123;</span><br><span class="line">            //将序列化之后被保存在磁盘里的文件反序列化到当前对象的属性cacheMetadata</span><br><span class="line">            _cacheMetadata = [NSKeyedUnarchiver unarchiveObjectWithFile:path];</span><br><span class="line">            return YES;</span><br><span class="line">        &#125; @catch (NSException *exception) &#123;</span><br><span class="line">            YTKLog(@&quot;Load cache metadata failed, reason = %@&quot;, exception.reason);</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cacheMetadata（YTKCacheMetadata） 是当前reqeust类用来保存缓存元数据的属性。</p><p>YTKCacheMetadata类被定义在YTKRequest.m文件里面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">@interface YTKCacheMetadata : NSObject&lt;NSSecureCoding&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, assign) long long version;</span><br><span class="line">@property (nonatomic, strong) NSString *sensitiveDataString;</span><br><span class="line">@property (nonatomic, assign) NSStringEncoding stringEncoding;</span><br><span class="line">@property (nonatomic, strong) NSDate *creationDate;</span><br><span class="line">@property (nonatomic, strong) NSString *appVersionString;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>它描述的是缓存的版本号，敏感信息，创建时间，app版本等信息，并支持序列化处理，可以保存在磁盘里。<br>因此，<code>loadCacheMetadata</code>方法的目的是将之前被序列化保存的缓存元数据信息反序列化，赋给自身的<code>cacheMetadata</code>属性上。</p><p>现在获取了缓存的元数据并赋给了自身的<code>cacheMetadata</code>属性上，那么接下来就要逐一验证元数据里的各项信息是否符合要求，在下面的<code>validateCacheWithError：</code>里面验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (BOOL)validateCacheWithError:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">    </span><br><span class="line">    // 是否大于过期时间</span><br><span class="line">    NSDate *creationDate = self.cacheMetadata.creationDate;</span><br><span class="line">    NSTimeInterval duration = -[creationDate timeIntervalSinceNow];</span><br><span class="line">    if (duration &lt; 0 || duration &gt; [self cacheTimeInSeconds]) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            *error = [NSError errorWithDomain:YTKRequestCacheErrorDomain code:YTKRequestCacheErrorExpired userInfo:@&#123; NSLocalizedDescriptionKey:@&quot;Cache expired&quot;&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    // 缓存的版本号是否符合</span><br><span class="line">    long long cacheVersionFileContent = self.cacheMetadata.version;</span><br><span class="line">    if (cacheVersionFileContent != [self cacheVersion]) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            *error = [NSError errorWithDomain:YTKRequestCacheErrorDomain code:YTKRequestCacheErrorVersionMismatch userInfo:@&#123; NSLocalizedDescriptionKey:@&quot;Cache version mismatch&quot;&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 敏感信息是否符合</span><br><span class="line">    NSString *sensitiveDataString = self.cacheMetadata.sensitiveDataString;</span><br><span class="line">    NSString *currentSensitiveDataString = ((NSObject *)[self cacheSensitiveData]).description;</span><br><span class="line">    if (sensitiveDataString || currentSensitiveDataString) &#123;</span><br><span class="line">        // If one of the strings is nil, short-circuit evaluation will trigger</span><br><span class="line">        if (sensitiveDataString.length != currentSensitiveDataString.length || ![sensitiveDataString isEqualToString:currentSensitiveDataString]) &#123;</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                *error = [NSError errorWithDomain:YTKRequestCacheErrorDomain code:YTKRequestCacheErrorSensitiveDataMismatch userInfo:@&#123; NSLocalizedDescriptionKey:@&quot;Cache sensitive data mismatch&quot;&#125;];</span><br><span class="line">            &#125;</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // app的版本是否符合</span><br><span class="line">    NSString *appVersionString = self.cacheMetadata.appVersionString;</span><br><span class="line">    NSString *currentAppVersionString = [YTKNetworkUtils appVersionString];</span><br><span class="line">    if (appVersionString || currentAppVersionString) &#123;</span><br><span class="line">        if (appVersionString.length != currentAppVersionString.length || ![appVersionString isEqualToString:currentAppVersionString]) &#123;</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                *error = [NSError errorWithDomain:YTKRequestCacheErrorDomain code:YTKRequestCacheErrorAppVersionMismatch userInfo:@&#123; NSLocalizedDescriptionKey:@&quot;App version mismatch&quot;&#125;];</span><br><span class="line">            &#125;</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果每项元数据信息都能通过，再在<code>loadCacheData</code>方法里面验证缓存是否能被取出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (BOOL)loadCacheData &#123;</span><br><span class="line">    </span><br><span class="line">    NSString *path = [self cacheFilePath];</span><br><span class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</span><br><span class="line">    NSError *error = nil;</span><br><span class="line">    if ([fileManager fileExistsAtPath:path isDirectory:nil]) &#123;</span><br><span class="line">        NSData *data = [NSData dataWithContentsOfFile:path];</span><br><span class="line">        _cacheData = data;</span><br><span class="line">        _cacheString = [[NSString alloc] initWithData:_cacheData encoding:self.cacheMetadata.stringEncoding];</span><br><span class="line">        switch (self.responseSerializerType) &#123;</span><br><span class="line">            case YTKResponseSerializerTypeHTTP:</span><br><span class="line">                // Do nothing.</span><br><span class="line">                return YES;</span><br><span class="line">            case YTKResponseSerializerTypeJSON:</span><br><span class="line">                _cacheJSON = [NSJSONSerialization JSONObjectWithData:_cacheData options:(NSJSONReadingOptions)0 error:&amp;error];</span><br><span class="line">                return error == nil;</span><br><span class="line">            case YTKResponseSerializerTypeXMLParser:</span><br><span class="line">                _cacheXML = [[NSXMLParser alloc] initWithData:_cacheData];</span><br><span class="line">                return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果通过了最终的考验，则说明当前请求对应的缓存是符合各项要求并可以被成功取出，也就是可以直接进行回调了。</p><p>当确认缓存可以成功取出后，手动设置<code>dataFromCache</code>属性为 YES，说明当前的请求结果是来自于缓存，而没有通过网络请求。</p><p>然后在真正回调之前做了如下处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m：</span><br><span class="line">- (void)start&#123;</span><br><span class="line">    ....</span><br><span class="line">    //5. 回调之前的操作</span><br><span class="line">    //5.1 缓存处理</span><br><span class="line">    [self requestCompletePreprocessor];</span><br><span class="line">    //5.2 用户可以在这里进行真正回调前的操作</span><br><span class="line">    [self requestCompleteFilter];</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.1：<code>requestCompletePreprocessor</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m：</span><br><span class="line">- (void)requestCompletePreprocessor &#123;</span><br><span class="line">    </span><br><span class="line">    [super requestCompletePreprocessor];</span><br><span class="line">    //是否异步将responseData写入缓存（写入缓存的任务放在专门的队列ytkrequest_cache_writing_queue进行）</span><br><span class="line">    if (self.writeCacheAsynchronously) &#123;</span><br><span class="line">        </span><br><span class="line">        dispatch_async(ytkrequest_cache_writing_queue(), ^&#123;</span><br><span class="line">            //保存响应数据到缓存</span><br><span class="line">            [self saveResponseDataToCacheFile:[super responseData]];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //保存响应数据到缓存</span><br><span class="line">        [self saveResponseDataToCacheFile:[super responseData]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m：</span><br><span class="line">//保存响应数据到缓存</span><br><span class="line">- (void)saveResponseDataToCacheFile:(NSData *)data &#123;</span><br><span class="line">    </span><br><span class="line">    if ([self cacheTimeInSeconds] &gt; 0 &amp;&amp; ![self isDataFromCache]) &#123;</span><br><span class="line">        if (data != nil) &#123;</span><br><span class="line">            @try &#123;</span><br><span class="line">                // New data will always overwrite old data.</span><br><span class="line">                [data writeToFile:[self cacheFilePath] atomically:YES];</span><br><span class="line">                YTKCacheMetadata *metadata = [[YTKCacheMetadata alloc] init];</span><br><span class="line">                metadata.version = [self cacheVersion];</span><br><span class="line">                metadata.sensitiveDataString = ((NSObject *)[self cacheSensitiveData]).description;</span><br><span class="line">                metadata.stringEncoding = [YTKNetworkUtils stringEncodingWithRequest:self];</span><br><span class="line">                metadata.creationDate = [NSDate date];</span><br><span class="line">                metadata.appVersionString = [YTKNetworkUtils appVersionString];</span><br><span class="line">                [NSKeyedArchiver archiveRootObject:metadata toFile:[self cacheMetadataFilePath]];</span><br><span class="line">                </span><br><span class="line">            &#125; @catch (NSException *exception) &#123;</span><br><span class="line">                YTKLog(@&quot;Save cache failed, reason = %@&quot;, exception.reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到, <code>requestCompletePreprocessor</code>方法的任务是将响应数据保存起来，也就是做缓存。但是，缓存的保存有两个条件，一个是需要<code>cacheTimeInSeconds</code>方法返回正整数（缓存时间，单位是秒，后续会详细说明）；另一个条件是<code>isDataFromCache</code>方法返回NO。但是我们知道，如果缓存可用，就会将这个属性设置为YES，所以走到这里的时候，就不做缓存了。</p></blockquote><p>接着看下5.2：<code>requestCompleteFilter</code>方法则是需要用户自己提供具体实现的，专门作为回调成功之前的一些处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.m</span><br><span class="line">- (void)requestCompleteFilter &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，回调之前的处理都结束了，下面来看一下在缓存可用的情况下的回调：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (void)start&#123;</span><br><span class="line">   </span><br><span class="line">    ...</span><br><span class="line">    YTKRequest *strongSelf = self;</span><br><span class="line">        </span><br><span class="line">    //6. 执行回调</span><br><span class="line">    //6.1 请求完成的代理</span><br><span class="line">    [strongSelf.delegate requestFinished:strongSelf];</span><br><span class="line">        </span><br><span class="line">    //6.2 请求成功的block</span><br><span class="line">    if (strongSelf.successCompletionBlock) &#123;</span><br><span class="line">         strongSelf.successCompletionBlock(strongSelf);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    //7. 把成功和失败的block都设置为nil，避免循环引用</span><br><span class="line">    [strongSelf clearCompletionBlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到 ，这里面同时存在两种回调：代理的回调和block的回调。先执行的是代理的回调，然后执行的是block的回调。而且在回调结束之后，YTKNetwork会帮助我们清空回调的block：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.m</span><br><span class="line">- (void)clearCompletionBlock &#123;</span><br><span class="line">    // 清空请求结束的block，避免循环引用</span><br><span class="line">    self.successCompletionBlock = nil;</span><br><span class="line">    self.failureCompletionBlock = nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，在用户同时实现了代理和block的情况下，二者都会被调用。</p></blockquote><p>到这里，我们了解了YTKNetwork在网络请求之前是如何验证缓存，以及在缓存有效的情况下是如何回调的。</p><p>反过来，如果缓存无效（或忽略缓存）时，需要立即请求网络。那么我们现在来看一看在这个时候YTKNetwork都做了什么：</p><p>仔细看一下上面的<code>start</code>方法，我们会发现，如果缓存不满足条件时，会直接调用<code>startWithoutCache</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (void)start&#123;</span><br><span class="line">    //1. 如果忽略缓存 -&gt; 请求</span><br><span class="line">    if (self.ignoreCache) &#123;</span><br><span class="line">        [self startWithoutCache];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //2. 如果存在下载未完成的文件 -&gt; 请求</span><br><span class="line">    if (self.resumableDownloadPath) &#123;</span><br><span class="line">        [self startWithoutCache];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //3. 获取缓存失败 -&gt; 请求</span><br><span class="line">    if (![self loadCacheWithError:nil]) &#123;</span><br><span class="line">        [self startWithoutCache];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在<code>startWithoutCache</code>方法里都做了什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (void)startWithoutCache &#123;</span><br><span class="line">    </span><br><span class="line">    //1. 清除缓存</span><br><span class="line">    [self clearCacheVariables];</span><br><span class="line">    </span><br><span class="line">    //2. 调用父类的发起请求</span><br><span class="line">    [super start];</span><br><span class="line">&#125;</span><br><span class="line">//清除当前请求对应的所有缓存</span><br><span class="line">- (void)clearCacheVariables &#123;</span><br><span class="line">    _cacheData = nil;</span><br><span class="line">    _cacheXML = nil;</span><br><span class="line">    _cacheJSON = nil;</span><br><span class="line">    _cacheString = nil;</span><br><span class="line">    _cacheMetadata = nil;</span><br><span class="line">    _dataFromCache = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，首先清除了关于缓存的所有数据，然后调用父类的<code>start</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.m:</span><br><span class="line">- (void)start &#123;</span><br><span class="line">    </span><br><span class="line">    //1. 告诉Accessories即将回调了（其实是即将发起请求）</span><br><span class="line">    [self toggleAccessoriesWillStartCallBack];</span><br><span class="line">    //2. 令agent添加请求并发起请求，在这里并不是组合关系，agent只是一个单例</span><br><span class="line">    [[YTKNetworkAgent sharedAgent] addRequest:self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步里的Accessories是一些遵从代理的对象。这个代理定义了一些用来追踪请求状况的方法。它被定义在了YTKBaseRequest.h文件里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//用来跟踪请求的状态的代理。</span><br><span class="line">@protocol YTKRequestAccessory &lt;NSObject&gt;</span><br><span class="line">@optional</span><br><span class="line">///  Inform the accessory that the request is about to start.</span><br><span class="line">///</span><br><span class="line">///  @param request The corresponding request.</span><br><span class="line">- (void)requestWillStart:(id)request;</span><br><span class="line">///  Inform the accessory that the request is about to stop. This method is called</span><br><span class="line">///  before executing `requestFinished` and `successCompletionBlock`.</span><br><span class="line">///</span><br><span class="line">///  @param request The corresponding request.</span><br><span class="line">- (void)requestWillStop:(id)request;</span><br><span class="line">///  Inform the accessory that the request has already stoped. This method is called</span><br><span class="line">///  after executing `requestFinished` and `successCompletionBlock`.</span><br><span class="line">///</span><br><span class="line">///  @param request The corresponding request.</span><br><span class="line">- (void)requestDidStop:(id)request;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>所以只要某个对象遵从了这个代理，就可以追踪到请求将要开始，将要结束，已经结束的状态。</p><p>接着看一下第二步：YTKNetworkAgent把当前的请求对象添加到了自己身上并发送请求。来看一下它的具体实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)addRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    //1. 获取task</span><br><span class="line">    NSParameterAssert(request != nil);</span><br><span class="line">    NSError * __autoreleasing requestSerializationError = nil;</span><br><span class="line">    //获取用户自定义的requestURL</span><br><span class="line">    NSURLRequest *customUrlRequest= [request buildCustomUrlRequest];</span><br><span class="line">    </span><br><span class="line">    if (customUrlRequest) &#123;</span><br><span class="line">        </span><br><span class="line">        __block NSURLSessionDataTask *dataTask = nil;</span><br><span class="line">        //如果存在用户自定义request，则直接走AFNetworking的dataTaskWithRequest:方法</span><br><span class="line">        dataTask = [_manager dataTaskWithRequest:customUrlRequest completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) &#123;</span><br><span class="line">            //响应的统一处理</span><br><span class="line">            [self handleRequestResult:dataTask responseObject:responseObject error:error];</span><br><span class="line">        &#125;];</span><br><span class="line">        request.requestTask = dataTask;</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        </span><br><span class="line">        //如果用户没有自定义url，则直接走这里</span><br><span class="line">        request.requestTask = [self sessionTaskForRequest:request error:&amp;requestSerializationError];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //序列化失败，则认定为请求失败</span><br><span class="line">    if (requestSerializationError) &#123;</span><br><span class="line">        //请求失败的处理</span><br><span class="line">        [self requestDidFailWithRequest:request error:requestSerializationError];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    NSAssert(request.requestTask != nil, @&quot;requestTask should not be nil&quot;);</span><br><span class="line">    // 优先级的映射</span><br><span class="line">    // !!Available on iOS 8 +</span><br><span class="line">    if ([request.requestTask respondsToSelector:@selector(priority)]) &#123;</span><br><span class="line">        switch (request.requestPriority) &#123;</span><br><span class="line">            case YTKRequestPriorityHigh:</span><br><span class="line">                request.requestTask.priority = NSURLSessionTaskPriorityHigh;</span><br><span class="line">                break;</span><br><span class="line">            case YTKRequestPriorityLow:</span><br><span class="line">                request.requestTask.priority = NSURLSessionTaskPriorityLow;</span><br><span class="line">                break;</span><br><span class="line">            case YTKRequestPriorityDefault:</span><br><span class="line">                /*!!fall through*/</span><br><span class="line">            default:</span><br><span class="line">                request.requestTask.priority = NSURLSessionTaskPriorityDefault;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Retain request</span><br><span class="line">    YTKLog(@&quot;Add request: %@&quot;, NSStringFromClass([request class]));</span><br><span class="line">    </span><br><span class="line">    //2. 将request放入保存请求的字典中，taskIdentifier为key，request为值</span><br><span class="line">    [self addRequestToRecord:request];</span><br><span class="line">    </span><br><span class="line">    //3. 开始task</span><br><span class="line">    [request.requestTask resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法挺长的，但是请不要被吓到，它总共分为三个部分：</p><ul><li>第一部分是获取当前请求对应的task并赋给request的requestTask属性（以后提到的request，都为用户自定义的当前请求类的实例）。</li><li>第二部分是把request放入专门用来保存请求的字典中，key为taskIdentifier。</li><li>第三部分是启动task。</li></ul><p>下面我来依次讲解每个部分：</p><p>第一部分：获取当前请求对应的task并赋给request：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)addRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">  ...</span><br><span class="line">  if (customUrlRequest) &#123;</span><br><span class="line">        </span><br><span class="line">        __block NSURLSessionDataTask *dataTask = nil;</span><br><span class="line">        //如果存在用户自定义request，则直接走AFNetworking的dataTaskWithRequest:方法</span><br><span class="line">        dataTask = [_manager dataTaskWithRequest:customUrlRequest completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) &#123;</span><br><span class="line">            //统一处理请求响应</span><br><span class="line">            [self handleRequestResult:dataTask responseObject:responseObject error:error];</span><br><span class="line">        &#125;];</span><br><span class="line">        request.requestTask = dataTask;</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        </span><br><span class="line">        //如果用户没有自定义url，则直接走这里</span><br><span class="line">        request.requestTask = [self sessionTaskForRequest:request error:&amp;requestSerializationError];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里判断了用户是否自定义了request：</p><ol><li>如果是，则直接调用AFNetworking的dataTaskWithRequest:方法。</li><li>如果不是，则调用YTKRequest自己的生成task的方法。</li></ol><p>第一种情况就不说了，因为AF帮我们做好了。在这里看一下第二种情况，<code>sessionTaskForRequest: error :</code>方法内部：</p><p>从这个方法最后的switch语句可以看出，这个方法的作用是返回当前request的NSURLSessionTask的实例。而且最终生成NSURLSessionTask实例的方法都是通过<code>dataTaskWithHTTPMethod:requestSerializer:URLString:parameters:error:</code>这个私有方法来实现的。在讲解这个关键的私有方法之前，先来逐步讲解一下这个私有方法需要的每个参数的获取方法：</p><ol><li>获得请求类型（GET，POST等）：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (NSURLSessionTask *)sessionTaskForRequest:(YTKBaseRequest *)request error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">  ...</span><br><span class="line">  YTKRequestMethod method = [request requestMethod];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>requestMethod</code>方法最初在YTKBaseRequest里面已经实现了，默认返回了YTKRequestMethodGET。</p><p>它的枚举类型在YTKBaseRequest.h里面定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.h</span><br><span class="line">///  HTTP Request method.</span><br><span class="line">typedef NS_ENUM(NSInteger, YTKRequestMethod) &#123;</span><br><span class="line">    YTKRequestMethodGET = 0,</span><br><span class="line">    YTKRequestMethodPOST,</span><br><span class="line">    YTKRequestMethodHEAD,</span><br><span class="line">    YTKRequestMethodPUT,</span><br><span class="line">    YTKRequestMethodDELETE,</span><br><span class="line">    YTKRequestMethodPATCH,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用户可以根据实际的需求在自定义request类里面重写这个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//RegisterAPI.m</span><br><span class="line">- (YTKRequestMethod)requestMethod &#123;</span><br><span class="line">    return YTKRequestMethodPOST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获得请求url：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (NSURLSessionTask *)sessionTaskForRequest:(YTKBaseRequest *)request error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">  ...</span><br><span class="line">  NSString *url = [self buildRequestUrl:request];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">//返回当前请求url</span><br><span class="line">- (NSString *)buildRequestUrl:(YTKBaseRequest *)request &#123;</span><br><span class="line">   </span><br><span class="line">    NSParameterAssert(request != nil);</span><br><span class="line">    //用户自定义的url（不包括在YTKConfig里面设置的base_url）</span><br><span class="line">    NSString *detailUrl = [request requestUrl];</span><br><span class="line">    NSURL *temp = [NSURL URLWithString:detailUrl];</span><br><span class="line">    </span><br><span class="line">    // 存在host和scheme的url立即返回正确</span><br><span class="line">    if (temp &amp;&amp; temp.host &amp;&amp; temp.scheme) &#123;</span><br><span class="line">        return detailUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 如果需要过滤url，则过滤</span><br><span class="line">    NSArray *filters = [_config urlFilters];</span><br><span class="line">    for (id&lt;YTKUrlFilterProtocol&gt; f in filters) &#123;</span><br><span class="line">        detailUrl = [f filterUrl:detailUrl withRequest:request];</span><br><span class="line">    &#125;</span><br><span class="line">    NSString *baseUrl;</span><br><span class="line">    if ([request useCDN]) &#123;</span><br><span class="line">        //如果使用CDN，在当前请求没有配置CDN地址的情况下，返回全局配置的CDN</span><br><span class="line">        if ([request cdnUrl].length &gt; 0) &#123;</span><br><span class="line">            baseUrl = [request cdnUrl];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            baseUrl = [_config cdnUrl];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //如果使用baseUrl，在当前请求没有配置baseUrl，返回全局配置的baseUrl</span><br><span class="line">        if ([request baseUrl].length &gt; 0) &#123;</span><br><span class="line">            baseUrl = [request baseUrl];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            baseUrl = [_config baseUrl];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果末尾没有/，则在末尾添加一个／</span><br><span class="line">    NSURL *url = [NSURL URLWithString:baseUrl];</span><br><span class="line">    if (baseUrl.length &gt; 0 &amp;&amp; ![baseUrl hasSuffix:@&quot;/&quot;]) &#123;</span><br><span class="line">        url = [url URLByAppendingPathComponent:@&quot;&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return [NSURL URLWithString:detailUrl relativeToURL:url].absoluteString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获得请求参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (NSURLSessionTask *)sessionTaskForRequest:(YTKBaseRequest *)request error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">   ...</span><br><span class="line">      //获取用户提供的请求参数</span><br><span class="line">    id param = request.requestArgument;</span><br><span class="line">    //获取用户提供的构造请求体的block（默认是没有的）</span><br><span class="line">    AFConstructingBlock constructingBlock = [request constructingBodyBlock];</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，requestArgument是一个get方法，需要用户自己定义请求体，例如在RegisterAPI里面就定义了两个请求参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//RegisterApi.m</span><br><span class="line">- (id)requestArgument &#123;</span><br><span class="line">    return @&#123;</span><br><span class="line">        @&quot;username&quot;: _username,</span><br><span class="line">        @&quot;password&quot;: _password</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获得request serializer</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (NSURLSessionTask *)sessionTaskForRequest:(YTKBaseRequest *)request error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   //4. 获得request serializer</span><br><span class="line">   AFHTTPRequestSerializer *requestSerializer = [self requestSerializerForRequest:request];</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line">- (AFHTTPRequestSerializer *)requestSerializerForRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    AFHTTPRequestSerializer *requestSerializer = nil;</span><br><span class="line">    </span><br><span class="line">    //HTTP or JSON</span><br><span class="line">    if (request.requestSerializerType == YTKRequestSerializerTypeHTTP) &#123;</span><br><span class="line">        requestSerializer = [AFHTTPRequestSerializer serializer];</span><br><span class="line">    &#125; else if (request.requestSerializerType == YTKRequestSerializerTypeJSON) &#123;</span><br><span class="line">        requestSerializer = [AFJSONRequestSerializer serializer];</span><br><span class="line">    &#125;</span><br><span class="line">    //超时时间</span><br><span class="line">    requestSerializer.timeoutInterval = [request requestTimeoutInterval];</span><br><span class="line">    </span><br><span class="line">    //是否允许数据服务</span><br><span class="line">    requestSerializer.allowsCellularAccess = [request allowsCellularAccess];</span><br><span class="line">    //如果当前请求需要验证</span><br><span class="line">    NSArray&lt;NSString *&gt; *authorizationHeaderFieldArray = [request requestAuthorizationHeaderFieldArray];</span><br><span class="line">    if (authorizationHeaderFieldArray != nil) &#123;</span><br><span class="line">        [requestSerializer setAuthorizationHeaderFieldWithUsername:authorizationHeaderFieldArray.firstObject</span><br><span class="line">                                                          password:authorizationHeaderFieldArray.lastObject];</span><br><span class="line">    &#125;</span><br><span class="line">    //如果当前请求需要自定义 HTTPHeaderField</span><br><span class="line">    NSDictionary&lt;NSString *, NSString *&gt; *headerFieldValueDictionary = [request requestHeaderFieldValueDictionary];</span><br><span class="line">    if (headerFieldValueDictionary != nil) &#123;</span><br><span class="line">        for (NSString *httpHeaderField in headerFieldValueDictionary.allKeys) &#123;</span><br><span class="line">            NSString *value = headerFieldValueDictionary[httpHeaderField];</span><br><span class="line">            [requestSerializer setValue:value forHTTPHeaderField:httpHeaderField];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return requestSerializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个方法通过传入的request实例，根据它的一些配置（用户提供）来获取AFHTTPRequestSerializer的实例。</p><p>到现在为止，获取NSURLSessionTask实例的几个参数都拿到了，剩下的就是调用<code>dataTaskWithHTTPMethod:requestSerializer:URLString:parameters:error:</code>方法来获取NSURLSessionTask实例了。我们来看一下这个方法的具体实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method</span><br><span class="line">                               requestSerializer:(AFHTTPRequestSerializer *)requestSerializer</span><br><span class="line">                                       URLString:(NSString *)URLString</span><br><span class="line">                                      parameters:(id)parameters</span><br><span class="line">                                           error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">    return [self dataTaskWithHTTPMethod:method requestSerializer:requestSerializer URLString:URLString parameters:parameters constructingBodyWithBlock:nil error:error];</span><br><span class="line">&#125;</span><br><span class="line">//最终返回NSURLSessionDataTask实例</span><br><span class="line">- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method</span><br><span class="line">                               requestSerializer:(AFHTTPRequestSerializer *)requestSerializer</span><br><span class="line">                                       URLString:(NSString *)URLString</span><br><span class="line">                                      parameters:(id)parameters</span><br><span class="line">                       constructingBodyWithBlock:(nullable void (^)(id &lt;AFMultipartFormData&gt; formData))block</span><br><span class="line">                                           error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">    NSMutableURLRequest *request = nil;</span><br><span class="line">    //根据有无构造请求体的block的情况来获取request</span><br><span class="line">    if (block) &#123;</span><br><span class="line">        request = [requestSerializer multipartFormRequestWithMethod:method URLString:URLString parameters:parameters constructingBodyWithBlock:block error:error];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        request = [requestSerializer requestWithMethod:method URLString:URLString parameters:parameters error:error];</span><br><span class="line">    &#125;</span><br><span class="line">    //获得request以后来获取dataTask</span><br><span class="line">    __block NSURLSessionDataTask *dataTask = nil;</span><br><span class="line">    dataTask = [_manager dataTaskWithRequest:request</span><br><span class="line">                           completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *_error) &#123;</span><br><span class="line">                               //响应的统一处理</span><br><span class="line">                               [self handleRequestResult:dataTask responseObject:responseObject error:_error];</span><br><span class="line">                           &#125;];</span><br><span class="line">    return dataTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法，上面的方法调用了下面的来获取最终的NSURLSessionDataTask实例。</p><p>OK，现在我们已经知道了NSURLSessionDataTask实例是如何获取的，再来看一下在addRequest：方法里接下来做的是对序列化失败的处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)addRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">  //序列化失败</span><br><span class="line">    if (requestSerializationError) &#123;</span><br><span class="line">        //请求失败的处理</span><br><span class="line">        [self requestDidFailWithRequest:request error:requestSerializationError];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>requestDidFailWithRequest:方法专门处理请求失败的情况，因为它被包含在统一处理请求回调的方法中，所以在稍后会在讲解统一处理请求回调的方法的时候再详细讲解这个方法。</p><p>继续往下走，到了优先级的映射部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)addRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">    // 优先级的映射</span><br><span class="line">    // !!Available on iOS 8 +</span><br><span class="line">    if ([request.requestTask respondsToSelector:@selector(priority)]) &#123;</span><br><span class="line">        switch (request.requestPriority) &#123;</span><br><span class="line">            case YTKRequestPriorityHigh:</span><br><span class="line">                request.requestTask.priority = NSURLSessionTaskPriorityHigh;</span><br><span class="line">                break;</span><br><span class="line">            case YTKRequestPriorityLow:</span><br><span class="line">                request.requestTask.priority = NSURLSessionTaskPriorityLow;</span><br><span class="line">                break;</span><br><span class="line">            case YTKRequestPriorityDefault:</span><br><span class="line">                /*!!fall through*/</span><br><span class="line">            default:</span><br><span class="line">                request.requestTask.priority = NSURLSessionTaskPriorityDefault;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>requestPriority是YTKBaseRequest的一个枚举属性，它的枚举在YTKBaseRequest.h里面被定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, YTKRequestPriority) &#123;</span><br><span class="line">    YTKRequestPriorityLow = -4L,</span><br><span class="line">    YTKRequestPriorityDefault = 0,</span><br><span class="line">    YTKRequestPriorityHigh = 4,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里，将用户设置的YTKRequestPriority映射到NSURLSessionTask的priority上。</p><p>到这里，我们拿到了task的实例并设置好了优先级，紧接着就是addRequest:方法里的第二个部分：<br>YTKNetworkAgent将request实例放在了一个字典中，保存起来：</p><p><strong>第二部分：把request放入专门用来保存请求的字典中，key为taskIdentifier：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)addRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">  //将request实例放入保存请求的字典中，taskIdentifier为key，request为值</span><br><span class="line">  [self addRequestToRecord:request];</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line">- (void)addRequestToRecord:(YTKBaseRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    //加锁</span><br><span class="line">    Lock();</span><br><span class="line">    _requestsRecord[@(request.requestTask.taskIdentifier)] = request;</span><br><span class="line">    Unlock();</span><br><span class="line">&#125;</span><br><span class="line">#define Lock() pthread_mutex_lock(&amp;_lock)</span><br><span class="line">#define Unlock() pthread_mutex_unlock(&amp;_lock)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，在添加前和添加后是进行了加锁和解锁的处理的。而且request实例被保存的时候，将其task的identifier作为key来保存。</p></blockquote><p>在当前的request被保存以后，就到了最后一步，正式发起请求：</p><p><strong>第三部分：启动task</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (NSURLSessionTask *)sessionTaskForRequest:(YTKBaseRequest *)request error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   [request.requestTask resume];</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到现在为止，我们了解了YTKNetwork里面，一个请求开始之前做的事情：查找可用缓存，生成NSURLSessionTask实例，获取url，requestSerializer，将request放到YTKNetworkAgent的一个字典里等等（详细流程会在稍后给出）。</p><p>那么接下来我们看一下YTKNetwork是如何处理请求的回调的。</p><p>眼尖的同学们可能会注意到，在获取NSURLSessionTask实例的时候，出现了两次“响应的统一处理”的注释，大家可以搜索这个注释就可以找到这个方法：<code>handleRequestResult:responseObject:error:</code>。这个方法负责的是对请求回调的处理，当然包括了成功和失败的情况。我们来看一下在这个方法里都做了什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">//统一处理请求结果，包括成功和失败的情况</span><br><span class="line">- (void)handleRequestResult:(NSURLSessionTask *)task responseObject:(id)responseObject error:(NSError *)error &#123;</span><br><span class="line">    </span><br><span class="line">    //1. 获取task对应的request</span><br><span class="line">    Lock();</span><br><span class="line">    YTKBaseRequest *request = _requestsRecord[@(task.taskIdentifier)];</span><br><span class="line">    Unlock();</span><br><span class="line">    //如果不存在对应的request，则立即返回</span><br><span class="line">    if (!request) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    。。。</span><br><span class="line">    //2. 获取request对应的response</span><br><span class="line">    request.responseObject = responseObject;</span><br><span class="line">    </span><br><span class="line">    //3. 获取responseObject，responseData和responseString</span><br><span class="line">    if ([request.responseObject isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">        </span><br><span class="line">       //3.1 获取 responseData</span><br><span class="line">        request.responseData = responseObject;</span><br><span class="line">        </span><br><span class="line">        //3.2 获取responseString</span><br><span class="line">        request.responseString = [[NSString alloc] initWithData:responseObject encoding:[YTKNetworkUtils stringEncodingWithRequest:request]];</span><br><span class="line">         //3.3 获取responseObject（或responseJSONObject）</span><br><span class="line">        //根据返回的响应的序列化的类型来得到对应类型的响应</span><br><span class="line">        switch (request.responseSerializerType)</span><br><span class="line">        &#123;</span><br><span class="line">            case YTKResponseSerializerTypeHTTP:</span><br><span class="line">                // Default serializer. Do nothing.</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            case YTKResponseSerializerTypeJSON:</span><br><span class="line">                request.responseObject = [self.jsonResponseSerializer responseObjectForResponse:task.response data:request.responseData error:&amp;serializationError];</span><br><span class="line">                request.responseJSONObject = request.responseObject;</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            case YTKResponseSerializerTypeXMLParser:</span><br><span class="line">                request.responseObject = [self.xmlParserResponseSerialzier responseObjectForResponse:task.response data:request.responseData error:&amp;serializationError];</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //4. 判断是否有错误，将错误对象赋值给requestError，改变succeed的布尔值。目的是根据succeed的值来判断到底是进行成功的回调还是失败的回调</span><br><span class="line">    if (error) &#123;</span><br><span class="line">        //如果该方法传入的error不为nil</span><br><span class="line">        succeed = NO;</span><br><span class="line">        requestError = error;</span><br><span class="line">        </span><br><span class="line">    &#125; else if (serializationError) &#123;</span><br><span class="line">        //如果序列化失败了</span><br><span class="line">        succeed = NO;</span><br><span class="line">        requestError = serializationError;</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        </span><br><span class="line">        //即使没有error而且序列化通过，也要验证request是否有效</span><br><span class="line">        succeed = [self validateResult:request error:&amp;validationError];</span><br><span class="line">        requestError = validationError;</span><br><span class="line">    &#125;</span><br><span class="line">    //5. 根据succeed的布尔值来调用相应的处理</span><br><span class="line">    if (succeed) &#123;</span><br><span class="line">        //请求成功的处理</span><br><span class="line">        [self requestDidSucceedWithRequest:request];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        </span><br><span class="line">        //请求失败的处理</span><br><span class="line">        [self requestDidFailWithRequest:request error:requestError];</span><br><span class="line">    &#125;</span><br><span class="line">     //6. 回调完成的处理</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        //6.1 在字典里移除当前request</span><br><span class="line">        [self removeRequestFromRecord:request];</span><br><span class="line">         //6.2 清除所有block</span><br><span class="line">        [request clearCompletionBlock];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单讲解一下上面的代码：</p><ul><li>首先通过task的identifier值从YTKNetworkAgent保存的字典里获取对应的请求。</li><li>然后将获得的responseObject进行处理，将处理后获得的responseObject，responseData和responseString赋值给当前的请求实例request。</li><li>再根据这些值的获取情况来判断最终回调的成败（改变succeed的值）。</li><li>最后根据succeed的值来进行成功和失败的回调。</li></ul><p>这里先重点介绍一下是如何判断json的有效性的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">//判断code是否符合范围和json的有效性</span><br><span class="line">- (BOOL)validateResult:(YTKBaseRequest *)request error:(NSError * _Nullable __autoreleasing *)error &#123;</span><br><span class="line">    </span><br><span class="line">    //1. 判断code是否在200~299之间</span><br><span class="line">    BOOL result = [request statusCodeValidator];</span><br><span class="line">    </span><br><span class="line">    if (!result) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            *error = [NSError errorWithDomain:YTKRequestValidationErrorDomain code:YTKRequestValidationErrorInvalidStatusCode userInfo:@&#123;NSLocalizedDescriptionKey:@&quot;Invalid status code&quot;&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //2. result 存在的情况判断json是否有效</span><br><span class="line">    id json = [request responseJSONObject];</span><br><span class="line">    id validator = [request jsonValidator];</span><br><span class="line">    </span><br><span class="line">    if (json &amp;&amp; validator) &#123;</span><br><span class="line">        //通过json和validator来判断json是否有效</span><br><span class="line">        result = [YTKNetworkUtils validateJSON:json withValidator:validator];</span><br><span class="line">        </span><br><span class="line">        //如果json无效</span><br><span class="line">        if (!result) &#123;</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                *error = [NSError errorWithDomain:YTKRequestValidationErrorDomain code:YTKRequestValidationErrorInvalidJSONFormat userInfo:@&#123;NSLocalizedDescriptionKey:@&quot;Invalid JSON format&quot;&#125;];</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，首先，用statusCodeValidator方法判断响应的code是否在正确的范围:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseReqiest.m</span><br><span class="line">- (BOOL)statusCodeValidator &#123;</span><br><span class="line">    NSInteger statusCode = [self responseStatusCode];</span><br><span class="line">    return (statusCode &gt;= 200 &amp;&amp; statusCode &lt;= 299);</span><br><span class="line">&#125;</span><br><span class="line">- (NSInteger)responseStatusCode &#123;</span><br><span class="line">    return self.response.statusCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再判断json的有效性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkUtils.m</span><br><span class="line">//判断json的有效性</span><br><span class="line">+ (BOOL)validateJSON:(id)json withValidator:(id)jsonValidator &#123;</span><br><span class="line">    if ([json isKindOfClass:[NSDictionary class]] &amp;&amp;</span><br><span class="line">        [jsonValidator isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">        NSDictionary * dict = json;</span><br><span class="line">        NSDictionary * validator = jsonValidator;</span><br><span class="line">        BOOL result = YES;</span><br><span class="line">        NSEnumerator * enumerator = [validator keyEnumerator];</span><br><span class="line">        NSString * key;</span><br><span class="line">        while ((key = [enumerator nextObject]) != nil) &#123;</span><br><span class="line">            id value = dict[key];</span><br><span class="line">            id format = validator[key];</span><br><span class="line">            if ([value isKindOfClass:[NSDictionary class]]</span><br><span class="line">                || [value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">                result = [self validateJSON:value withValidator:format];</span><br><span class="line">                if (!result) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if ([value isKindOfClass:format] == NO &amp;&amp;</span><br><span class="line">                    [value isKindOfClass:[NSNull class]] == NO) &#123;</span><br><span class="line">                    result = NO;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125; else if ([json isKindOfClass:[NSArray class]] &amp;&amp;</span><br><span class="line">               [jsonValidator isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">        NSArray * validatorArray = (NSArray *)jsonValidator;</span><br><span class="line">        if (validatorArray.count &gt; 0) &#123;</span><br><span class="line">            NSArray * array = json;</span><br><span class="line">            NSDictionary * validator = jsonValidator[0];</span><br><span class="line">            for (id item in array) &#123;</span><br><span class="line">                BOOL result = [self validateJSON:item withValidator:validator];</span><br><span class="line">                if (!result) &#123;</span><br><span class="line">                    return NO;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125; else if ([json isKindOfClass:jsonValidator]) &#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，YTKNetworkUtils这个类是在YTKNetworkPirvate里面定义的，YTKNetworkPirvate里面有一些工具类的方法，在后面还会遇到。</p><p>在验证返回的JSON数据是否有效以后，就可以进行回调了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)handleRequestResult:(NSURLSessionTask *)task responseObject:(id)responseObject error:(NSError *)error &#123;</span><br><span class="line">    ...</span><br><span class="line">    //5. 根据succeed的布尔值来调用相应的处理</span><br><span class="line">    if (succeed) &#123;</span><br><span class="line">        //请求成功的处理</span><br><span class="line">        [self requestDidSucceedWithRequest:request];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        </span><br><span class="line">        //请求失败的处理</span><br><span class="line">        [self requestDidFailWithRequest:request error:requestError];</span><br><span class="line">    &#125;</span><br><span class="line">    //6. 回调完成的处理</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        //6.1 在字典里移除当前request</span><br><span class="line">        [self removeRequestFromRecord:request];</span><br><span class="line">         //6.2 清除所有block</span><br><span class="line">        [request clearCompletionBlock];</span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来分别看一下请求成功的处理和失败的处理：</p><p>请求成功的处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">//请求成功：主要负责将结果写入缓存&amp;回调成功的代理和block</span><br><span class="line">- (void)requestDidSucceedWithRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        //写入缓存 </span><br><span class="line">        [request requestCompletePreprocessor];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        //告诉Accessories请求就要停止了</span><br><span class="line">        [request toggleAccessoriesWillStopCallBack];</span><br><span class="line">        </span><br><span class="line">        //在真正的回调之前做的处理,用户自定义</span><br><span class="line">        [request requestCompleteFilter];</span><br><span class="line">        //如果有代理，则调用成功的代理</span><br><span class="line">        if (request.delegate != nil) &#123;</span><br><span class="line">            [request.delegate requestFinished:request];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //如果传入了成功回调的代码，则调用</span><br><span class="line">        if (request.successCompletionBlock) &#123;</span><br><span class="line">            request.successCompletionBlock(request);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //告诉Accessories请求已经结束了</span><br><span class="line">        [request toggleAccessoriesDidStopCallBack];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我么可以看到，在请求成功以后，第一个做的是写入缓存，我们来看一下<code>requestCompletePreprocessor</code>方法的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">- (void)requestCompletePreprocessor &#123;</span><br><span class="line">    </span><br><span class="line">    [super requestCompletePreprocessor];</span><br><span class="line">    //是否异步将responseData写入缓存（写入缓存的任务放在专门的队列进行）</span><br><span class="line">    if (self.writeCacheAsynchronously) &#123;</span><br><span class="line">        </span><br><span class="line">        dispatch_async(ytkrequest_cache_writing_queue(), ^&#123;</span><br><span class="line">            //写入缓存文件</span><br><span class="line">            [self saveResponseDataToCacheFile:[super responseData]];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">         //写入缓存文件</span><br><span class="line">        [self saveResponseDataToCacheFile:[super responseData]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//写入缓存文件</span><br><span class="line">- (void)saveResponseDataToCacheFile:(NSData *)data &#123;</span><br><span class="line">    </span><br><span class="line">    if ([self cacheTimeInSeconds] &gt; 0 &amp;&amp; ![self isDataFromCache]) &#123;</span><br><span class="line">        if (data != nil) &#123;</span><br><span class="line">            @try &#123;</span><br><span class="line">                // 1. 保存request的responseData到cacheFilePath</span><br><span class="line">                [data writeToFile:[self cacheFilePath] atomically:YES];</span><br><span class="line">                // 2. 保存request的metadata到cacheMetadataFilePath</span><br><span class="line">                YTKCacheMetadata *metadata = [[YTKCacheMetadata alloc] init];</span><br><span class="line">                metadata.version = [self cacheVersion];</span><br><span class="line">                metadata.sensitiveDataString = ((NSObject *)[self cacheSensitiveData]).description;</span><br><span class="line">                metadata.stringEncoding = [YTKNetworkUtils stringEncodingWithRequest:self];</span><br><span class="line">                metadata.creationDate = [NSDate date];</span><br><span class="line">                metadata.appVersionString = [YTKNetworkUtils appVersionString];</span><br><span class="line">                [NSKeyedArchiver archiveRootObject:metadata toFile:[self cacheMetadataFilePath]];</span><br><span class="line">                </span><br><span class="line">            &#125; @catch (NSException *exception) &#123;</span><br><span class="line">                YTKLog(@&quot;Save cache failed, reason = %@&quot;, exception.reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看一下写入缓存操作的执行条件：当<code>cacheTimeInSeconds</code>方法返回大于0并且<code>isDataFromCache</code>为NO的时候会进行写入缓存。</p><p><code>cacheTimeInSeconds</code>方法返回的是缓存保存的时间，它最初定义在YTKBaseRquest里面，默认返回是-1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.m</span><br><span class="line">- (NSInteger)cacheTimeInSeconds &#123;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说YTKNetwork默认是不进行缓存的，如果用户需要做缓存，则需要在自定义的request类里面返回一个大于0的整数，这个整数的单位是秒。</p><p><code>isDataFromCache</code>属性在上面讲解发送请求部分里的查询缓存的步骤里有介绍。在这里再强调一下：<code>isDataFromCache</code>的默认值是NO。在请求发起之前，-<br>查询缓存的时候：</p><ul><li>如果发现缓存不可用（或忽略缓存），则立即发送请求，这个时候，isDataFromCache的值不做更改，仍然是NO。</li><li>如果发现缓存可用（在不忽略缓存的情况下），就要将isDataFromCache属性设置为YES，说明将不需要发送请求，直接在里获取数据了。</li></ul><p>即是说，如果发送了请求，则<code>isDataFromCache</code>一定是NO的，那么在上面这个判断里面，(!isDataFromCache)就一定为YES了。</p><p>因此，如果用户设置了缓存保存的时间，在请求返回成功后，就会写入缓存。</p><p>我们接着往下看，对于缓存，YTKNetwork保存的是两种缓存：<br>第一种是纯粹的NSData类型的实例。第二种是描述当前NSData实例的元数据YTKCacheMetadata的实例，从它的属性来看，分为这几种：</p><ol><li>缓存的版本，默认返回为0，用户可以自定义。</li><li>敏感数据，类型为id，默认返回nil，用户可以自定义。</li><li>NSString的编码格式，在YTKNetworkPrivate内的YTKNetworkUtils实现。</li><li>元数据的创建时间。</li><li>app的版本号，在YTKNetworkPrivate内的YTKNetworkUtils实现。</li></ol><p>在将元数据的实例的这些属性都被赋值以后，将元数据实例序列化写入磁盘中。保存的路径通过<code>cacheMetadataFilePath</code>方法获取。</p><p>现在知道了YTKRequest的缓存内容，我们来看一下这两种缓存的位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//YTKRequest.m</span><br><span class="line">//纯NSData数据缓存的文件名</span><br><span class="line">- (NSString *)cacheFileName &#123;</span><br><span class="line">    NSString *requestUrl = [self requestUrl];</span><br><span class="line">    NSString *baseUrl = [YTKNetworkConfig sharedConfig].baseUrl;</span><br><span class="line">    id argument = [self cacheFileNameFilterForRequestArgument:[self requestArgument]];</span><br><span class="line">    NSString *requestInfo = [NSString stringWithFormat:@&quot;Method:%ld Host:%@ Url:%@ Argument:%@&quot;,</span><br><span class="line">                             (long)[self requestMethod], baseUrl, requestUrl, argument];</span><br><span class="line">    NSString *cacheFileName = [YTKNetworkUtils md5StringFromString:requestInfo];</span><br><span class="line">    return cacheFileName;</span><br><span class="line">&#125;</span><br><span class="line">//纯NSData数据的缓存位置</span><br><span class="line">- (NSString *)cacheFilePath &#123;</span><br><span class="line">    NSString *cacheFileName = [self cacheFileName];</span><br><span class="line">    NSString *path = [self cacheBasePath];</span><br><span class="line">    path = [path stringByAppendingPathComponent:cacheFileName];</span><br><span class="line">    return path;</span><br><span class="line">&#125;</span><br><span class="line">//元数据的缓存位置</span><br><span class="line">- (NSString *)cacheMetadataFilePath &#123;</span><br><span class="line">    NSString *cacheMetadataFileName = [NSString stringWithFormat:@&quot;%@.metadata&quot;, [self cacheFileName]];</span><br><span class="line">    NSString *path = [self cacheBasePath];</span><br><span class="line">    path = [path stringByAppendingPathComponent:cacheMetadataFileName];</span><br><span class="line">    return path;</span><br><span class="line">&#125;</span><br><span class="line">//创建用户保存所有YTKNetwork缓存的文件夹</span><br><span class="line">- (NSString *)cacheBasePath &#123;</span><br><span class="line">    </span><br><span class="line">    //获取全路径</span><br><span class="line">    NSString *pathOfLibrary = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) objectAtIndex:0];</span><br><span class="line">    NSString *path = [pathOfLibrary stringByAppendingPathComponent:@&quot;LazyRequestCache&quot;];</span><br><span class="line">    // YTKCacheDirPathFilterProtocol定义了用户可以自定义存储位置的代理方法</span><br><span class="line">    NSArray&lt;id&lt;YTKCacheDirPathFilterProtocol&gt;&gt; *filters = [[YTKNetworkConfig sharedConfig] cacheDirPathFilters];</span><br><span class="line">    if (filters.count &gt; 0) &#123;</span><br><span class="line">        for (id&lt;YTKCacheDirPathFilterProtocol&gt; f in filters) &#123;</span><br><span class="line">            path = [f filterCacheDirPath:path withRequest:self];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //创建文件夹</span><br><span class="line">    [self createDirectoryIfNeeded:path];</span><br><span class="line">    return path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，纯NSData数据缓存的文件名包含了请求方法（GET,POST..），baseURL，requestURL，请求参数拼接的字符串再进行md5加密而成。</p><p>而元数据的的文件名则在纯NSData数据缓存的文件名后面加上了.metadata后缀。</p><p>为了更形象地看到这两种缓存，我将缓存的保存时间设置为200秒之后再请求一次，然后打开文件夹找到了它们：</p><p><img src="http://upload-images.jianshu.io/upload_images/859001-6c5f41fbe2993059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>而且我们也确认了保存所有YTKNetwork缓存的文件夹的名字为LazyRequestCache。</p><p>OK，现在我们知道了在请求成功回调后的缓存写入，接下来看一下是如何回调的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)handleRequestResult:(NSURLSessionTask *)task responseObject:(id)responseObject error:(NSError *)error &#123;</span><br><span class="line">    ...</span><br><span class="line">    YTKRequest *strongSelf = self;</span><br><span class="line">    //6. 执行回调</span><br><span class="line">    //6.1 请求完成的代理</span><br><span class="line">    [strongSelf.delegate requestFinished:strongSelf];</span><br><span class="line">    //6.2 请求成功的block</span><br><span class="line">    if (strongSelf.successCompletionBlock) &#123;</span><br><span class="line">        strongSelf.successCompletionBlock(strongSelf);</span><br><span class="line">    &#125;</span><br><span class="line">    //7. 把成功和失败的block都设置为nil，避免循环引用</span><br><span class="line">    [strongSelf clearCompletionBlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到,代理的回调是先于block的回调的。而且在block回调结束以后，会立即调用clearCompletionBlock方法将block清空。该方法的实现是在YTKBaseRequest里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.m</span><br><span class="line">- (void)clearCompletionBlock &#123;</span><br><span class="line">    // 清空请求结束的block，避免循环引用</span><br><span class="line">    self.successCompletionBlock = nil;</span><br><span class="line">    self.failureCompletionBlock = nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们知道了请求成功的处理，那么再来看一下请求失败时的处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">//请求失败</span><br><span class="line">- (void)requestDidFailWithRequest:(YTKBaseRequest *)request error:(NSError *)error &#123;</span><br><span class="line">    </span><br><span class="line">    request.error = error;</span><br><span class="line">    YTKLog(@&quot;Request %@ failed, status code = %ld, error = %@&quot;,</span><br><span class="line">           NSStringFromClass([request class]), (long)request.responseStatusCode, error.localizedDescription);</span><br><span class="line">    // 储存未完成的下载数据</span><br><span class="line">    NSData *incompleteDownloadData = error.userInfo[NSURLSessionDownloadTaskResumeData];</span><br><span class="line">    if (incompleteDownloadData) &#123;</span><br><span class="line">        [incompleteDownloadData writeToURL:[self incompleteDownloadTempPathForDownloadPath:request.resumableDownloadPath] atomically:YES];</span><br><span class="line">    &#125;</span><br><span class="line">    // Load response from file and clean up if download task failed.</span><br><span class="line">    //如果下载任务失败，则取出对应的响应文件并清空</span><br><span class="line">    if ([request.responseObject isKindOfClass:[NSURL class]]) &#123;</span><br><span class="line">        NSURL *url = request.responseObject;</span><br><span class="line">        </span><br><span class="line">        //isFileURL：是否是文件，如果是，则可以再isFileURL获取；&amp;&amp;后面是再次确认是否存在改url对应的文件</span><br><span class="line">        if (url.isFileURL &amp;&amp; [[NSFileManager defaultManager] fileExistsAtPath:url.path]) &#123;</span><br><span class="line">            </span><br><span class="line">            //将url的data和string赋给request</span><br><span class="line">            request.responseData = [NSData dataWithContentsOfURL:url];</span><br><span class="line">            request.responseString = [[NSString alloc] initWithData:request.responseData encoding:[YTKNetworkUtils stringEncodingWithRequest:request]];</span><br><span class="line">            [[NSFileManager defaultManager] removeItemAtURL:url error:nil];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //清空request</span><br><span class="line">        request.responseObject = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        //请求失败的预处理，YTK没有定义，需要用户定义</span><br><span class="line">        [request requestFailedPreprocessor];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        //告诉Accessories请求就要停止了</span><br><span class="line">        [request toggleAccessoriesWillStopCallBack];</span><br><span class="line">        </span><br><span class="line">        //在真正的回调之前做的处理</span><br><span class="line">        [request requestFailedFilter];</span><br><span class="line">        //如果有代理，就调用代理</span><br><span class="line">        if (request.delegate != nil) &#123;</span><br><span class="line">            [request.delegate requestFailed:request];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //如果传入了失败回调的block代码，就调用block</span><br><span class="line">        if (request.failureCompletionBlock) &#123;</span><br><span class="line">            request.failureCompletionBlock(request);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //告诉Accessories请求已经停止了</span><br><span class="line">        [request toggleAccessoriesDidStopCallBack];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法里，首先判断了当前任务是否为下载任务，如果是，则储存当前已经下载好的data到<code>resumableDownloadPath</code>里面。而如果下载任务失败，则将其对应的在本地保存的路径上的文件清空。</p><p>到这里，我已经把单个请求从配置，发送，响应，回调的步骤都讲解完了。为了帮助大家理解整个过程，这里提供了整个的流程图：</p><p><img src="http://upload-images.jianshu.io/upload_images/859001-eab27afc98b324bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们说YTKNetworkAgent是请求的发送者，既然有发送，也就会有取消等操作，这就不得不提它的另外两个接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.h</span><br><span class="line">///  取消某个request</span><br><span class="line">- (void)cancelRequest:(YTKBaseRequest *)request;</span><br><span class="line">///  取消所有添加的request</span><br><span class="line">- (void)cancelAllRequests;</span><br></pre></td></tr></table></figure><p>首先我们看下取消某个request这个方法的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">///  取消某个request</span><br><span class="line">- (void)cancelRequest:(YTKBaseRequest *)request &#123;</span><br><span class="line">    NSParameterAssert(request != nil);</span><br><span class="line">    //获取request的task，并取消</span><br><span class="line">    [request.requestTask cancel];</span><br><span class="line">    //从字典里移除当前request</span><br><span class="line">    [self removeRequestFromRecord:request];</span><br><span class="line">    //清理所有block</span><br><span class="line">    [request clearCompletionBlock];</span><br><span class="line">&#125;</span><br><span class="line">//从字典里移除某request</span><br><span class="line">- (void)removeRequestFromRecord:(YTKBaseRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    //加锁</span><br><span class="line">    Lock();</span><br><span class="line">    [_requestsRecord removeObjectForKey:@(request.requestTask.taskIdentifier)];</span><br><span class="line">    YTKLog(@&quot;Request queue size = %zd&quot;, [_requestsRecord count]);</span><br><span class="line">    Unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取消所有在字典里添加的request：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//YTKNetworkAgent.m</span><br><span class="line">- (void)cancelAllRequests &#123;</span><br><span class="line">    Lock();</span><br><span class="line">    NSArray *allKeys = [_requestsRecord allKeys];</span><br><span class="line">    Unlock();</span><br><span class="line">    if (allKeys &amp;&amp; allKeys.count &gt; 0) &#123;</span><br><span class="line">        NSArray *copiedKeys = [allKeys copy];</span><br><span class="line">        for (NSNumber *key in copiedKeys) &#123;</span><br><span class="line">            Lock();</span><br><span class="line">            YTKBaseRequest *request = _requestsRecord[key];</span><br><span class="line">            Unlock();</span><br><span class="line">            //stop每个请求</span><br><span class="line">            [request stop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个stop方法是在YTKBaseRequest里面定义的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//YTKBaseRequest.m</span><br><span class="line">- (void)stop &#123;</span><br><span class="line">    </span><br><span class="line">    //告诉Accessories将要回调了</span><br><span class="line">    [self toggleAccessoriesWillStopCallBack];</span><br><span class="line">    </span><br><span class="line">    //清空代理</span><br><span class="line">    self.delegate = nil;</span><br><span class="line">    </span><br><span class="line">    //调用agent的取消某个request的方法</span><br><span class="line">    [[YTKNetworkAgent sharedAgent] cancelRequest:self];</span><br><span class="line">    </span><br><span class="line">    //告诉Accessories回调完成了</span><br><span class="line">    [self toggleAccessoriesDidStopCallBack];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，看到这里，相信你对YTKNetwork单个请求的流程有了比较好的了解了，下面我们来看一下YTKNetwork的高级功能：批量请求和链式请求。</p><h3 id="3-3-批量请求和链式请求"><a href="#3-3-批量请求和链式请求" class="headerlink" title="3.3 批量请求和链式请求"></a>3.3 批量请求和链式请求</h3><p>YTKNetwork支持的批量请求有两种：</p><ol><li>批量请求：多个请求几乎同时发起。</li><li>链式请求：当前个请求结束后才能发起下一个请求。</li></ol><p>其实无论是批量请求，还是链式请求，我们都可以想到很可能是用一个数组将这些请求管理了起来。那么具体是如何实现的呢？</p><p>我们首先来看一下YTKNetwork是如何实现批量请求的。</p><h4 id="3-31批量请求"><a href="#3-31批量请求" class="headerlink" title="3.31批量请求"></a>3.31批量请求</h4><p>YTKNetwork 使用YTKBatchRequest类来发送无序的批量请求，它需要用一个含有YTKRequest子类的数组来初始化，并将这个数组保存起来赋给它的<code>_requestArray</code>实例变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//YTKBatchRequest.m</span><br><span class="line">- (instancetype)initWithRequestArray:(NSArray&lt;YTKRequest *&gt; *)requestArray &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        </span><br><span class="line">        //保存为属性</span><br><span class="line">        _requestArray = [requestArray copy];</span><br><span class="line">        //批量请求完成的数量初始化为0</span><br><span class="line">        _finishedCount = 0;</span><br><span class="line">        </span><br><span class="line">        //类型检查，所有元素都必须为YTKRequest或的它的子类，否则强制初始化失败</span><br><span class="line">        for (YTKRequest * req in _requestArray) &#123;</span><br><span class="line">            if (![req isKindOfClass:[YTKRequest class]]) &#123;</span><br><span class="line">                YTKLog(@&quot;Error, request item must be YTKRequest instance.&quot;);</span><br><span class="line">                return nil;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化以后，我们就可以调用start方法来发起当前YTKBatchRequest实例所管理的所有请求了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//YTKBatchRequest.m</span><br><span class="line">//batch请求开始</span><br><span class="line">- (void)startWithCompletionBlockWithSuccess:(void (^)(YTKBatchRequest *batchRequest))success</span><br><span class="line">                                    failure:(void (^)(YTKBatchRequest *batchRequest))failure &#123;</span><br><span class="line">    [self setCompletionBlockWithSuccess:success failure:failure];</span><br><span class="line">    [self start];</span><br><span class="line">&#125;</span><br><span class="line">//设置成功和失败的block</span><br><span class="line">- (void)setCompletionBlockWithSuccess:(void (^)(YTKBatchRequest *batchRequest))success</span><br><span class="line">                              failure:(void (^)(YTKBatchRequest *batchRequest))failure &#123;</span><br><span class="line">    self.successCompletionBlock = success;</span><br><span class="line">    self.failureCompletionBlock = failure;</span><br><span class="line">&#125;</span><br><span class="line">- (void)start &#123;</span><br><span class="line">    </span><br><span class="line">    //如果batch里第一个请求已经成功结束，则不能再start</span><br><span class="line">    if (_finishedCount &gt; 0) &#123;</span><br><span class="line">        YTKLog(@&quot;Error! Batch request has already started.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //最开始设定失败的request为nil</span><br><span class="line">    _failedRequest = nil;</span><br><span class="line">    </span><br><span class="line">    //使用YTKBatchRequestAgent来管理当前的批量请求</span><br><span class="line">    [[YTKBatchRequestAgent sharedAgent] addBatchRequest:self];</span><br><span class="line">    [self toggleAccessoriesWillStartCallBack];</span><br><span class="line">    </span><br><span class="line">    //遍历所有request，并开始请求</span><br><span class="line">    for (YTKRequest * req in _requestArray) &#123;</span><br><span class="line">        req.delegate = self;</span><br><span class="line">        [req clearCompletionBlock];</span><br><span class="line">        [req start];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们可以看出：</p><ol><li>在至少完成了其中一个请求以后，调用当前YTKBatchRequest实例的start方法会立即返回，否则可以无限制start。</li><li>YTKBatchRequest的实例是需要在发起请求之前，要被添加在YTKBatchRequestAgent里的数组里：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//YTKBatchRequestAgent.m</span><br><span class="line">- (void)addBatchRequest:(YTKBatchRequest *)request &#123;</span><br><span class="line">    @synchronized(self) &#123;</span><br><span class="line">        [_requestArray addObject:request];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>因为是批量发送请求，所以在这里是遍历YTKBatchRequest实例的_requestArray并逐一发送请求。因为已经封装好了单个的请求，所以在这里直接start就好了。</li></ol><p>发起请求以后，在每个请求回调的代理方法里，来判断这次批量请求是否成功。</p><p>YTKRequest子类成功的回调：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//YTKBatchRequest.m</span><br><span class="line">#pragma mark - Network Request Delegate</span><br><span class="line">- (void)requestFinished:(YTKRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    //某个request成功后，首先让_finishedCount + 1</span><br><span class="line">    _finishedCount++;</span><br><span class="line">    </span><br><span class="line">    //如果_finishedCount等于_requestArray的个数，则判定当前batch请求成功</span><br><span class="line">    if (_finishedCount == _requestArray.count) &#123;</span><br><span class="line">        </span><br><span class="line">        //调用即将结束的代理</span><br><span class="line">        [self toggleAccessoriesWillStopCallBack];</span><br><span class="line">        </span><br><span class="line">        //调用请求成功的代理</span><br><span class="line">        if ([_delegate respondsToSelector:@selector(batchRequestFinished:)]) &#123;</span><br><span class="line">            [_delegate batchRequestFinished:self];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //调用批量请求成功的block</span><br><span class="line">        if (_successCompletionBlock) &#123;</span><br><span class="line">            _successCompletionBlock(self);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //清空成功和失败的block</span><br><span class="line">        [self clearCompletionBlock];</span><br><span class="line">        </span><br><span class="line">        //调用请求结束的代理</span><br><span class="line">        [self toggleAccessoriesDidStopCallBack];</span><br><span class="line">        </span><br><span class="line">        //从YTKBatchRequestAgent里移除当前的batch</span><br><span class="line">        [[YTKBatchRequestAgent sharedAgent] removeBatchRequest:self];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在某个请求的回调成功以后，会让成功计数+1。在+1以后，如果成功计数和当前批量请求数组里元素的个数相等，则判定当前批量请求成功，并进行当前批量请求的成功回调。</p><p>接下来我们看一下某个请求失败的处理：</p><p>YTKReques子类失败的回调：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//YTKBatchRequest.m</span><br><span class="line">- (void)requestFailed:(YTKRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    _failedRequest = request;</span><br><span class="line">    </span><br><span class="line">    //调用即将结束的代理</span><br><span class="line">    [self toggleAccessoriesWillStopCallBack];</span><br><span class="line">    </span><br><span class="line">    //停止batch里所有的请求</span><br><span class="line">    for (YTKRequest *req in _requestArray) &#123;</span><br><span class="line">        [req stop];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //调用请求失败的代理</span><br><span class="line">    if ([_delegate respondsToSelector:@selector(batchRequestFailed:)]) &#123;</span><br><span class="line">        [_delegate batchRequestFailed:self];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //调用请求失败的block</span><br><span class="line">    if (_failureCompletionBlock) &#123;</span><br><span class="line">        _failureCompletionBlock(self);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //清空成功和失败的block</span><br><span class="line">    [self clearCompletionBlock];</span><br><span class="line">    //调用请求结束的代理</span><br><span class="line">    [self toggleAccessoriesDidStopCallBack];</span><br><span class="line">    </span><br><span class="line">    //从YTKBatchRequestAgent里移除当前的batch</span><br><span class="line">    [[YTKBatchRequestAgent sharedAgent] removeBatchRequest:self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里不难看出，当前批量请求里面只要有一个request失败了，则判定当前批量请求失败。<br>而当前批量请求失败的回调（代理和block）会传入这个失败的request的实例。而且这个失败的request会先被赋给_failedRequest这个实例变量里。</p><p>总的来说，YTKBatchRequest类用一个数组来保存当前批量请求所要处理的所有request实例。而且用一个成功计数来判定当前批量请求整体是否成功。而当前批量请求的失败则是由这些request实例里面第一个失败的实例导致的：只要有一个request回调失败了，则立即停止其他的所有请求并调用当前批量请求的失败回调。</p><p>现在讲完了批量请求的处理，我们接下来看一下链式请求的处理。</p><h4 id="3-32链式请求"><a href="#3-32链式请求" class="headerlink" title="3.32链式请求"></a>3.32链式请求</h4><p>和批量请求类似，处理链式请求的类是YTKChainRequest，并且用YTKChainRequestAgent单例来管理YTKChainRequest的实例。</p><p>但是和批量请求不同的是，YTKChainRequest实例的初始化是不需要传入一个含有request的数组的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//YTKChainRequest.m</span><br><span class="line">- (instancetype)init &#123;</span><br><span class="line">    </span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        </span><br><span class="line">        //下一个请求的index</span><br><span class="line">        _nextRequestIndex = 0;</span><br><span class="line">        </span><br><span class="line">        //保存链式请求的数组</span><br><span class="line">        _requestArray = [NSMutableArray array];</span><br><span class="line">        </span><br><span class="line">        //保存回调的数组</span><br><span class="line">        _requestCallbackArray = [NSMutableArray array];</span><br><span class="line">        </span><br><span class="line">        //空回调，用来填充用户没有定义的回调block</span><br><span class="line">        _emptyCallback = ^(YTKChainRequest *chainRequest, YTKBaseRequest *baseRequest) &#123;</span><br><span class="line">            // do nothing</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是它提供了添加和删除request的接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//YTKChainRequest.m</span><br><span class="line">//在当前chain添加request和callback</span><br><span class="line">- (void)addRequest:(YTKBaseRequest *)request callback:(YTKChainCallback)callback &#123;</span><br><span class="line">    </span><br><span class="line">    //保存当前请求</span><br><span class="line">    [_requestArray addObject:request];</span><br><span class="line">    </span><br><span class="line">    if (callback != nil) &#123;</span><br><span class="line">        [_requestCallbackArray addObject:callback];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //之所以特意弄一个空的callback，是为了避免在用户没有给当前request的callback传值的情况下，造成request数组和callback数组的不对称</span><br><span class="line">        [_requestCallbackArray addObject:_emptyCallback];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在给YTKChainRequest实例添加request实例的同时，还可以传入回调的block。当然也可以不传，但是为了保持request数组和callback数组的对称性（因为回调的时候是需要根据request数组里的index来获取callback数组里对应的callback的），YTKNetwork给我们提供了一个空的block。</p><p>我们接着看一下链式请求的发起：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//YTKChainRequest.m</span><br><span class="line">- (void)start &#123;</span><br><span class="line">    //如果第1个请求已经结束，就不再重复start了</span><br><span class="line">    if (_nextRequestIndex &gt; 0) &#123;</span><br><span class="line">        YTKLog(@&quot;Error! Chain request has already started.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果请求队列数组里面还有request，则取出并start</span><br><span class="line">    if ([_requestArray count] &gt; 0) &#123;</span><br><span class="line">        [self toggleAccessoriesWillStartCallBack];</span><br><span class="line">        //取出当前request并start</span><br><span class="line">        [self startNextRequest];</span><br><span class="line">        //在当前的_requestArray添加当前的chain（YTKChainRequestAgent允许有多个chain）</span><br><span class="line">        [[YTKChainRequestAgent sharedAgent] addChainRequest:self];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        YTKLog(@&quot;Error! Chain request array is empty.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，YTKChainRequest用<code>_nextRequestIndex</code>来保存下一个请求的index，它的默认值是0。而它的值的累加是在当前请求结束后，发起下面的请求之前进行的。所以说，如果已经完成了请求队列里的第一个请求，就无法在启动当前的请求队列了，会立即返回。</p><p>这里<code>startNextRequest</code>方法比较重要：在判断请求队列数组里面还有request的话，就会调用这个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//YTKChainRequest.m</span><br><span class="line">- (BOOL)startNextRequest &#123;</span><br><span class="line">    if (_nextRequestIndex &lt; [_requestArray count]) &#123;</span><br><span class="line">        YTKBaseRequest *request = _requestArray[_nextRequestIndex];</span><br><span class="line">        _nextRequestIndex++;</span><br><span class="line">        request.delegate = self;</span><br><span class="line">        [request clearCompletionBlock];</span><br><span class="line">        [request start];</span><br><span class="line">        return YES;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有两个作用：</p><ol><li>第一个作用是判断是否能进行下一个request（如果index 大于或等于 request数组的count的话就不能在request数组里取出request，因为会造成数组越界）</li><li>第二个作用是如果可以进行下一个request，则发起该request。并将<code>_nextRequestIndex+1</code>。</li></ol><p>所以和批量请求不同的是，链式请求的请求队列是可以变动的，用户可以无限制地添加请求。只要请求队列里面有请求存在，则YTKChainRequest就会继续发送它们。</p><p>现在我们知道了YTKChainRequest的发送，接下来看一下回调部分:</p><p>和YTKBatchRequest相同的是，YTKChainRequest也实现了YTKRequest的代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//某个request请求成功的代理的实现</span><br><span class="line">//YTKChainRequest.m</span><br><span class="line">- (void)requestFinished:(YTKBaseRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    //1. 取出当前的request和callback，进行回调</span><br><span class="line">    NSUInteger currentRequestIndex = _nextRequestIndex - 1;</span><br><span class="line">    YTKChainCallback callback = _requestCallbackArray[currentRequestIndex];</span><br><span class="line">    callback(self, request);//注意：这个回调只是当前request的回调，而不是当前chain全部完成的回调。当前chain的回调在下面</span><br><span class="line">    </span><br><span class="line">    //2. 如果不能再继续请求了，说明当前成功的request已经是chain里最后一个request，也就是说当前chain里所有的回调都成功了，即这个chain请求成功了。</span><br><span class="line">    if (![self startNextRequest]) &#123;</span><br><span class="line">        [self toggleAccessoriesWillStopCallBack];</span><br><span class="line">        if ([_delegate respondsToSelector:@selector(chainRequestFinished:)]) &#123;</span><br><span class="line">            [_delegate chainRequestFinished:self];</span><br><span class="line">            [[YTKChainRequestAgent sharedAgent] removeChainRequest:self];</span><br><span class="line">        &#125;</span><br><span class="line">        [self toggleAccessoriesDidStopCallBack];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在某个request回调成功以后，会根据当前请求的index（_nextRequestIndex-1）来获取其对应的block并调用。接着，再调用<code>startNextRequest</code>方法来判断当前的YTKChainRequest的请求队列里面是否还有其他的请求了：</p><ul><li>如果没有了，则调用当前YTKChainRequest的最终成功的回调。</li><li>如果还有，则发起接下来的request（按顺序）。</li></ul><p>接下来我们再看一下某个request失败的代理的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//YTKChainRequest.m</span><br><span class="line">//某个reqeust请求失败的代理</span><br><span class="line">- (void)requestFailed:(YTKBaseRequest *)request &#123;</span><br><span class="line">    </span><br><span class="line">    //如果当前 chain里的某个request失败了，则判定当前chain失败。调用当前chain失败的回调</span><br><span class="line">    [self toggleAccessoriesWillStopCallBack];</span><br><span class="line">    if ([_delegate respondsToSelector:@selector(chainRequestFailed:failedBaseRequest:)]) &#123;</span><br><span class="line">        [_delegate chainRequestFailed:self failedBaseRequest:request];</span><br><span class="line">        [[YTKChainRequestAgent sharedAgent] removeChainRequest:self];</span><br><span class="line">    &#125;</span><br><span class="line">    [self toggleAccessoriesDidStopCallBack];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前的request请求失败了，则判定当前链式请求是失败的，则立即调用当前链式请求的失败回调。</p><p>现在我们知道了链式请求的请求和回调，再来看一下链式请求的终止：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//YTKChainRequest.m</span><br><span class="line">//终止当前的chain</span><br><span class="line">- (void)stop &#123;</span><br><span class="line">    //首先调用即将停止的callback</span><br><span class="line">    [self toggleAccessoriesWillStopCallBack];</span><br><span class="line">    //然后stop当前的请求，再清空chain里所有的请求和回掉block</span><br><span class="line">    [self clearRequest];</span><br><span class="line">    //在YTKChainRequestAgent里移除当前的chain</span><br><span class="line">    [[YTKChainRequestAgent sharedAgent] removeChainRequest:self];</span><br><span class="line">    //最后调用已经结束的callback</span><br><span class="line">    [self toggleAccessoriesDidStopCallBack];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>stop</code>方法是可以在外部调用的，所以用户可以随时终止当前链式请求的进行。它首先调用<code>clearReuqest</code>方法，将当前request停止，再将请求队列数组和callback数组清空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//YTKChainRequest.m</span><br><span class="line">- (void)clearRequest &#123;</span><br><span class="line">    //获取当前请求的index</span><br><span class="line">    NSUInteger currentRequestIndex = _nextRequestIndex - 1;</span><br><span class="line">    if (currentRequestIndex &lt; [_requestArray count]) &#123;</span><br><span class="line">        YTKBaseRequest *request = _requestArray[currentRequestIndex];</span><br><span class="line">        [request stop];</span><br><span class="line">    &#125;</span><br><span class="line">    [_requestArray removeAllObjects];</span><br><span class="line">    [_requestCallbackArray removeAllObjects];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在YTKChainRequestAgent单例里面，将自己移除掉。</p><h2 id="4-最后的话"><a href="#4-最后的话" class="headerlink" title="4. 最后的话"></a>4. 最后的话</h2><p>阅读这个框架的源码我的收获是：加深了对命令模式，对Block的理解，知道了一个网络请求都需要什么元素组成，知道了网络缓存该怎么设计，也知道了链式请求怎么设计等等。</p><p>我还记得当初听说YTKNetwork能发起链式请求的时候觉得毫无思路的感觉，不过现在应该没什么问题了。</p><p>所以说多阅读源码对技术水平的提升是很有帮助的，除了能增多对本语言API的了解，其实更有意义的是它能让你接触到一些新的设计和解决问题的办法，这些都是脱离某个语言本身的东西，也是作为一名程序员所必不可少的东西。</p><p>希望这篇文章能对读者们有所帮助~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名iOS开发工作者，大家应该都听过&lt;a href=&quot;https://github.com/yuantiku/YTKNetwork&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YTKNetwork框架&lt;/a&gt;吧。它是猿题库技术团队开源的一个网络请求框
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="源码解析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/16/hexo/hello-world/"/>
    <id>http://yoursite.com/2018/03/16/hexo/hello-world/</id>
    <published>2018-03-16T01:17:28.678Z</published>
    <updated>2018-03-16T01:17:28.678Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>iOS代码规范</title>
    <link href="http://yoursite.com/2018/03/15/iOS/iOS%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/03/15/iOS/iOS代码规范/</id>
    <published>2018-03-15T11:59:23.000Z</published>
    <updated>2018-03-21T05:03:05.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/859001-a9d78ce3d5e7114f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>利用业余时间，整理出来了这份规范，我会将这份规范作为以后我们团队的代码规范，并且我也会根据读者的反馈以及项目的实践不定时更新，希望大家多多指正批评。</p><p>这篇规范一共分为三个部分：</p><ol><li>核心原则：介绍这篇代码规范所遵循的核心原则。</li><li>通用规范：不局限iOS的通用性的代码规范（使用C语言和Swift语言）</li><li>iOS规范：仅适用于iOS的代码规范（使用Objective-C）</li></ol><h2 id="一、核心原则"><a href="#一、核心原则" class="headerlink" title="一、核心原则"></a>一、核心原则</h2><h3 id="原则一：代码应该简洁易懂，逻辑清晰"><a href="#原则一：代码应该简洁易懂，逻辑清晰" class="headerlink" title="原则一：代码应该简洁易懂，逻辑清晰"></a>原则一：代码应该简洁易懂，逻辑清晰</h3><p>以为软件是需要人来维护的。这个人在未来很可能不是你。所以首先是为人编写程序，其次才是计算机。</p><ul><li>不要分追求技巧，降低程序的可读性</li><li>简洁的代码可以让bug无处藏身。要写出明显没有bug的代码，而不是没有明显bug的代码。</li></ul><h3 id="原则二：面向变化编程，而不是面向需求编程"><a href="#原则二：面向变化编程，而不是面向需求编程" class="headerlink" title="原则二：面向变化编程，而不是面向需求编程"></a>原则二：面向变化编程，而不是面向需求编程</h3><p>需求是暂时的，只有变化才是永恒的。<br>本次迭代不能仅仅为了当前的需求，要写出拓展性强，易修改的程序才是责任的做法，对自己负责，对公司负责。</p><h3 id="原则三：先保证程序的正确性，防止过度工程"><a href="#原则三：先保证程序的正确性，防止过度工程" class="headerlink" title="原则三：先保证程序的正确性，防止过度工程"></a>原则三：先保证程序的正确性，防止过度工程</h3><p>过度工程（over-engineering）：在正确可用的代码写出之前就过度地考虑拓展，重用的的问题，使得工程过度复杂。<br>引用《王垠：编程的智慧》里的话：</p><blockquote><ol><li>先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。</li><li>先写出可用的代码，反复推敲，再考虑是否需要重用的问题。</li><li>先写出可用，简单，明显没有bug的代码，再考虑测试的问题。</li></ol></blockquote><h2 id="二、通用规范"><a href="#二、通用规范" class="headerlink" title="二、通用规范"></a>二、通用规范</h2><h3 id="关于大括号"><a href="#关于大括号" class="headerlink" title="关于大括号"></a>关于大括号</h3><hr><ul><li>控制语句(if,for,while,switch)中，大括号开始与行尾</li><li>函数中，大括号要开始于行首</li></ul><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//控制语句</span><br><span class="line">white(someCondition)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//函数</span><br><span class="line">void function(param1,param2)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><hr><h4 id="1-运算符与变量之间的间隔"><a href="#1-运算符与变量之间的间隔" class="headerlink" title="1.运算符与变量之间的间隔"></a>1.运算符与变量之间的间隔</h4><h5 id="1-1-一元运算符与变量之间没有空格："><a href="#1-1-一元运算符与变量之间没有空格：" class="headerlink" title="1.1 一元运算符与变量之间没有空格："></a>1.1 一元运算符与变量之间没有空格：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!bValue</span><br><span class="line">~iValue</span><br><span class="line">++iCount</span><br><span class="line">*strSource</span><br><span class="line">&amp;fSum</span><br></pre></td></tr></table></figure><h5 id="1-2-二元运算符与变量之间必须有空格："><a href="#1-2-二元运算符与变量之间必须有空格：" class="headerlink" title="1.2 二元运算符与变量之间必须有空格："></a>1.2 二元运算符与变量之间必须有空格：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fWidth = 5 + 5;</span><br><span class="line">fLength = fWidth * 2;</span><br><span class="line">fHeight = fWidth + fLength;</span><br><span class="line">for(int i = 0; i &lt; 10; i++)</span><br></pre></td></tr></table></figure><h4 id="2-多个不同的运算符同时存在时应该使用括号来明确优先级"><a href="#2-多个不同的运算符同时存在时应该使用括号来明确优先级" class="headerlink" title="2. 多个不同的运算符同时存在时应该使用括号来明确优先级"></a>2. 多个不同的运算符同时存在时应该使用括号来明确优先级</h4><p>在多个不同的运算符同时存在的时候应该合理使用括号，不要盲目依赖操作符优先级。<br>因为有的时候不能保证阅读你代码的人就一定能了解你写的算式里面所有操作符的优先级。</p><p>来看一下这个算式：2 &lt;&lt; 2 + 1 * 3 - 4</p><p>这里的<code>&lt;&lt;</code>是移位操作直观上却很容易认为它的优先级很高，所以就把这个算式误认为：(2 &lt;&lt; 2) + 13 - 4<br>但事实上，它的优先级是比加减法还要低的，所以该算式应该等同于：2 &lt;&lt; (2 + 13 - 4).<br>所以在以后写这种复杂一点的算式的时候，尽量多加一点括号，避免让其他人误解（甚至是自己）。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><hr><h4 id="1-一个变量有且只有一个功能，尽量不要把一个变量用作多种用途"><a href="#1-一个变量有且只有一个功能，尽量不要把一个变量用作多种用途" class="headerlink" title="1.一个变量有且只有一个功能，尽量不要把一个变量用作多种用途"></a>1.一个变量有且只有一个功能，尽量不要把一个变量用作多种用途</h4><h4 id="2-变量在使用前应该初始化，防止未初始化的变量被引用"><a href="#2-变量在使用前应该初始化，防止未初始化的变量被引用" class="headerlink" title="2.变量在使用前应该初始化，防止未初始化的变量被引用"></a>2.变量在使用前应该初始化，防止未初始化的变量被引用</h4><h4 id="3-局部变量应该尽量接近使用它的地方"><a href="#3-局部变量应该尽量接近使用它的地方" class="headerlink" title="3.局部变量应该尽量接近使用它的地方"></a>3.局部变量应该尽量接近使用它的地方</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func someFunction() &#123;</span><br><span class="line"> </span><br><span class="line">  let index = ...;</span><br><span class="line">  //Do something With index</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  let count = ...;</span><br><span class="line">  //Do something With count</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func someFunction() &#123;</span><br><span class="line"> </span><br><span class="line">  let index = ...;</span><br><span class="line">  let count = ...;</span><br><span class="line">  //Do something With index</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  //Do something With count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><hr><h4 id="1-必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。"><a href="#1-必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。" class="headerlink" title="1.必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。"></a>1.必须列出所有的分支（列举所有的情况），而且每个分支都必须给出明确的结果。</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var hintStr;</span><br><span class="line">if (count &lt; 3) &#123;</span><br><span class="line">  hintStr = &quot;Good&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  hintStr = &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var hintStr;</span><br><span class="line">if (count &lt; 3) &#123;</span><br><span class="line"> hintStr = &quot;Good&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-不要使用过多的分支，要善于使用return来提前返回错误的情况"><a href="#2-不要使用过多的分支，要善于使用return来提前返回错误的情况" class="headerlink" title="2.不要使用过多的分支，要善于使用return来提前返回错误的情况"></a>2.不要使用过多的分支，要善于使用return来提前返回错误的情况</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)someMethod &#123; </span><br><span class="line">  if (!goodCondition) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  //Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)someMethod &#123; </span><br><span class="line">  if (goodCondition) &#123;</span><br><span class="line">    //Do something</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较典型的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-(id)initWithDictionary:(NSDictionary*)dict error:(NSError)err</span><br><span class="line">&#123;</span><br><span class="line">   //方法1. 参数为nil</span><br><span class="line">   if (!dict) &#123;</span><br><span class="line">     if (err) *err = [JSONModelError errorInputIsNil];</span><br><span class="line">     return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法2. 参数不是nil，但也不是字典</span><br><span class="line">    if (![dict isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">        if (err) *err = [JSONModelError errorInvalidDataWithMessage:@&quot;Attempt to initialize JSONModel object using initWithDictionary:error: but the dictionary parameter was not an &apos;NSDictionary&apos;.&quot;];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法3. 初始化</span><br><span class="line">    self = [self init];</span><br><span class="line">    if (!self) &#123;</span><br><span class="line">        //初始化失败</span><br><span class="line">        if (err) *err = [JSONModelError errorModelIsInvalid];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法4. 检查用户定义的模型里的属性集合是否大于传入的字典里的key集合（如果大于，则返回NO）</span><br><span class="line">    if (![self __doesDictionary:dict matchModelWithKeyMapper:self.__keyMapper error:err]) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法5. 核心方法：字典的key与模型的属性的映射</span><br><span class="line">    if (![self __importDictionary:dict withKeyMapper:self.__keyMapper validation:YES error:err]) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法6. 可以重写[self validate:err]方法并返回NO，让用户自定义错误并阻拦model的返回</span><br><span class="line">    if (![self validate:err]) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法7. 终于通过了！成功返回model</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，在这里，首先判断出各种错误的情况然后提前返回，把最正确的情况放到最后返回。</p></blockquote><h4 id="3-条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值"><a href="#3-条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值" class="headerlink" title="3.条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值"></a>3.条件表达式如果很长，则需要将他们提取出来赋值给一个BOOL值</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let nameContainsSwift = sessionName.hasPrefix(&quot;Swift&quot;)</span><br><span class="line">let isCurrentYear = sessionDateCompontents.year == 2014</span><br><span class="line">let isSwiftSession = nameContainsSwift &amp;&amp; isCurrentYear</span><br><span class="line">if (isSwiftSession) &#123; </span><br><span class="line">   // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ( sessionName.hasPrefix(&quot;Swift&quot;) &amp;&amp; (sessionDateCompontents.year == 2014) ) &#123; </span><br><span class="line">    // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-条件语句的判断应该是变量在左，常量在右"><a href="#4-条件语句的判断应该是变量在左，常量在右" class="headerlink" title="4.条件语句的判断应该是变量在左，常量在右"></a>4.条件语句的判断应该是变量在左，常量在右</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( count == 6) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( object == nil) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( !object ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( 6 == count) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f ( nil == object ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-每个分支必须的实现代码必须用大括号包围"><a href="#5-每个分支必须的实现代码必须用大括号包围" class="headerlink" title="5.每个分支必须的实现代码必须用大括号包围"></a>5.每个分支必须的实现代码必须用大括号包围</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!error) &#123;</span><br><span class="line">  return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!error)</span><br><span class="line">    return success;</span><br></pre></td></tr></table></figure></p><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!error) return success;</span><br></pre></td></tr></table></figure><h4 id="6-条件过多，过长的时候应该换行"><a href="#6-条件过多，过长的时候应该换行" class="headerlink" title="6.条件过多，过长的时候应该换行"></a>6.条件过多，过长的时候应该换行</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (condition1() &amp;&amp; </span><br><span class="line">    condition2() &amp;&amp; </span><br><span class="line">    condition3() &amp;&amp; </span><br><span class="line">    condition4()) &#123;</span><br><span class="line">  // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (condition1() &amp;&amp; condition2() &amp;&amp; condition3() &amp;&amp; condition4()) &#123;</span><br><span class="line">  // Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><hr><h4 id="1-不可在for循环内修改循环变量，防止for循环失去控制。"><a href="#1-不可在for循环内修改循环变量，防止for循环失去控制。" class="headerlink" title="1.不可在for循环内修改循环变量，防止for循环失去控制。"></a>1.不可在for循环内修改循环变量，防止for循环失去控制。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (int index = 0; index &lt; 10; index++)&#123;</span><br><span class="line">   ...</span><br><span class="line">   logicToChange(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-避免使用continue和break。"><a href="#2-避免使用continue和break。" class="headerlink" title="2.避免使用continue和break。"></a>2.避免使用continue和break。</h4><p>continue和break做描述的是“什么时候不做什么”，所以为了读懂二者所在的代码，我们需要在头脑里将他们取反。</p><p>其实最好不要让这两个东西出现，移位我们的代码只要体现出“什么时候做什么”就好了，而且通过适当的方法，是可以将这两个东西消灭掉的；</p><h5 id="2-1-如果出现了continue，只需要把continue的条件取反即可"><a href="#2-1-如果出现了continue，只需要把continue的条件取反即可" class="headerlink" title="2.1 如果出现了continue，只需要把continue的条件取反即可"></a>2.1 如果出现了continue，只需要把continue的条件取反即可</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var filteredProducts = Array&lt;String&gt;()</span><br><span class="line">for level in products &#123;</span><br><span class="line">    if level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">        continue</span><br><span class="line">    &#125;</span><br><span class="line">    filteredProducts.append(level)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，通过判断字符串里是否还有“bad”这个prefix老过滤掉一些值。其实我们是可以通过取反，来避免使用continue的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for level in products &#123;</span><br><span class="line">    if !level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">      filteredProducts.append(level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-消除while里的break；讲break的条件取反，合并并到主循环里"><a href="#2-2-消除while里的break；讲break的条件取反，合并并到主循环里" class="headerlink" title="2.2 消除while里的break；讲break的条件取反，合并并到主循环里"></a>2.2 消除while里的break；讲break的条件取反，合并并到主循环里</h5><p>在while里的block其实就相当于“不存在”，既然是不存在的东西就完全可以子啊最开始的条件语句中将其排除。</p><p>while里的break:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (condition1) &#123;</span><br><span class="line">  ...</span><br><span class="line">  if (condition2) &#123;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取反并合并到主条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (condition1 &amp;&amp; !condition2) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-在有返回值的方法里消除break：将break转换为return立即返回"><a href="#2-3-在有返回值的方法里消除break：将break转换为return立即返回" class="headerlink" title="2.3 在有返回值的方法里消除break：将break转换为return立即返回"></a>2.3 在有返回值的方法里消除break：将break转换为return立即返回</h5><p>有些朋友喜欢这样做：在有返回值的方法里break之后，再返回某个值。其实完全可以在break的那一行直接返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func hasBadProductIn(products: Array&lt;String&gt;) -&gt; Bool &#123;</span><br><span class="line">    var result = false    </span><br><span class="line">    for level in products &#123;</span><br><span class="line">        if level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">            result = true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到错误条件直接返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func hasBadProductIn(products: Array&lt;String&gt;) -&gt; Bool &#123;</span><br><span class="line">    for level in products &#123;</span><br><span class="line">        if level.hasPrefix(&quot;bad&quot;) &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写的话不用特意声明一个变量来特意保存需要返回的值，看起来非常简洁，可读性高。</p><h3 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h3><hr><h4 id="1-每个分支都必须用大括号括起来"><a href="#1-每个分支都必须用大括号括起来" class="headerlink" title="1. 每个分支都必须用大括号括起来"></a>1. 每个分支都必须用大括号括起来</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">switch (integer) &#123;  </span><br><span class="line">  case 1:  &#123;</span><br><span class="line">    // ...  </span><br><span class="line">   &#125;</span><br><span class="line">    break;  </span><br><span class="line">  case 2: &#123;  </span><br><span class="line">    // ...  </span><br><span class="line">    break;  </span><br><span class="line">  &#125;  </span><br><span class="line">  case 3: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">  default:&#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用枚举类型时，不能有default分支，-除了使用枚举类型以外，都必须有default分支"><a href="#2-使用枚举类型时，不能有default分支，-除了使用枚举类型以外，都必须有default分支" class="headerlink" title="2. 使用枚举类型时，不能有default分支， 除了使用枚举类型以外，都必须有default分支"></a>2. 使用枚举类型时，不能有default分支， 除了使用枚举类型以外，都必须有default分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;  </span><br><span class="line">switch (menuType) &#123;  </span><br><span class="line">  case RWTLeftMenuTopItemMain: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">   &#125;</span><br><span class="line">  case RWTLeftMenuTopItemShows: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">  case RWTLeftMenuTopItemSchedule: &#123;</span><br><span class="line">    // ...  </span><br><span class="line">    break; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Switch语句使用枚举类型的时候，如果使用了default分支，在将来就无法通过编译器来检查新增的枚举类型了。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><hr><h4 id="1-一个函数的长度必须限制在50行以内"><a href="#1-一个函数的长度必须限制在50行以内" class="headerlink" title="1. 一个函数的长度必须限制在50行以内"></a>1. 一个函数的长度必须限制在50行以内</h4><p>常来说，在阅读一个函数的时候，如果视需要跨过很长的垂直距离会非常影响代码的阅读体验。如果需要来回滚动眼球或代码才能看全一个方法，就会很影响思维的连贯性，对阅读代码的速度造成比较大的影响。最好的情况是在不滚动眼球或代码的情况下一眼就能将该方法的全部代码映入眼帘。</p><h4 id="2-一个函数只做一件事（单一原则）"><a href="#2-一个函数只做一件事（单一原则）" class="headerlink" title="2. 一个函数只做一件事（单一原则）"></a>2. 一个函数只做一件事（单一原则）</h4><p>每个函数的职责都应该划分的很明确（就像类一样）。</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataConfiguration()</span><br><span class="line">viewConfiguration()</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void dataConfiguration()</span><br><span class="line">&#123;   </span><br><span class="line">   ...</span><br><span class="line">   viewConfiguration()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-对于有返回值的函数（方法），每一个分支都必须有返回值"><a href="#3-对于有返回值的函数（方法），每一个分支都必须有返回值" class="headerlink" title="3. 对于有返回值的函数（方法），每一个分支都必须有返回值"></a>3. 对于有返回值的函数（方法），每一个分支都必须有返回值</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int function()</span><br><span class="line">&#123;</span><br><span class="line">    if(condition1)&#123;</span><br><span class="line">        return count1</span><br><span class="line">    &#125;else if(condition2)&#123;</span><br><span class="line">        return count2</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       return defaultCount</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int function()</span><br><span class="line">&#123;</span><br><span class="line">    if(condition1)&#123;</span><br><span class="line">        return count1</span><br><span class="line">    &#125;else if(condition2)&#123;</span><br><span class="line">        return count2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-对输入参数的正确性和有效性进行检查，参数错误立即返回"><a href="#4-对输入参数的正确性和有效性进行检查，参数错误立即返回" class="headerlink" title="4. 对输入参数的正确性和有效性进行检查，参数错误立即返回"></a>4. 对输入参数的正确性和有效性进行检查，参数错误立即返回</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void function(param1,param2)</span><br><span class="line">&#123;</span><br><span class="line">      if(param1 is unavailable)&#123;</span><br><span class="line">           return;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      if(param2 is unavailable)&#123;</span><br><span class="line">           return;</span><br><span class="line">      &#125;</span><br><span class="line">     //Do some right thing</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数"><a href="#5-如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数" class="headerlink" title="5. 如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数"></a>5. 如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数</h4><p>原来的调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void logic() &#123;</span><br><span class="line">  a();</span><br><span class="line">  b()；</span><br><span class="line">  if (logic1 condition) &#123;</span><br><span class="line">    c();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    d();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将a，b函数抽取出来作为单独的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void basicConfig() &#123;</span><br><span class="line">  a();</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">void logic1() &#123;</span><br><span class="line">  basicConfig();</span><br><span class="line">  c();</span><br><span class="line">&#125;</span><br><span class="line">void logic2() &#123;</span><br><span class="line">  basicConfig();</span><br><span class="line">  d();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-将函数内部比较复杂的逻辑提取出来作为单独的函数"><a href="#6-将函数内部比较复杂的逻辑提取出来作为单独的函数" class="headerlink" title="6. 将函数内部比较复杂的逻辑提取出来作为单独的函数"></a>6. 将函数内部比较复杂的逻辑提取出来作为单独的函数</h4><p>一个函数内的不清晰（逻辑判断比较多，行数较多）的那片代码，往往可以被提取出去，构成一个新的函数，然后在原来的地方调用它这样你就可以使用有意义的函数名来代替注释，增加程序的可读性。</p><p>举一个发送邮件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">openEmailSite();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line">writeTitle(title);</span><br><span class="line">writeContent(content);</span><br><span class="line">writeReceiver(receiver);</span><br><span class="line">addAttachment(attachment);</span><br><span class="line"></span><br><span class="line">send();</span><br></pre></td></tr></table></figure><p>中间的部分稍微长一些，我们可以将它们提取出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void writeEmail(title, content,receiver,attachment)</span><br><span class="line">&#123;</span><br><span class="line">  writeTitle(title);</span><br><span class="line">  writeContent(content);</span><br><span class="line">  writeReceiver(receiver);</span><br><span class="line">  addAttachment(attachment); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再看一下原来的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openEmailSite();</span><br><span class="line">login();</span><br><span class="line">writeEmail(title, content,receiver,attachment)</span><br><span class="line">send();</span><br></pre></td></tr></table></figure><h4 id="7-避免使用全局变量，类成员（class-member）来传递信息，尽量使用局部变量和参数。"><a href="#7-避免使用全局变量，类成员（class-member）来传递信息，尽量使用局部变量和参数。" class="headerlink" title="7.避免使用全局变量，类成员（class member）来传递信息，尽量使用局部变量和参数。"></a>7.避免使用全局变量，类成员（class member）来传递信息，尽量使用局部变量和参数。</h4><p>在一个类里面，经常会有传递某些变量的情况。而如果需要传递的变量是某个全局变量或者属性的时候，有些朋友不喜欢将它们作为参数，而是在方法内部就直接访问了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  var x;</span><br><span class="line">  func updateX() &#123;</span><br><span class="line">     ...</span><br><span class="line">     x = ...;</span><br><span class="line">  &#125;</span><br><span class="line">  func printX() &#123;</span><br><span class="line">    updateX();</span><br><span class="line">    print(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在printX方法里面，updateX和print方法之间并没有值的传递，乍一看我们可能不知道x从哪里来的，导致程序的可读性降低了。</p><p>而如果你使用局部变量而不是类成员来传递信息，那么这两个函数就不需要依赖于某一个类，而且更加容易理解，不易出错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func updateX() -&gt; String&#123;</span><br><span class="line">    x = ...;</span><br><span class="line">    return x;</span><br><span class="line"> &#125;</span><br><span class="line"> func printX() &#123;</span><br><span class="line">   String x = updateX();</span><br><span class="line">   print(x);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><hr><p>优秀的代码大部分是可以自描述的，我们完全可以用程代码本身来表达它到底在干什么，而不需要注释的辅助。</p><p>但并不是说一定不能写注释，有以下三种情况比较适合写注释：</p><p>公共接口（注释要告诉阅读代码的人，当前类能实现什么功能）。<br>涉及到比较深层专业知识的代码（注释要体现出实现原理和思想）。<br>容易产生歧义的代码（但是严格来说，容易让人产生歧义的代码是不允许存在的）。<br>除了上述这三种情况，如果别人只能依靠注释才能读懂你的代码的时候，就要反思代码出现了什么问题。</p><p>最后，对于注释的内容，相对于“做了什么”，更应该说明“为什么这么做”。</p><h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><hr><p>换行、注释、方法长度、代码重复等这些是通过机器检查出来的问题，是无需通过人来做的。</p><p>而且除了审查需求的实现的程度，bug是否无处藏身以外，更应该关注代码的设计。比如类与类之间的耦合程度，设计的可扩展性，复用性，是否可以将某些方法抽出来作为接口等等。</p><h2 id="三-iOS规范"><a href="#三-iOS规范" class="headerlink" title="三. iOS规范"></a>三. iOS规范</h2><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><hr><h4 id="1-变量名必须使用驼峰格式"><a href="#1-变量名必须使用驼峰格式" class="headerlink" title="1. 变量名必须使用驼峰格式"></a>1. 变量名必须使用驼峰格式</h4><p>类，协议使用大驼峰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HomePageViewController.h</span><br><span class="line">&lt;HeaderViewDelegate&gt;</span><br></pre></td></tr></table></figure><p>对象等局部变量使用小驼峰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *personName = @&quot;&quot;;</span><br><span class="line">NSUInteger totalCount = 0;</span><br></pre></td></tr></table></figure><h4 id="2-变量的名称必须同时包含功能与类型"><a href="#2-变量的名称必须同时包含功能与类型" class="headerlink" title="2. 变量的名称必须同时包含功能与类型"></a>2. 变量的名称必须同时包含功能与类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UIButton *addBtn //添加按钮</span><br><span class="line">UILabel *nameLbl //名字标签</span><br><span class="line">NSString *addressStr//地址字符串</span><br></pre></td></tr></table></figure><h4 id="3-系统常用类作实例变量声明时加入后缀"><a href="#3-系统常用类作实例变量声明时加入后缀" class="headerlink" title="3. 系统常用类作实例变量声明时加入后缀"></a>3. 系统常用类作实例变量声明时加入后缀</h4><table><thead><tr><th>类型</th><th>后缀</th></tr></thead><tbody><tr><td>UIViewController</td><td>VC</td></tr><tr><td>UIView</td><td>View</td></tr><tr><td>UILabel</td><td>Lbl</td></tr><tr><td>UIButton</td><td>Btn</td></tr><tr><td>UIImage</td><td>Img</td></tr><tr><td>UIImageView</td><td>ImagView</td></tr><tr><td>NSArray</td><td>Array</td></tr><tr><td>NSMutableArray</td><td>Marray</td></tr><tr><td>NSDictionary</td><td>Dict</td></tr><tr><td>NSMutableDictionary</td><td>MDdict</td></tr><tr><td>NSString</td><td>Str</td></tr><tr><td>NSMutableString</td><td>MStr</td></tr><tr><td>NSSet</td><td>Set</td></tr><tr><td>NSMutableSet</td><td>Mset</td></tr></tbody></table><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><hr><h4 id="1-常量以相关类名作为前缀"><a href="#1-常量以相关类名作为前缀" class="headerlink" title="1. 常量以相关类名作为前缀"></a>1. 常量以相关类名作为前缀</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval ZOCSignInViewControllerFadeOutAnimationDuration = 0.4;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval fadeOutTime = 0.4;</span><br></pre></td></tr></table></figure><h4 id="2-建议使用类型常量，不建议使用-define预处理命令"><a href="#2-建议使用类型常量，不建议使用-define预处理命令" class="headerlink" title="2. 建议使用类型常量，不建议使用#define预处理命令"></a>2. 建议使用类型常量，不建议使用#define预处理命令</h4><p>首先比较一下这两种声明常量的区别：</p><ul><li>预处理命令：简单的文本替换，不包括类型信息，并且可被任意修改。</li><li>类型常量：包括类型信息，并且可以设置其使用范围，而且不可被修改。</li></ul><p>使用预处理虽然能达到替换文本的目的，但是本身还是有局限性的：</p><ul><li>不具备类型信息。</li><li>可以被任意修改。</li></ul><h4 id="3-对外公开某个常量："><a href="#3-对外公开某个常量：" class="headerlink" title="3. 对外公开某个常量："></a>3. 对外公开某个常量：</h4><p>如果我们需要发送通知，那么就需要在不同的地方拿到通知的“频道”字符串（通知的名称），那么显然这个字符串是不能被轻易更改，而且可以在不同的地方获取。这个时候就需要定义一个外界可见的字符串常量。</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//头文件</span><br><span class="line">extern NSString *const ZOCCacheControllerDidClearCacheNotification;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//实现文件</span><br><span class="line">static NSString * const ZOCCacheControllerDidClearCacheNotification = @&quot;ZOCCacheControllerDidClearCacheNotification&quot;;</span><br><span class="line">static const CGFloat ZOCImageThumbnailHeight = 50.0f;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define CompanyName @&quot;Apple Inc.&quot; </span><br><span class="line">#define magicNumber 42</span><br></pre></td></tr></table></figure><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><hr><h4 id="1-宏、常量名都要使用大写字母，用下划线‘-’分割单词。"><a href="#1-宏、常量名都要使用大写字母，用下划线‘-’分割单词。" class="headerlink" title="1. 宏、常量名都要使用大写字母，用下划线‘_’分割单词。"></a>1. 宏、常量名都要使用大写字母，用下划线‘_’分割单词。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define URL_GAIN_QUOTE_LIST @&quot;/v1/quote/list&quot;</span><br><span class="line">#define URL_UPDATE_QUOTE_LIST @&quot;/v1/quote/update&quot;</span><br><span class="line">#define URL_LOGIN  @&quot;/v1/user/login”</span><br></pre></td></tr></table></figure><h4 id="2-宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。"><a href="#2-宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。" class="headerlink" title="2. 宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。"></a>2. 宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define MY_MIN(A, B)  ((A)&gt;(B)?(B):(A))</span><br></pre></td></tr></table></figure><h3 id="CGRect函数"><a href="#CGRect函数" class="headerlink" title="CGRect函数"></a>CGRect函数</h3><hr><p>其实iOS内部已经提供了相应的获取CGRect各个部分的函数了，它们的可读性比较高，而且简短，推荐使用：</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame; </span><br><span class="line">CGFloat x = CGRectGetMinX(frame); </span><br><span class="line">CGFloat y = CGRectGetMinY(frame); </span><br><span class="line">CGFloat width = CGRectGetWidth(frame); </span><br><span class="line">CGFloat height = CGRectGetHeight(frame); </span><br><span class="line">CGRect frame = CGRectMake(0.0, 0.0, width, height);</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;  </span><br><span class="line">CGFloat x = frame.origin.x;  </span><br><span class="line">CGFloat y = frame.origin.y;  </span><br><span class="line">CGFloat width = frame.size.width;  </span><br><span class="line">CGFloat height = frame.size.height;  </span><br><span class="line">CGRect frame = (CGRect)&#123; .origin = CGPointZero, .size = frame.size &#125;;</span><br></pre></td></tr></table></figure><h3 id="范型"><a href="#范型" class="headerlink" title="范型"></a>范型</h3><hr><p>建议在定义NSArray和NSDictionary时使用泛型，可以保证程序的安全性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray&lt;NSString *&gt; *testArr = [NSArray arrayWithObjects:@&quot;Hello&quot;, @&quot;world&quot;, nil];</span><br><span class="line">NSDictionary&lt;NSString *, NSNumber *&gt; *dic = @&#123;@&quot;key&quot;:@(1), @&quot;age&quot;:@(10)&#125;;</span><br></pre></td></tr></table></figure><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><p>为常用的Block类型创建typedef</p><p>如果我们需要重复创建某种block（相同参数，返回值）的变量，我们就可以通过typedef来给某一种块定义属于它自己的新类型</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int (^variableName)(BOOL flag, int value) =^(BOOL flag, int value)&#123;</span><br><span class="line">     // Implementation</span><br><span class="line">     return someInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个Block有一个bool参数和一个int参数，并返回int类型。我们可以给它定义类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int(^EOCSomeBlock)(BOOL flag, int value);</span><br><span class="line">//再次定义的时候，就可以通过简单的赋值来实现：</span><br><span class="line">EOCSomeBlock block = ^(BOOL flag, int value)&#123;</span><br><span class="line">// Implementation</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义作为参数的Block：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(void)startWithCompletionHandler: (void(^)(NSData data, NSError error))completion;</span><br></pre></td></tr></table></figure><p>这里的Block有一个NSData参数，一个NSError参数并没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef void(^EOCCompletionHandler)(NSData data, NSError error);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(void)startWithCompletionHandler:(EOCCompletionHandler)completion;”</span><br></pre></td></tr></table></figure><p>通过typedef定义Block签名的好处是:如果要某种块增加参数，那么只修改定义签名的那行代码即可。</p><h3 id="字面量语法"><a href="#字面量语法" class="headerlink" title="字面量语法"></a>字面量语法</h3><hr><p>尽量使用字面量值来创建 NSString , NSDictionary , NSArray , NSNumber 这些不可变对象：</p><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;];</span><br><span class="line">NSDictionary *productManagers = @&#123;@&quot;iPhone&quot; : @&quot;Kate&quot;, @&quot;iPad&quot; : @&quot;Kamal&quot;, @&quot;Mobile Web&quot; : @&quot;Bill&quot;&#125;; </span><br><span class="line">NSNumber *shouldUseLiterals = @YES;NSNumber *buildingZIPCode = @10018;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];</span><br><span class="line">NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot; ];</span><br><span class="line">NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018];</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><hr><h4 id="1-属性的命名使用小驼峰"><a href="#1-属性的命名使用小驼峰" class="headerlink" title="1. 属性的命名使用小驼峰"></a>1. 属性的命名使用小驼峰</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, readwrite, strong) UIButton *confirmButton;</span><br></pre></td></tr></table></figure><h4 id="2-属性的关键字推荐按照-原子性，读写，内存管理的顺序排列"><a href="#2-属性的关键字推荐按照-原子性，读写，内存管理的顺序排列" class="headerlink" title="2. 属性的关键字推荐按照 原子性，读写，内存管理的顺序排列"></a>2. 属性的关键字推荐按照 原子性，读写，内存管理的顺序排列</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, readwrite, copy) NSString *name;</span><br><span class="line">@property (nonatomic, readonly, copy) NSString *gender;</span><br><span class="line">@property (nonatomic, readwrite, strong) UIView *headerView;</span><br></pre></td></tr></table></figure><ol><li>Block属性应该使用copy关键字</li></ol><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef void (^ErrorCodeBlock) (id errorCode,NSString *message);</span><br><span class="line">@property (nonatomic, readwrite, copy) ErrorCodeBlock errorBlock;//将block拷贝到堆中</span><br></pre></td></tr></table></figure><h4 id="4-形容词性的BOOL属性的getter应该加上is前缀"><a href="#4-形容词性的BOOL属性的getter应该加上is前缀" class="headerlink" title="4. 形容词性的BOOL属性的getter应该加上is前缀"></a>4. 形容词性的BOOL属性的getter应该加上is前缀</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (assign, getter=isEditable) BOOL editable;</span><br></pre></td></tr></table></figure><h4 id="5-使用getter方法做懒加载"><a href="#5-使用getter方法做懒加载" class="headerlink" title="5. 使用getter方法做懒加载"></a>5. 使用getter方法做懒加载</h4><p>实例化一个对象是需要耗费资源的，如果这个对象里的某个属性的实例化要调用很多配置和计算，就需要懒加载它，在使用它的前一刻对它进行实例化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (NSDateFormatter *)dateFormatter &#123;</span><br><span class="line">    if (!_dateFormatter) &#123;</span><br><span class="line">           _dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class="line">           NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US_POSIX&quot;];</span><br><span class="line">           [_dateFormatter setLocale:enUSPOSIXLocale];</span><br><span class="line">           [_dateFormatter setDateFormat:@&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;];</span><br><span class="line">    &#125; </span><br><span class="line">    return _dateFormatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是也有对这种做法的争议：getter方法可能会产生某些副作用，例如如果它修改了全局变量，可能会产生难以排查的错误。</p><h4 id="6-除了init和dealloc方法，建议都使用点语法访问属性"><a href="#6-除了init和dealloc方法，建议都使用点语法访问属性" class="headerlink" title="6. 除了init和dealloc方法，建议都使用点语法访问属性"></a>6. 除了init和dealloc方法，建议都使用点语法访问属性</h4><p>使用点语法的好处：<br><strong>setter：</strong></p><ol><li>setter会遵守内存管理语义(strong, copy, weak)。</li><li>通过在内部设置断点，有助于调试bug。</li><li>可以过滤一些外部传入的值。</li><li><p>捕捉KVO通知。<br>getter：</p></li><li><p>允许子类化。</p></li><li>通过在内部设置断点，有助于调试bug。</li><li>实现懒加载（lazy initialization）。</li></ol><blockquote><p>注意：</p><ol><li>懒加载的属性，必须通过点语法来读取数据。因为懒加载是通过重写getter方法来初始化实例变量的，如果不通过属性来读取该实例变量，那么这个实例变量就永远不会被初始化。</li><li>在init和dealloc方法里面使用点语法的后果是：因为没有绕过setter和getter，在setter和getter里面可能会有很多其他的操作。而且如果它的子类重载了它的setter和getter方法，那么就可能导致该子类调用其他的方法。</li></ol></blockquote><h4 id="7-不要滥用点语法，要区分好方法调用和属性访问"><a href="#7-不要滥用点语法，要区分好方法调用和属性访问" class="headerlink" title="7. 不要滥用点语法，要区分好方法调用和属性访问"></a>7. 不要滥用点语法，要区分好方法调用和属性访问</h4><p>推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view.backgroundColor = [UIColor orangeColor]; </span><br><span class="line">[UIApplication sharedApplication].delegate;</span><br></pre></td></tr></table></figure><p>不推荐这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[view setBackgroundColor:[UIColor orangeColor]]; </span><br><span class="line">UIApplication.sharedApplication.delegate;</span><br></pre></td></tr></table></figure><h4 id="8-尽量使用不可变对象"><a href="#8-尽量使用不可变对象" class="headerlink" title="8. 尽量使用不可变对象"></a>8. 尽量使用不可变对象</h4><p>建议尽量把对外公布出来的属性设置为只读，在实现文件内部设为读写。具体做法是：</p><ul><li>在头文件中，设置对象属性为<ul><li>在实现文件中设置为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    这样一来，在外部就只能读取该数据，而不能修改它，使得这个类的实例所持有的数据更加安全。而且，对于集合类的对象，更应该仔细考虑是否可以将其设为可变的。</span><br><span class="line">    如果在公开部分只能设置其为只读属性，那么就在非公开部分存储一个可变型。所以当在外部获取这个属性时，获取的只是内部可变型的一个不可变版本,</span><br><span class="line">    </span><br><span class="line">例如：</span><br><span class="line">    </span><br><span class="line">在公共API中：</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>@interface EOCPerson : NSObject</p><p>@property (nonatomic, copy, readonly) NSString firstName;<br>@property (nonatomic, copy, readonly) NSString lastName;<br>@property (nonatomic, strong, readonly) NSSet *friends //向外公开的不可变集合</p><p>(id)initWithFirstName:(NSString)firstName andLastName:(NSString)lastName;<br>(void)addFriend:(EOCPerson<em>)person;<br>(void)removeFriend:(EOCPerson</em>)person;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;在这里，我们将friends属性设置为不可变的set。然后，提供了来增加和删除这个set里的元素的公共接口。</span><br><span class="line"></span><br><span class="line">在实现文件里：</span><br></pre></td></tr></table></figure></p><p>@interface EOCPerson ()</p><p>@property (nonatomic, copy, readwrite) NSString firstName;<br>@property (nonatomic, copy, readwrite) NSString lastName;</p><p>@end</p><p>@implementation EOCPerson {<br>NSMutableSet *_internalFriends; //实现文件里的可变集合<br>}</p><ul><li><p>(NSSet*)friends {<br>  return [_internalFriends copy]; //get方法返回的永远是可变set的不可变型<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 2. 方法实现时，如果参数过长，则令每个参数占用一行，以冒号对齐。</span><br></pre></td></tr></table></figure></li><li><p>(void)doSomethingWith:(NSString *)theFoo</p><pre><code>    rect:(CGRect)theRectinterval:(CGFloat)theInterval</code></pre><p>{<br> //Implementation<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 3. 私有方法应该在实现文件中申明。</span><br></pre></td></tr></table></figure></li></ul><p>@interface ViewController ()</p><ul><li>(void)basicConfiguration;<br>@end<br>@implementation ViewController</li><li><p>(void)basicConfiguration<br>{<br> //Do some basic configuration<br>}<br>@end</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">##### 4. 方法名用小写字母开头的单词组合而成</span><br></pre></td></tr></table></figure></li><li><p>(NSString *)descriptionWithLocale:(id)locale;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 5. 方法名前缀</span><br><span class="line">* 刷新视图的方法名要以refresh为首。</span><br><span class="line">* 更新数据的方法名要以update为首。</span><br><span class="line"></span><br><span class="line">推荐这样写：</span><br></pre></td></tr></table></figure></li><li><p>(void)refreshHeaderViewWithCount:(NSUInteger)count;</p></li><li>(void)updateDataSourceWithViewModel:(ViewModel*)viewModel;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 面向协议编程</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">如果某些功能（方法）具备可复用性，我们就需要将它们抽取出来放入一个抽象接口文件中（在iOS中，抽象接口即协议），让不同类型的对象遵循这个协议，从而拥有相同的功能。</span><br><span class="line"></span><br><span class="line">因为协议是不依赖于某个对象的，所以通过协议，我们可以解开两个对象之间的耦合。如何理解呢？我们来看一下下面这个例子：</span><br><span class="line"></span><br><span class="line">现在有一个需求：在一个`UITableViewController`里面拉取feed并展示出来。</span><br><span class="line"></span><br><span class="line">#### 方案一：</span><br><span class="line">定义一个拉取feed的类ZOCFeedParser，这个类有一些代理方法实现feed相关功能：</span><br></pre></td></tr></table></figure></li></ul><p>@protocol ZOCFeedParserDelegate <nsobject><br>@optional</nsobject></p><ul><li>(void)feedParserDidStart:(ZOCFeedParser *)parser;</li><li>(void)feedParser:(ZOCFeedParser <em>)parser didParseFeedInfo:(ZOCFeedInfoDTO </em>)info; </li><li>(void)feedParser:(ZOCFeedParser <em>)parser didParseFeedItem:(ZOCFeedItemDTO </em>)item; </li><li>(void)feedParserDidFinish:(ZOCFeedParser *)parser;</li><li>(void)feedParser:(ZOCFeedParser <em>)parser didFailWithError:(NSError </em>)error;@end<br>@interface ZOCFeedParser : NSObject<br>@property (nonatomic, weak) id <zocfeedparserdelegate> delegate;<br>@property (nonatomic, strong) NSURL *url; </zocfeedparserdelegate></li><li>(id)initWithURL:(NSURL *)url; </li><li>(BOOL)start; </li><li>(void)stop;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后在ZOCTableViewController里面传入ZOCFeedParser，并遵循其代理方法，实现feed的拉取功能。</span><br></pre></td></tr></table></figure></li></ul><p>@interface ZOCTableViewController : UITableViewController<zocfeedparserdelegate></zocfeedparserdelegate></p><ul><li>(instancetype)initWithFeedParser:(ZOCFeedParser *)feedParser;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后在ZOCTableViewController里面传入ZOCFeedParser，并遵循其代理方法，实现feed的拉取功能。</span><br></pre></td></tr></table></figure></li></ul><p>@interface ZOCTableViewController : UITableViewController<zocfeedparserdelegate></zocfeedparserdelegate></p><ul><li>(instancetype)initWithFeedParser:(ZOCFeedParser *)feedParser;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">具体应用：</span><br></pre></td></tr></table></figure></li></ul><p>NSURL <em>feedURL = [NSURL URLWithString:@”<a href="http://bbc.co.uk/feed.rss" target="_blank" rel="noopener">http://bbc.co.uk/feed.rss</a>“];<br>ZOCFeedParser </em>feedParser = [[ZOCFeedParser alloc] initWithURL:feedURL];<br>ZOCTableViewController *tableViewController = [[ZOCTableViewController alloc] initWithFeedParser:feedParser];<br>feedParser.delegate = tableViewController;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OK，现在我们实现了需求：在`ZOCTableViewController`里面存放了一个`ZOCFeedParser`对象来处理feed的拉取功能。</span><br><span class="line">于是我们重新审视一下这个需求：其实我们实际上只需要`ZOCTableViewController`拉取feed就可以了，而具体是由哪个对象来拉取，`ZOCTableViewController`并不需要关心。</span><br><span class="line"></span><br><span class="line">也就是说，我们需要提供给`ZOCTableViewController`的是一个更范型的对象，这个对象具备了拉取feed的功能就好了，而不应该仅仅局限于某个具体的对象（`ZOCFeedParser`）。所以，刚才的设计需要重新做一次修改：</span><br><span class="line"></span><br><span class="line">#### 方案二：</span><br><span class="line">首先需要在一个接口文件`ZOCFeedParserProtocol.h`里面定义抽象的，具有拉取feed功能的协议：</span><br></pre></td></tr></table></figure></p><p>@protocol ZOCFeedParserDelegate <nsobject><br>@optional</nsobject></p><ul><li>(void)feedParserDidStart:(id<zocfeedparserprotocol>)parser;</zocfeedparserprotocol></li><li>(void)feedParser:(id<zocfeedparserprotocol>)parser didParseFeedInfo:(ZOCFeedInfoDTO *)info; </zocfeedparserprotocol></li><li>(void)feedParser:(id<zocfeedparserprotocol>)parser didParseFeedItem:(ZOCFeedItemDTO *)item; </zocfeedparserprotocol></li><li>(void)feedParserDidFinish:(id<zocfeedparserprotocol>)parser;</zocfeedparserprotocol></li><li>(void)feedParser:(id<zocfeedparserprotocol>)parser didFailWithError:(NSError <em>)error;@end<br>@protocol ZOCFeedParserProtocol <nsobject><br>@property (nonatomic, weak) id <zocfeedparserdelegate> delegate;<br>@property (nonatomic, strong) NSURL </zocfeedparserdelegate></nsobject></em>url;</zocfeedparserprotocol></li><li>(BOOL)start;</li><li>(void)stop;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">而原来的`ZOCFeedParser`仅仅是需要遵循上面这个协议就具备了拉取feed的功能</span><br></pre></td></tr></table></figure></li></ul><p>@interface ZOCFeedParser : NSObject <zocfeedparserprotocol> </zocfeedparserprotocol></p><ul><li>(id)initWithURL:(NSURL *)url;//仅仅需要通过传入url即可，其他事情都交给ZOCFeedParserProtocol@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">而且，`ZOCTableViewController`也不直接依赖于`ZOCFeedParser`对象，我们只需要传给它一个遵循`&lt;ZOCFeedParserProtocol&gt;`的对象即可。</span><br></pre></td></tr></table></figure></li></ul><p>@interface ZOCTableViewController : UITableViewController <zocfeedparserdelegate></zocfeedparserdelegate></p><ul><li><p>(instancetype)initWithFeedParser:(id<zocfeedparserprotocol>)feedParser;<br>@end</zocfeedparserprotocol></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">这样一来，`ZOCTableViewController`和`wController`和`之间就没有直接的关系了。以后，如果我们想：</span><br><span class="line"></span><br><span class="line">* 给这个feed拉取器增加新的功能：仅需要修改`ZOCFeedParserProtocol.h`文件。</span><br><span class="line">* 更换一个feed拉取器实例：创建一个新类型来遵循`ZOCFeedParserProtocol.h`即可。</span><br><span class="line"></span><br><span class="line">### iOS 中委托的设计</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. 要区分好代理和数据源的区别</span><br><span class="line">在iOS开发中的委托模式包含了delegate（代理）和datasource（数据源）。虽然二者同属于委托模式，但是这两者是有区别的。这个区别就是二者的信息流方向是不同的：</span><br><span class="line"></span><br><span class="line">* delegate ：事件发生的时候，委托者需要通知代理。（信息流从委托者到代理）</span><br><span class="line">* datasource：委托者需要从数据源拉取数据。（信息流从数据源到委托者）</span><br><span class="line"></span><br><span class="line">然而包括苹果也没有做好榜样，将它们彻底的区分开。就拿UITableView来说，在它的delegate方法中有一个方法：</span><br></pre></td></tr></table></figure></li><li><p>(void)tableView:(UITableView <em>)tableView didSelectRowAtIndexPath:(NSIndexPath </em>)indexPath;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这个方法正确地体现了代理的作用：委托者（tableview）告诉代理（控制器）“我的某个cell被点击了”。但是，UITableViewDelegate的方法列表里还有这个方法：</span><br></pre></td></tr></table></figure></li><li><p>(CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">该方法的作用是 由控制器来告诉tabievlew的行高，也就是说，它的信息流是从控制器（数据源）到委托者（tableview）的。准确来讲，它应该是一个数据源方法，而不是代理方法。</span><br><span class="line"></span><br><span class="line">在UITableViewDataSource中，就有标准的数据源方法：</span><br></pre></td></tr></table></figure></li><li><p>(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这个方法的作用就是让tableview向控制器拉取一个section数量的数据。</span><br><span class="line"></span><br><span class="line">所以，在我们设计一个视图控件的代理和数据源时，一定要区分好二者的区别，合理地划分哪些方法属于代理方法，哪些方法属于数据源方法。</span><br><span class="line"></span><br><span class="line">#### 2. 代理方法的第一个参数必须为委托者</span><br><span class="line"></span><br><span class="line">代理方法必须以委托者作为第一个参数（参考UITableViewDelegate）的方法。其目的是为了区分不同委托着的实例。因为同一个控制器是可以作为多个tableview的代理的。若要区分到底是哪个tableview的cell被点击了，就需要在</span><br></pre></td></tr></table></figure></li></ul><p>(void)tableView:(UITableView )tableView didSelectRowAtIndexPath:(NSIndexPath )indexPath``方法中做个区分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##### 向代理发送消息时需要判断其是否实现该方法</span><br><span class="line"></span><br><span class="line">最后，在委托着向代理发送消息的时候，需要判断委托着是否实现了这个代理方法:</span><br></pre></td></tr></table></figure></p><p>if ([self.delegate respondsToSelector:@selector(signUpViewControllerDidPressSignUpButton:)]) {<br> [self.delegate signUpViewControllerDidPressSignUpButton:self];<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 3. 遵循代理过多的时候，换行对齐显示</span><br></pre></td></tr></table></figure></p><p>@interface ShopViewController () <uigesturerecognizerdelegate, hxsclickeventdelegate,="" uitableviewdelegate,="" uitableviewdatasource=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 4. 代理的方法需要明确必须执行和可不执行</span><br><span class="line">代理方法在默认情况下都是必须执行的，然而在设计一组代理方法的时候，有些方法可以不是必须执行（是因为存在默认配置），这些方法就需要使用@optional关键字来修饰：</span><br></pre></td></tr></table></figure></uigesturerecognizerdelegate,></p><p>@protocol ZOCServiceDelegate <nsobject>@optional- (void)generalService:(ZOCGeneralService <em>)service didRetrieveEntries:(NSArray </em>)entries;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### 类</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. 类的名称应该以三个大写字母为前缀；创建子类的时候，应该把代表子类特点的部分放在前缀和父类名的中间</span><br><span class="line"></span><br><span class="line">推荐这样写：</span><br></pre></td></tr></table></figure></nsobject></p><p>//父类<br>ZOCSalesListViewController<br>//子类<br>ZOCDaySalesListViewController<br>ZOCMonthSalesListViewController<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2. initializer &amp;&amp; dealloc</span><br><span class="line">推荐：</span><br><span class="line"></span><br><span class="line">* 将 dealloc 方法放在实现文件的最前面</span><br><span class="line">* 将init方法放在dealloc方法后面。如果有多个初始化方法，应该将指定初始化方法放在最前面，其他初始化方法放在其后。</span><br><span class="line"></span><br><span class="line">##### 2.1 dealloc方法里面应该直接访问实例变量，不应该用点语法访问</span><br><span class="line">##### 2.2 init方法的写法：</span><br><span class="line">* init方法返回类型必须是instancetype，不能是id。</span><br><span class="line">* 必须先实现[super init]。</span><br></pre></td></tr></table></figure></p><ul><li>(instancetype)init {<br>  self = [super init]; // call the designated initializer<br>  if (self) { <pre><code>// Custom initialization </code></pre>  }<br>  return self;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##### 2.3 指定初始化方法</span><br><span class="line">指定初始化方法(designated initializer)是提供所有的（最多的）参数的初始化方法，间接初始化方法(secondary initializer)有一个或部分参数的初始化方法。</span><br><span class="line"></span><br><span class="line">注意事项1：间接初始化方法必须调用指定初始化方法。</span><br></pre></td></tr></table></figure></li></ul><p>@implementation ZOCEvent<br>//指定初始化方法</p><ul><li>(instancetype)initWithTitle:(NSString <em>)title date:(NSDate </em>)date<br>location:(CLLocation *)location<br>{<br>  self = [super init]; <pre><code>if (self) {   _title = title;    _date = date;    _location = location; } </code></pre>  return self;<br>}<br>//间接初始化方法</li><li>(instancetype)initWithTitle:(NSString <em>)title date:(NSDate </em>)date<br>{<br> return [self initWithTitle:title date:date location:nil];<br>}<br>//间接初始化方法</li><li><p>(instancetype)initWithTitle:(NSString *)title<br>{<br> return [self initWithTitle:title date:[NSDate date] location:nil];<br>}<br>@end</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意事项2：如果直接父类有指定初始化方法，则必须调用其指定初始化方法</span><br></pre></td></tr></table></figure></li><li><p>(id)initWithNibName:(NSString <em>)nibNameOrNil bundle:(NSBundle </em>)nibBundleOrNil {<br>  self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];<br>  if (self) {<br>  }<br>  return self;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意事项3：如果想在当前类自定义一个新的全能初始化方法，则需要如下几个步骤</span><br><span class="line"></span><br><span class="line">1. 定义新的指定初始化方法，并确保调用了直接父类的初始化方法。</span><br><span class="line">2. 重载直接父类的初始化方法，在内部调用新定义的指定初始化方法。</span><br><span class="line">3. 为新的指定初始化方法写文档。</span><br><span class="line"></span><br><span class="line">看一个标准的例子：</span><br></pre></td></tr></table></figure></li></ul><p>@implementation ZOCNewsViewController<br>//新的指定初始化方法</p><ul><li>(id)initWithNews:(ZOCNews *)news {<br>  self = [super initWithNibName:nil bundle:nil];<br>  if (self) {<pre><code>_news = news;</code></pre>  }<br>  return self;<br>}<br>// 重载父类的初始化方法</li><li>(id)initWithNibName:(NSString <em>)nibNameOrNil bundle:(NSBundle </em>)nibBundleOrNil{<br>  return [self initWithNews:nil];<br>}<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在这里，重载父类的初始化方法并在内部调用新定义的指定初始化方法的原因是你不能确定调用者调用的就一定是你定义的这个新的指定初始化方法，而不是原来从父类继承来的指定初始化方法。</span><br><span class="line"></span><br><span class="line">假设你没有重载父类的指定初始化方法，而调用者却恰恰调用了父类的初始化方法。那么调用者可能永远都调用不到你自己定义的新指定初始化方法了。</span><br><span class="line"></span><br><span class="line">而如果你成功定义了一个新的指定初始化方法并能保证调用者一定能调用它，你最好要在文档中明确写出哪一个才是你定义的新初始化方法。或者你也可以使用编译器指令`__attribute__((objc_designated_initializer))`来标记它。</span><br><span class="line"></span><br><span class="line">#### 3. 所有返回类对象和实例对象的方法都应该使用instancetype</span><br><span class="line"></span><br><span class="line">将instancetype关键字作为返回值的时候，可以让编译器进行类型检查，同时适用于子类的检查，这样就保证了返回类型的正确性（一定为当前的类对象或实例对象）</span><br><span class="line"></span><br><span class="line">推荐这样写：</span><br></pre></td></tr></table></figure></li></ul><p>@interface ZOCPerson</p><ul><li>(instancetype)personWithName:(NSString *)name;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不推荐这样写：</span><br></pre></td></tr></table></figure></li></ul><p>@interface ZOCPerson</p><ul><li>(id)personWithName:(NSString *)name;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 4. 在类的头文件中尽量少引用其他头文件</span><br><span class="line"></span><br><span class="line">有时，类A需要将类B的实例变量作为它公共API的属性。这个时候，我们不应该引入类B的头文件，而应该使用向前声明（forward declaring）使用class关键字，并且在A的实现文件引用B的头文件。</span><br></pre></td></tr></table></figure></li></ul><p>// EOCPerson.h</p><p>#import <foundation foundation.h=""><br>@class EOCEmployer;<br>@interface EOCPerson : NSObject<br>@property (nonatomic, copy) NSString <em>firstName;<br>@property (nonatomic, copy) NSString </em>lastName;<br>@property (nonatomic, strong) EOCEmployer *employer;//将EOCEmployer作为属性<br>@end<br>// EOCPerson.m</foundation></p><p>#import “EOCEmployer.h”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样做有什么优点呢：</span><br><span class="line"></span><br><span class="line">&gt; * 不在A的头文件中引入B的头文件，就不会一并引入B的全部内容，这样就减少了编译时间。</span><br><span class="line">&gt; * 可以避免循环引用：因为如果两个类在自己的头文件中都引入了对方的头文件，那么就会导致其中一个类无法被正确编译。</span><br><span class="line"></span><br><span class="line">但是个别的时候，必须在头文件中引入其他类的头文件:    </span><br><span class="line">    </span><br><span class="line">&gt; 主要有两种情况：</span><br><span class="line">&gt; 1. 该类继承于某个类，则应该引入父类的头文件。</span><br><span class="line">&gt; 2. 该类遵从某个协议，则应该引入该协议的头文件。而且最好将协议单独放在一个头文件中。</span><br><span class="line"></span><br><span class="line">#### 5. 类的布局</span><br></pre></td></tr></table></figure></p><p>#pragma mark - Life Cycle Methods</p><ul><li>(instancetype)init</li><li>(void)dealloc</li><li>(void)viewWillAppear:(BOOL)animated</li><li>(void)viewDidAppear:(BOOL)animated</li><li>(void)viewWillDisappear:(BOOL)animated</li><li>(void)viewDidDisappear:(BOOL)animated<br>#pragma mark - Override Methods<br>#pragma mark - Intial Methods<br>#pragma mark - Network Methods<br>#pragma mark - Target Methods<br>#pragma mark - Public Methods<br>#pragma mark - Private Methods<br>#pragma mark - UITableViewDataSource<br>#pragma mark - UITableViewDelegate<br>#pragma mark - Lazy Loads<br>#pragma mark - NSCopying<br>#pragma mark - NSObject  Methods<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 分类</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. 分类添加的方法需要添加前缀和下划线</span><br><span class="line"></span><br><span class="line">推荐这样写：</span><br></pre></td></tr></table></figure></li></ul><p>@interface NSDate (ZOCTimeExtensions)</p><ul><li>(NSString *)zoc_timeAgoShort;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">不推荐这样写：</span><br></pre></td></tr></table></figure></li></ul><p>@interface NSDate (ZOCTimeExtensions)</p><ul><li>(NSString *)zoc_timeAgoShort;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2. 把类的实现代码分散到便于管理的多个分类中</span><br><span class="line"></span><br><span class="line">一个类可能会有很多公共方法，而且这些方法往往可以用某种特有的逻辑来分组。我们可以利用Objecctive-C的分类机制，将类的这些方法按一定的逻辑划入几个分区中。</span><br><span class="line"></span><br><span class="line">举个🌰：</span><br><span class="line"></span><br><span class="line">先看一个没有使用无分类的类：</span><br></pre></td></tr></table></figure></li></ul><p>#import <foundation foundation.h=""><br>@interface EOCPerson : NSObject<br>@property (nonatomic, copy, readonly) NSString <em>firstName;<br>@property (nonatomic, copy, readonly) NSString </em>lastName;<br>@property (nonatomic, strong, readonly) NSArray *friends;</foundation></p><ul><li>(id)initWithFirstName:(NSString<em>)firstName andLastName:(NSString</em>)lastName;<br>/<em> Friendship methods </em>/</li><li>(void)addFriend:(EOCPerson*)person;</li><li>(void)removeFriend:(EOCPerson*)person;</li><li>(BOOL)isFriendsWith:(EOCPerson<em>)person;<br>/</em> Work methods */</li><li>(void)performDaysWork;</li><li>(void)takeVacationFromWork;<br>/<em> Play methods </em>/</li><li>(void)goToTheCinema;</li><li>(void)goToSportsGame;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">分类之后：</span><br></pre></td></tr></table></figure></li></ul><p>#import <foundation foundation.h=""><br>@interface EOCPerson : NSObject<br>@property (nonatomic, copy, readonly) NSString <em>firstName;<br>@property (nonatomic, copy, readonly) NSString </em>lastName;<br>@property (nonatomic, strong, readonly) NSArray *friends;</foundation></p><ul><li>(id)initWithFirstName:(NSString<em>)firstName<br>andLastName:(NSString</em>)lastName;<br>@end<br>@interface EOCPerson (Friendship)</li><li>(void)addFriend:(EOCPerson*)person;</li><li>(void)removeFriend:(EOCPerson*)person;</li><li>(BOOL)isFriendsWith:(EOCPerson*)person;<br>@end<br>@interface EOCPerson (Work)</li><li>(void)performDaysWork;</li><li>(void)takeVacationFromWork;<br>@end<br>@interface EOCPerson (Play)</li><li>(void)goToTheCinema;</li><li>(void)goToSportsGame;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中，FriendShip分类的实现代码可以这么写：</span><br></pre></td></tr></table></figure></li></ul><p>// EOCPerson+Friendship.h</p><p>#import “EOCPerson.h”<br>@interface EOCPerson (Friendship)</p><ul><li>(void)addFriend:(EOCPerson*)person;</li><li>(void)removeFriend:(EOCPerson*)person;</li><li>(BOOL)isFriendsWith:(EOCPerson*)person;<br>@end<br>// EOCPerson+Friendship.m<br>#import “EOCPerson+Friendship.h”<br>@implementation EOCPerson (Friendship)</li><li>(void)addFriend:(EOCPerson<em>)person {<br>/</em> … */<br>}</li><li>(void)removeFriend:(EOCPerson<em>)person {<br>/</em> … */<br>}</li><li>(BOOL)isFriendsWith:(EOCPerson<em>)person {<br>/</em> … */<br>}<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 注意：在新建分类文件时，一定要引入被分类的类文件。</span><br><span class="line"></span><br><span class="line">通过分类机制，可以把类代码分成很多个易于管理的功能区，同时也便于调试。因为分类的方法名称会包含分类的名称，可以马上看到该方法属于哪个分类中。</span><br><span class="line"></span><br><span class="line">利用这一点，我们可以创建名为Private的分类，将所有私有方法都放在该类里。这样一来，我们就可以根据private一词的出现位置来判断调用的合理性，这也是一种编写“自我描述式代码（self-documenting）”的办法。</span><br><span class="line"></span><br><span class="line">### 单例</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. 单例不能作为容器对象来使用</span><br><span class="line"></span><br><span class="line">单例对象不应该暴露出任何属性，也就是说它不能作为让外部存放对象的容器。它应该是一个处理某些特定任务的工具，比如在iOS中的GPS和加速度传感器。我们只能从他们那里得到一些特定的数据。</span><br><span class="line"></span><br><span class="line">#### 2. 使用dispatch_once来生成单例</span><br><span class="line"></span><br><span class="line">推荐这样写：</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>(instancetype)sharedInstance {<br>static id sharedInstance = nil;<br>static dispatch_once_t onceToken = 0;</p><pre><code>dispatch_once(&amp;onceToken, ^{ </code></pre><p>sharedInstance = [[self alloc] init];<br>});<br>return sharedInstance;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">不推荐这样写：</span><br></pre></td></tr></table></figure></li><li><p>(instancetype)sharedInstance {<br>static id sharedInstance;<br>@synchronized(self) {<br>if (sharedInstance == nil) {  sharedInstance = [[MyClass alloc] init];<br>} }<br>return sharedInstance;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 相等性的判断</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">判断两个person类是否相等的合理做法：</span><br></pre></td></tr></table></figure></li></ul><ul><li>(BOOL)isEqual:(id)object {<br>  if (self == object) {  return YES; //判断内存地址<br>}<br>if (![object isKindOfClass:[ZOCPerson class]]) {<br>  return NO; //是否为当前类或派生类 }<br>return [self isEqualToPerson:(ZOCPerson *)object]; </li></ul><p>}<br>//自定义的判断相等性的方法</p><ul><li>(BOOL)isEqualToPerson:(Person *)person { <pre><code>if (!person) {  return NO;</code></pre>} BOOL namesMatch = (!self.name &amp;&amp; !person.name) || [self.name isEqualToString:person.name]; BOOL birthdaysMatch = (!self.birthday &amp;&amp; !person.birthday) || [self.birthday isEqualToDate:person.birthday]; return haveEqualNames &amp;&amp; haveEqualBirthdays;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 方法文档</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">一个函数(方法)必须有一个字符串文档来解释，除非它：</span><br><span class="line"></span><br><span class="line">* 非公开，私有函数。</span><br><span class="line">* 很短。</span><br><span class="line">* 显而易见。 </span><br><span class="line"></span><br><span class="line">而其余的，包括公开接口，重要的方法，分类，以及协议，都应该伴随文档（注释）：</span><br><span class="line"></span><br><span class="line">* 以/开始</span><br><span class="line">* 第二行识总结性的语句</span><br><span class="line">* 第三行永远是空行</span><br><span class="line">* 在与第二行开头对齐的位置写剩下的注释。</span><br><span class="line"></span><br><span class="line">建议这样写：</span><br></pre></td></tr></table></figure></li></ul><p>/This comment serves to demonstrate the format of a doc string.<br>Note that the summary line is always at most one line long, and after the opening block comment,<br>and each line of text is preceded by a single space.<br>*/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">看一个指定初始化方法的注释：</span><br></pre></td></tr></table></figure></p><p>/ </p><ul><li>Designated initializer. *</li><li>@param store The store for CRUD operations.</li><li>@param searchService The search service used to query the store. </li><li>@return A ZOCCRUDOperationsStore object.<br>*/ <ul><li>(instancetype)initWithOperationsStore:(id<zocgenericstoreprotocol>)store searchService:(id<zocgenericsearchserviceprotocol>)searchService;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 多用队列，少用同步锁来避免资源抢夺</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">多个线程执行同一份代码时，很可能会造成数据不同步。建议使用GCD来为代码加锁的方式解决这个问题。</span><br><span class="line"></span><br><span class="line">#### 方案一：使用串行同步队列来将读写操作都安排到同一个队列里：</span><br></pre></td></tr></table></figure></zocgenericsearchserviceprotocol></zocgenericstoreprotocol></li></ul></li></ul><p>_syncQueue = dispatch_queue_create(“com.effectiveobjectivec.syncQueue”, NULL);<br>//读取字符串</p><ul><li>(NSString*)someString {<pre><code> __block NSString *localSomeString; dispatch_sync(_syncQueue, ^{    localSomeString = _someString;}); return localSomeString;</code></pre>}<br>//设置字符串</li><li>(void)setSomeString:(NSString*)someString {<br>   dispatch_sync(_syncQueue, ^{<pre><code>_someString = someString;</code></pre>  });<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样一来，读写操作都在串行队列进行，就不容易出错。</span><br><span class="line"></span><br><span class="line">但是，还有一种方法可以让性能更高：</span><br><span class="line"></span><br><span class="line">#### 方案二：将写操作放入栅栏快中，让他们单独执行；将读取操作并发执行。</span><br></pre></td></tr></table></figure></li></ul><p>_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);<br>//读取字符串</p><ul><li>(NSString<em>)someString {<br>   __block NSString </em>localSomeString;<br>   dispatch_sync(_syncQueue, ^{<pre><code>localSomeString = _someString;</code></pre>  });<br>   return localSomeString;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>//设置字符串</p><ul><li><p>(void)setSomeString:(NSString*)someString {<br>   dispatch_barrier_async(_syncQueue, ^{</p><pre><code>_someString = someString;</code></pre><p>  });<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">显然，数据的正确性主要取决于写入操作，那么只要保证写入时，线程是安全的，那么即便读取操作是并发的，也可以保证数据是同步的。</span><br><span class="line">这里的`dispatch_barrier_async`方法使得操作放在了同步队列里“有序进行”，保证了写入操作的任务是在串行队列里。</span><br><span class="line"></span><br><span class="line">### 实现description方法打印自定义对象信息</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">在打印我们自己定义的类的实例对象时，在控制台输出的结果往往是这样的：`object = &lt;EOCPerson: 0x7fd9a1600600&gt;`</span><br><span class="line"></span><br><span class="line">这里只包含了类名和内存地址，它的信息显然是不具体的,远达不到调试的要求。</span><br><span class="line"></span><br><span class="line">但是！如果在我们自己定义的类覆写description方法，我们就可以在打印这个类的实例时输出我们想要的信息。</span><br><span class="line"></span><br><span class="line">例如：</span><br></pre></td></tr></table></figure></li><li><p>(NSString*)description {<br>   return [NSString stringWithFormat:@”&lt;%@: %p, %@ %@&gt;”, [self class], self, firstName, lastName];<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在这里，显示了内存地址，还有该类的所有属性。</span><br><span class="line"></span><br><span class="line">而且，如果我们将这些属性值放在字典里打印，则更具有可读性：</span><br></pre></td></tr></table></figure></li><li><p>(NSString*)description {<br>   return [NSString stringWithFormat:@”&lt;%@: %p, %@&gt;”,[self class],self,</p><p>  @{    @”title”:_title,</p><pre><code> @&quot;latitude&quot;:@(_latitude),@&quot;longitude&quot;:@(_longitude)}</code></pre><p>  ];<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输出结果：</span><br></pre></td></tr></table></figure></li></ul><p>location = <eoclocation: 0x7f98f2e01d20,="" {="" latitude="51.506" ;="" longitude="0;" title="London;" }=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我们可以看到，通过重写`description`方法可以让我们更加了解对象的情况，便于后期的调试，节省开发时间。</span><br><span class="line"></span><br><span class="line">### NSArray&amp; NSMutableArray</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. addObject之前要非空判断。</span><br><span class="line">#### 2. 取下标的时候要判断是否越界。</span><br><span class="line">#### 3. 取第一个元素或最后一个元素的时候使用firtstObject和lastObject</span><br><span class="line"></span><br><span class="line">### NSCache</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. 构建缓存时选用NSCache 而非NSDictionary</span><br><span class="line"></span><br><span class="line">如果我们缓存使用得当，那么应用程序的响应速度就会提高。只有那种“重新计算起来很费事的数据，才值得放入缓存”，比如那些需要从网络获取或从磁盘读取的数据。</span><br><span class="line"></span><br><span class="line">在构建缓存的时候很多人习惯用NSDictionary或者NSMutableDictionary，但是作者建议大家使用NSCache，它作为管理缓存的类，有很多特点要优于字典，因为它本来就是为了管理缓存而设计的。</span><br><span class="line"></span><br><span class="line">#### 2. NSCache优于NSDictionary的几点：</span><br><span class="line"></span><br><span class="line">* 当系统资源将要耗尽时，NSCache具备自动删减缓冲的功能。并且还会先删减“最久未使用”的对象。</span><br><span class="line">* NSCache不拷贝键，而是保留键。因为并不是所有的键都遵从拷贝协议（字典的键是必须要支持拷贝协议的，有局限性）。</span><br><span class="line">* NSCache是线程安全的：不编写加锁代码的前提下，多个线程可以同时访问NSCache。</span><br><span class="line"></span><br><span class="line">### NSNotification</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. 通知的名称</span><br><span class="line"></span><br><span class="line">建议将通知的名字作为常量，保存在一个专门的类中：</span><br></pre></td></tr></table></figure></eoclocation:></p><p>// Const.h<br>extern NSString <em> const ZOCFooDidBecomeBarNotification<br>// Const.m<br>NSString </em> const ZOCFooDidBecomeBarNotification = @”ZOCFooDidBecomeBarNotification”;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#### 2. 通知的移除</span><br><span class="line"></span><br><span class="line">通知必须要在对象销毁之前移除掉。</span><br><span class="line"></span><br><span class="line">### 其他</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">#### 1. Xcode工程文件的物理路径要和逻辑路径保持一致。</span><br><span class="line">#### 2. 忽略没有使用变量的编译警告</span><br><span class="line"></span><br><span class="line">对于某些暂时不用，以后可能用到的临时变量，为了避免警告，我们可以使用如下方法将这个警告消除：</span><br></pre></td></tr></table></figure></p><ul><li><p>(NSInteger)giveMeFive {<br>NSString *foo;<br>#pragma unused (foo)<br>return 5;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 3. 手动标明警告和错误</span><br><span class="line"></span><br><span class="line">手动明确一个错误：</span><br></pre></td></tr></table></figure></li><li><p>(NSInteger)divide:(NSInteger)dividend by:(NSInteger)divisor {<br>#error Whoa, buddy, you need to check for zero here!<br>return (dividend / divisor);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">手动明确一个警告：</span><br></pre></td></tr></table></figure></li><li><p>(float)divide:(float)dividend by:(float)divisor {<br>#warning Dude, don’t compare floating point numbers like this!<br>if (divisor != 0.0) {<br>return (dividend / divisor);<br>} else {  return NAN;<br>}<br>}<br>```</p></li></ul><hr><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ol><li><a href="https://www.jianshu.com/p/7645a5ea7f46" target="_blank" rel="noopener">王垠：编程的智慧</a></li><li><a href="https://tech.meituan.com/clean-code.html" target="_blank" rel="noopener">美团点评技术团队：聊聊clean code</a></li><li><a href="禅与 Objective-C 编程艺术">禅与 Objective-C 编程艺术</a></li><li><a href="https://www.jianshu.com/nb/6074358" target="_blank" rel="noopener">J_Knight 的文集：iOS - 《Effective Objective-C 2.0》</a></li><li><a href="https://www.jianshu.com/p/08be5b30ff82" target="_blank" rel="noopener">蝴蝶之梦天使：iOS代码编程规范-根据项目经验汇总</a></li><li><a href="https://www.jianshu.com/p/003f2d777ee8" target="_blank" rel="noopener">高家二少爷：Objective-C高质量代码参考规范</a></li><li><a href="https://knightsj.github.io/2017/06/14/iOS%20代码规范/" target="_blank" rel="noopener">J_Knight 的文集：iOS 代码规范</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-a9d78ce3d5e7114f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages + Hexo搭建博客</title>
    <link href="http://yoursite.com/2018/03/15/hexo/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/03/15/hexo/GitHub-Pages-Hexo搭建博客/</id>
    <published>2018-03-15T02:40:00.000Z</published>
    <updated>2018-03-16T01:17:28.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Pages-Hexo搭建博客"><a href="#GitHub-Pages-Hexo搭建博客" class="headerlink" title="GitHub Pages + Hexo搭建博客"></a>GitHub Pages + Hexo搭建博客</h1><h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>这是一篇是单纯地利用GitHub Pages搭建自己独立博客的过程，并没有额外使用独立域名之类的。</p><p>如果是小小白，可以先花时间去了解下：</p><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git</a></li><li><a href="https://github.com" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://pages.github.com" target="_blank" rel="noopener">GitHub Pages</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://www.appinn.com/markdown/#autoescape" target="_blank" rel="noopener">Markdown</a></li></ul><h2 id="二、-必要配置"><a href="#二、-必要配置" class="headerlink" title="二、 必要配置"></a>二、 必要配置</h2><h3 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h3><h4 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h4><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。</p><p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。</p><p>简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li></ol><h4 id="2-1-2-相关资料"><a href="#2-1-2-相关资料" class="headerlink" title="2.1.2 相关资料"></a>2.1.2 相关资料</h4><ul><li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="noopener">GitHub Pages Basics / User, Organization, and Project Pages</a></li></ul><h3 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h3><h4 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h4><p>在windows下安装git比较常用的有两种方式：</p><ol><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git 官方版本的安装</a></li><li><a href="https://desktop.github.com" target="_blank" rel="noopener">GitHub for Windows</a></li></ol><h4 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h4><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;</span><br><span class="line">$ git config --global user.email &quot;username@example.com&quot;</span><br></pre></td></tr></table></figure><p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p><ol><li>在GitHub右上方点击你的头像，选择”Settings”；</li><li>在右边的”Personal settings”侧边栏选择”Emails”；</li><li>选择”Keep my email address private”。</li></ol><p>这样，你就可以使用如下格式的email进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email &quot;username@users.noreply.github.com&quot;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h4><ul><li><a href="https://git-scm.com/book/zh/v2/起步-安装-Git" target="_blank" rel="noopener">安装 Git</a></li><li><a href="https://git-scm.com/book/zh/v2/起步-初次运行-Git-前的配置" target="_blank" rel="noopener">配置 Git</a></li><li><a href="https://help.github.com/articles/setting-your-commit-email-address-in-git/" target="_blank" rel="noopener">Setting your email in Git</a></li><li><a href="https://help.github.com/articles/setting-your-commit-email-address-on-github/" target="_blank" rel="noopener">Keeping your email address private</a></li></ul><h3 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h3><h4 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h4><p>这里，我们要区分清楚git与github。</p><p>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p><h4 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h4><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p><h5 id="2-3-2-1-检查电脑是否已经有SSH-KEYS。"><a href="#2-3-2-1-检查电脑是否已经有SSH-KEYS。" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH KEYS。"></a>2.3.2.1 检查电脑是否已经有SSH KEYS。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br><span class="line"># Lists the files in your .ssh directory, if they exist</span><br></pre></td></tr></table></figure><p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p><h5 id="2-3-2-2-如果没有SSH-KEY，则生成新的SSH-KEY。"><a href="#2-3-2-2-如果没有SSH-KEY，则生成新的SSH-KEY。" class="headerlink" title="2.3.2.2 如果没有SSH KEY，则生成新的SSH KEY。"></a>2.3.2.2 如果没有SSH KEY，则生成新的SSH KEY。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br><span class="line"># Creates a new ssh key, using the provided email as a label</span><br></pre></td></tr></table></figure><p>之后一路回车即可。</p><h5 id="2-3-2-3-向SSH-AGENT添加KEY。"><a href="#2-3-2-3-向SSH-AGENT添加KEY。" class="headerlink" title="2.3.2.3 向SSH-AGENT添加KEY。"></a>2.3.2.3 向SSH-AGENT添加KEY。</h5><p>首先确保ssh-agent可运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">$ ssh-agent -s</span><br></pre></td></tr></table></figure><p>然后添加SSH key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h5 id="2-3-2-4-在GITHUB添加SSH-KEY。"><a href="#2-3-2-4-在GITHUB添加SSH-KEY。" class="headerlink" title="2.3.2.4 在GITHUB添加SSH KEY。"></a>2.3.2.4 在GITHUB添加SSH KEY。</h5><p>首先，拷贝key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"># Copies the contents of the id_rsa.pub file to your cllipboard</span><br></pre></td></tr></table></figure><p>然后，在GitHub右上方点击头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。接着粘贴key，点击”Add key”按钮。最后，测试链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"># Attempts to ssh to GitHub</span><br></pre></td></tr></table></figure><p>如果你看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>就键入：yes。之后将会看到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><h4 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h4><ul><li><a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Generating SSH keys</a></li></ul><h3 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h3><h4 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h4><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com" target="_blank" rel="noopener">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h4><p>安装完后，在你喜欢的文件夹内（例如D：\Hexo），点击鼠标右键选择Git bash，输入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p><h4 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h4><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官方文档</a></li></ul><h3 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h3><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p><h4 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h4><p>我们继续使用上面的文件夹D:\Hexo（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p><p>默认生成的_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure><p>修改后的_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</span><br><span class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</span><br></pre></td></tr></table></figure><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后，执行下列指令即可完成部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p><h4 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h4><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p><p>下面是next主题的个性化配置教程:</p><ul><li><a href="http://shenzekun.cn/hexo的next主题个性化配置教程.html" target="_blank" rel="noopener">next个性化配置教程</a></li></ul><h3 id="四、-优化部署与管理"><a href="#四、-优化部署与管理" class="headerlink" title="四、 优化部署与管理"></a>四、 优化部署与管理</h3><h4 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h4><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p><p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦(╬▔皿▔)凸）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p><p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ)…）。</p><p>所以，我利用了分支！！！</p><p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p><p>下面以我的博客作为例子详细地讲述。</p><h4 id="4-2-我的博客搭建流程"><a href="#4-2-我的博客搭建流程" class="headerlink" title="4.2 我的博客搭建流程"></a>4.2 我的博客搭建流程</h4><ol><li>创建仓库，liuxc123.github.io；</li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone git@github.com:liuxc123/liuxc123.github.io.git拷贝仓库；</li><li>修改_config.yml中的deploy参数，分支应为master；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo generate -d生成网站并部署到GitHub上。</li><li>这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</li></ol><h4 id="4-3-我的博客管理流程"><a href="#4-3-我的博客管理流程" class="headerlink" title="4.3 我的博客管理流程"></a>4.3 我的博客管理流程</h4><h5 id="4-3-1-日常修改"><a href="#4-3-1-日常修改" class="headerlink" title="4.3.1 日常修改"></a>4.3.1 日常修改</h5><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p><ol><li>依次执行<code>git add .</code>、<code>git commit -m “…”</code>、<code>git push origin hexo</code>指令将改动推送到GitHub（此时当前分支应为hexo）；</li><li>然后才执行<code>hexo generate -d</code>发布网站到master分支上。</li></ol><p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p><h5 id="4-3-2-本地资料丢失"><a href="#4-3-2-本地资料丢失" class="headerlink" title="4.3.2 本地资料丢失"></a>4.3.2 本地资料丢失</h5><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li>使用<code>git clone git@github.com:liuxc123/liuxc123.github.io.git</code>拷贝仓库（默认分支为hexo）；</li><li>在本地新拷贝的liuxc123.github.io文件夹下通过Git bash依次执行下列指令：<code>npm install hexo</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>（记得，不需要<code>hexo init</code>这条指令）。</li></ol><p>###五、结尾<br>ok,现在你就可以轻松的搭建自己的博客了。(ˉ▽ˉ)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub-Pages-Hexo搭建博客&quot;&gt;&lt;a href=&quot;#GitHub-Pages-Hexo搭建博客&quot; class=&quot;headerlink&quot; title=&quot;GitHub Pages + Hexo搭建博客&quot;&gt;&lt;/a&gt;GitHub Pages + Hexo搭建
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
